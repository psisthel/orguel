/*/{PROTHEUS.DOC} LOCA001.PRW
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE O REGISTRO DOS PROJETOS PARA OS MOVIMENTOS DE LOCAÇÃO.
NA VERSÃO ANTERIOR CHAMAVA-SE LOCC001.PRW
@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
#INCLUDE "RWMAKE.CH" 
#INCLUDE "TOTVS.CH"
#INCLUDE "TOPCONN.CH"

#DEFINE MAXGETDAD 99999							// USADO EM TODOS OS MSNEWGETDADOS
#DEFINE CCAMINHO  "\ROTAS"						// CAMINHO ONDE ESTÃO ARMAZENADOS O DOCUMENTOS DIGITALIZADOS

FUNCTION LOCA001(_nRegXT)
LOCAL   CFILTOP
LOCAL   CSTRING   := "FP0"
LOCAL   CCADASTRO := "" 
LOCAL 	_LFILVEND := SUPERGETMV("MV_LOCX203",.F.,.F.)
//LOCAL AAREAINI  := GETAREA() 

PRIVATE AROTINA
PRIVATE ACAMPOZA0 := {}
PRIVATE LCOPYPRJ  := .F.
PRIVATE ADELVIAG  := {}
PRIVATE OBJT
PRIVATE OTGET2
PRIVATE MV_LOCX020
PRIVATE	CGRPAND	  := ""
PRIVATE LZAGNFRET := SUPERGETMV("MV_LOCX259" , .F. , .F.) 
PRIVATE CSELECREC := SUPERGETMV("MV_LOCX073" , .F. , "" ) 			// --> TIPOS DE RECEITA DISPONIVEIS PARA SELECAO (T=TRANSPORTE / E=EQUIPAMENTO / L=LOCACAO). EX: TEL OU TL OU EL OU L. 

CCADASTRO := "MANUTENÇÃO DE " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") 

//IF !LOCA061() 								// --> VALIDAÇÃO DO LICENCIAMENTO (WS) DO GPO 
//	RETURN 
//ENDIF 

SETKEY(VK_F10 , {|| LOCA023()}) 

CHKFILE("SBM") 									// --> EVITAR ERROR LOG, QUANDO TABELA PADRÃO AINDA NÃO TIVER SIDO ABERTA (CRIADA).
IF SBM->(FIELDPOS("BM_XACESS")) > 0
	CGRPAND := LOCA00189()
ELSE
	CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
ENDIF

MV_LOCX020 := GETMV("MV_LOCX020") 
AROTINA   := XMENUDEF() 

DBSELECTAREA(CSTRING) 
DBSETORDER(1) 

IF _LFILVEND .AND. LOCA015()					// É VENDEDOR
	CFILTOP := "FP0_VENDED = '" + SA3->A3_COD + "'"
ENDIF

//	MBROWSE( <NLINHA1>, <NCOLUNA1>, <NLINHA2>, <NCOLUNA2>, <CALIAS>, <AFIXE>, <CCPO>, <NPAR>, <CCORFUN>, <NCLICKDEF>, <ACOLORS>  , <CTOPFUN>, <CBOTFUN>, <NPAR14>, <BINITBLOC>, <LNOMNUFILTER>, <LSEEALL>, <LCHGALL>, <CEXPRFILTOP>, <NINTERVAL>, <UPAR22>, <UPAR23> )
	MBROWSE( 6        , 1         , 22       , 75        , CSTRING ,        ,       ,       ,          ,            , LOCA00101(),          ,          ,         ,            ,               ,          ,          , CFILTOP)

SETKEY(VK_F10 , NIL) 

RETURN NIL


/*/{PROTHEUS.DOC} ZA0LEGE
ITUP BUSINESS - TOTVS RENTAL
FUNÇÃO PARA LEGENDA DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001COR") - ALTERAÇÃO DA LEGENDA PADRÃO.
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS, ALIAS PRINCIPAL QUE REPRESENTA O CADASTRO DE PROJETOS 
@PARAM NORDER,
@PARAM NRECNO, PONTEIRO COM O REGISTRO ATUAL
@RETURN SEM RETORNO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00101( CALIAS, NORDER, NRECNO ) 

PRIVATE ASTATUS
PRIVATE ALEGENDA := {}
PRIVATE ACORES   := {}

DEFAULT CALIAS   := ""
DEFAULT NORDER   := 0
DEFAULT NRECNO   := 0

ASTATUS := FSTATUS("LEGENDA")					// TRAZ OS STATUS DAS PROPOSTAS

AADD(ALEGENDA,{"F10_PRET"        , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_VERDE"        , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_AMARELO"      , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_AZUL"         , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_BRANCO"       , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_PRETO"        , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_VERMELHO"     , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_LARANJA"      , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_MARRON_OCEAN" , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_CINZA"        , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_PINK"         , ASTATUS[LEN(ALEGENDA)+1]}) 
AADD(ALEGENDA,{"BR_CANCEL"       , ASTATUS[LEN(ALEGENDA)+1]}) 

AADD(ACORES,{'FP0_STATUS=="1" .AND. !EMPTY(ALLTRIM(GETADVFVAL("FQ5", "FQ5_SOT",XFILIAL("FQ5") + FP0_FILIAL + FP0_PROJET,21,"")))' ,ALEGENDA[LEN(ACORES)+1,1]}) 
AADD(ACORES,{'FP0_STATUS=="1"'   , ALEGENDA[LEN(ACORES)+1,1]}) 
AADD(ACORES,{'FP0_STATUS=="2"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="3"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="4"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="5"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="6"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="7"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="8"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="A"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="B"'   , ALEGENDA[LEN(ACORES)+1,1]})
AADD(ACORES,{'FP0_STATUS=="C"'   , ALEGENDA[LEN(ACORES)+1,1]})

IF EXISTBLOCK("LC001COR") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CORES DA LEGENDA
	EXECBLOCK("LC001COR" , .T. , .T. , {ALEGENDA,ACORES}) 
ENDIF

IF NRECNO == 0 									// --> CHAMADA PELO MBROWSE NÃO PASSA O RECNO()
	RETURN(ACORES)
ELSE 											// --> CHAMADA PELO AROTINA PASSA O RECNO()
	BRWLEGENDA( SUPERGETMV("MV_LOCX248",.F.,"PROJETO") , "STATUS" , ALEGENDA )
	RETURN .T.
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FSTATUS
ITUP BUSINESS - TOTVS RENTAL
FUNÇÃO PARA COMPLEMENTO DA LEGENDA DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001LEG") - ALTERAÇÃO DA COR DAS LEGENDAS.
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CVAR, TRAZ OS STATUS DAS PROPOSTAS
@RETURN ARRAY COM OS STATUS (EM ELABORAÇÃO, FECHADA, INDISPONÍVEL, ETC)
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
STATIC FUNCTION FSTATUS(CVAR) 
LOCAL ARET := {}

DO CASE
CASE UPPER(CVAR) == "LEGENDA"
	AADD(ARET , "DIGITAÇÃO C/ CONTRATO" )
	AADD(ARET , "EM ELABORAÇÃO" )
	AADD(ARET , "EM APROVAÇÃO"  )
	AADD(ARET , "APROVADO"      )
	AADD(ARET , "NÃO APROVADO"  )
	AADD(ARET , "FECHADO"       )
	AADD(ARET , "INDISPONÍVEL"  )
	AADD(ARET , "REJEITADO"     )
	AADD(ARET , "FATURADO"      )
	AADD(ARET , "REVISADO"      )
	AADD(ARET , "EXCLUIDO"      )
	AADD(ARET , "PERDIDO"       )
CASE UPPER(CVAR) == "COMBO"
	AADD(ARET,"1=DIGITAÇÃO C/ CONTRATO")
	AADD(ARET,"1=EM ELABORAÇÃO" )
	AADD(ARET,"2=EM APROVAÇÃO"  )
	AADD(ARET,"3=APROVADO"      )
	AADD(ARET,"4=NÃO APROVADO"  )
	AADD(ARET,"5=FECHADO"       )
	AADD(ARET,"6=INDISPONÍVEL"  )
	AADD(ARET,"7=REJEITADO"     )
	AADD(ARET,"8=FATURADO"      )
	AADD(ARET,"A=REVISADO"      )
	AADD(ARET,"B=EXCLUIDO"      )
	AADD(ARET,"C=PERDIDO"       )
ENDCASE

IF EXISTBLOCK("LC001LEG") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CORES DA LEGENDA
	ARET := EXECBLOCK("LC001LEG" , .T. , .T. , {ARET}) 
ENDIF

RETURN ACLONE( ARET )


/*/{PROTHEUS.DOC} ZA0AS
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A IMPRESSÃO DA AS.

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>
MV_LOCX248:

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN SEM RETORNO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
FUNCTION LOCA00102() 
// ======================================================================= \\
// --> CHAMADA: MENU - "EMITIR AS"    ( IMPRESSÃO DAS AS ) 

IF FP0->FP0_STATUS != "3" .AND. FP0->FP0_STATUS != "5" .AND. FP0->FP0_STATUS != "8"
	Help(Nil,Nil,"RENTAL: "+alltrim(upper(Procname())),;
	         Nil,"Impressão de autorização de serviço não permitida.",1,0,Nil,Nil,Nil,Nil,Nil,;
			 {"O "+SUPERGETMV("MV_LOCX248",.F.,"Projeto") + " deve estar com status igual (3)Aprovado, ou (5)Fechado, ou (8)Faturado."})
ELSE
	DO CASE
	CASE FP0->FP0_TIPOSE == "E"					// AS DE EQUIPAMENTO
		LOCR011()
	CASE FP0->FP0_TIPOSE == "T"					// AS DE TRANSPORTE
		LOCR012()
	CASE FP0->FP0_TIPOSE == "L"					// AS DE LOCACAO
		LOCR015()
	OTHERWISE
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não existe AS definida para este tipo de Serviço."})
	ENDCASE
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} XMENUDEF
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A IDENTIFICAÇÃO DO MENU DE OPÇÕES.

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001ROT") - ALTERAÇÃO DOS ITENS DO MENU.
<P><B>PARÂMETROS:</B>
MV_LOCX227:
MV_LOCX225:
MV_LOCX226:
MV_LOCX020:
MV_LOCX008:
MV_LOCX223:
MV_LOCX206:

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN AROTINA
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
STATIC FUNCTION XMENUDEF()
// ======================================================================= \\

LOCAL AROTINA  := {}
LOCAL AROTINA1 := {}
//LOCAL XRET									// --> P.E. DESCONTINUADO !!! 

IF PSWADMIN(,,__CUSERID) == 0

	AADD(AROTINA1     , {SUPERGETMV("MV_LOCX248",.F.,"Projeto")                  , "LOCA00112"  , 0 , 6})
	AADD(AROTINA1     , {"Localidades"                                           , "LOCA00113"  , 0 , 6})
	AADD(AROTINA1     , {"Locais"                                                , "LOCA00114"  , 0 , 6})
	AADD(AROTINA1     , {"Etapas"                                                , "LOCA00115"  , 0 , 6})
	AADD(AROTINA1     , {"Rotas  X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00116"  , 0 , 6})
	AADD(AROTINA1     , {"Guind. X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00117"  , 0 , 6})
	AADD(AROTINA1     , {"Transp.X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00118"  , 0 , 6})
	AADD(AROTINA1     , {"Cargas X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00119"  , 0 , 6})
	AADD(AROTINA1     , {"RAT    X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00120"  , 0 , 6})
	AADD(AROTINA1     , {"Custos X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00121"  , 0 , 6})
	IF SUPERGETMV("MV_LOCX227",.F.,.T.)
		AADD(AROTINA1 , {"Respon.X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00122"  , 0 , 6})
		AADD(AROTINA1 , {"Responsabilidades"                                     , "LOCA00123"  , 0 , 6})
	ENDIF
	AADD(AROTINA1     , {"M.O.   X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00124"  , 0 , 6})
 //	AADD(AROTINA1     , {"LICIT. X "  + SUPERGETMV("MV_LOCX248",.F.,"PROJETO")   , "U_CADZAD"  , 0 , 6})
	IF SUPERGETMV("MV_LOCX225",.F.,.T.)
		AADD(AROTINA1 , {"Cj.Transp.X "+SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00125"  , 0 , 6})
	ENDIF
	AADD(AROTINA1     , {"Follow X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00126"  , 0 , 6})
	AADD(AROTINA1     , {"Grua   X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00127"  , 0 , 6})
	//AADD(AROTINA1     , {"CONCORRENTES"                                          , "LOCA00128"  , 0 , 6})
	IF SUPERGETMV("MV_LOCX226",.F.,.T.)
		AADD(AROTINA1 , {"Doctos.X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00129"  , 0 , 6})
		AADD(AROTINA1 , {"Documentos"                                            , "LOCA00130"  , 0 , 6})
	ENDIF
	AADD(AROTINA1     , {"Acess.Gruas X "+SUPERGETMV("MV_LOCX248",.F.,"Projeto") , "LOCA00131"  , 0 , 6})
	//AADD(AROTINA1     , {"LOCA00132"                                                , "LOCA00132"  , 0 , 6})
	AADD(AROTINA1     , {"Trecho X "  + SUPERGETMV("MV_LOCX248",.F.,"Projeto")   , "LOCA00133"  , 0 , 6})
	AADD(AROTINA1     , {"Escolta"                                               , "LOCA00134"  , 0 , 6})
	AADD(AROTINA1     , {"Escolta SP"                                            , "LOCA00135"  , 0 , 6})
	//AADD(AROTINA1     , {"TUV"                                                   , "LOCA00136"  , 0 , 6})
	//AADD(AROTINA1     , {"PARAMETROS"                                            , "LOCA00137"  , 0 , 6})
	AADD(AROTINA1     , {"BENS"                                                  , "LOCA00138"  , 0 , 6})
 //	AADD(AROTINA1     , {"ACESS.GUIN.X " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO"), "U_CADZAQ"  , 0 , 6})
 //	AADD(AROTINA1     , {"DESCRIÇÃO "    + SUPERGETMV("MV_LOCX248",.F.,"PROJETO"), "U_CADZAR"  , 0 , 6})
 

ELSE

	AADD(AROTINA1     , {"Locais"                                                , "LOCA00114"  , 0 , 6}) 
	AADD(AROTINA1     , {"Etapas"                                                , "LOCA00115"  , 0 , 6})
	IF SUPERGETMV("MV_LOCX227",.F.,.T.)
		AADD(AROTINA1 , {"Responsabilidades"                                     , "LOCA00123"  , 0 , 6})
	ENDIF
	AADD(AROTINA1     , {"Documentos"                                            , "LOCA00130"  , 0 , 6})
	AADD(AROTINA1     , {"Escolta"                                               , "LOCA00134"  , 0 , 6})
	//AADD(AROTINA1     , {"TUV"	                                                 , "LOCA00136"  , 0 , 6})
 //	AADD(AROTINA1     , {"ESCOLTA SP"                                            , "LOCA00135"  , 0 , 6})
 //	AADD(AROTINA1     , {"PARAMETROS"                                            , "LOCA00137"  , 0 , 6}) 

ENDIF

IF CNIVEL >= 5

	AADD(AROTINA      , {"Pesquisar"                                             , "AXPESQUI"     , 0 , 1})
	AADD(AROTINA      , {"Visualizar"                                            , "LOCA00110"    , 0 , 2})
	AADD(AROTINA      , {"Gráfico/Status"                                        , "LOCA072"    , 0 , 6})
	AADD(AROTINA      , {"Incluir"                                               , "LOCA00104"    , 0 , 3})
	AADD(AROTINA      , {"Alterar"                                               , "LOCA00103"    , 0 , 6})
	AADD(AROTINA      , {"Legenda"                                               , "LOCA00101"    , 0 , 6})
	AADD(AROTINA      , {"Manutenção"                                            , "LOCA00105(4)" , 0 , 6})
	AADD(AROTINA      , {"Cancelar"                                              , "LOCA00162"    , 0 , 6})
	IF MV_LOCX020
		AADD(AROTINA  , {"Em aprovação"                                          , "LOCA00161"   , 0 , 6})
	ENDIF
	AADD(AROTINA      , {"Cadastros"                                             , AROTINA1       , 0 , 6})
	AADD(AROTINA      , {"Gera Contrato"                                         , "LOCA00173"   , 0 , 6})
	IF SUPERGETMV("MV_LOCX008",.F.,.F.)
		AADD(AROTINA  , {"Gera NF Remessa"                                       , "LOCA010(.F.)"   , 0 , 6})
	ENDIF
	AADD(AROTINA      , {"Prog. Entrega"                                         , "LOCA002"    , 0 , 6})
	AADD(AROTINA      , {"Ret. de Locação"                                       , "LOCA011"   , 0 , 6})
	AADD(AROTINA      , {"Cancelar AS"                                           , "LOCA040"    , 0 , 6})
	AADD(AROTINA      , {"% Possibilidade"                                       , "LOCA00166"   , 0 , 6})
	AADD(AROTINA      , {"Emitir AS"                                             , "LOCA00102"      , 0 , 6})
	IF SUPERGETMV("MV_LOCX223",,"N") == "S"
		AADD(AROTINA  , {"Emitir Proposta"                                       , "U_LOCI100"    , 0 , 6})
	ENDIF
	AADD(AROTINA      , {"Emitir Contrato"                                       , "LOCR016"    , 0 , 6})
	AADD(AROTINA      , {"Revisão"                                               , "LOCA00163"   , 0 , 6}) 
	AADD(AROTINA      , {"Follow-up"                                             , "LOCA00106"  , 0 , 6}) 
	IF SUPERGETMV("MV_LOCX206",.F.,.T.)		
	   AADD(AROTINA   , {"Copiar"                                                , "LOCA00105(5)" , 0 , 6})
	ENDIF
	AADD(AROTINA      , {"R.A.T"                                                 , "LOCA00191"    , 0 , 6}) 
 //	AADD(AROTINA      , {"PLANILHA PDF"                                          , "U_LOCR001"    , 0 , 6})
 //	AADD(AROTINA      , {"PROPOSTA PDF"                                          , "U_LOCI100"    , 0 , 6})   	// EM DESENVOLVIMENTO.]

 	//AADD(AROTINA     , {"DOCUMENTOS"                                            , "LOCA00130"  , 0 , 6})

ELSE

	AADD(AROTINA      , {"Pesquisar"                                             , "AXPESQUI"     , 0 , 1}) 
	AADD(AROTINA      , {"Visualizar"                                            , "LOCA00110"    , 0 , 2}) 
	AADD(AROTINA      , {"Legenda"                                               , "LOCA00101"    , 0 , 6}) 

ENDIF

AADD(AROTINA      , {"Notas de Retorno", "LOCA00199"    , 0 , 6}) 

/*	// --> P.E. DESCONTINUADO !!! 
IF EXISTBLOCK("LOCC001_")
	XRET := U_LOCC001_( "MENUDEF", { AROTINA } )
	IF VALTYPE(XRET) == "A"
		AROTINA := ACLONE( XRET )
	ENDIF
ENDIF
*/	// --> P.E. DESCONTINUADO !!! 

IF EXISTBLOCK("LC001ROT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE BOTÕES NO AÇÕES RELACIONADAS
	AROTINA := EXECBLOCK("LC001ROT" , .T. , .T. , {AROTINA,AROTINA1}) 
ENDIF

RETURN ACLONE( AROTINA )


/*/{PROTHEUS.DOC} ZA0ALTE
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A ALTERAÇÃO DOS DADOS PRINCIPAIS DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001GRV") - APÓS A GRAVAÇÃO DOS DADOS.
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN LÓGICO COM O RESULTADO SE FOI PROCESSADO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00103() 

LOCAL   _C_LABEL  := "" 
LOCAL   lFP0TDOK  := ExistBlock("FP0TDOK") // MERGE - ORGUEL 94 - INICIO
LOCAL	cTudoOK   := "" // MERGE - ORGUEL 94 - INICIO

PRIVATE NOPC      := 4 							// 4=ALTERAR
PRIVATE NOPCMANU  := 4 							// 4=ALTERAR
PRIVATE CCADASTRO := "MANUTENÇÃO " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO")

IF FP0->FP0_STATUS $ "6|7|A|B|C" .AND. !LCOPYPRJ
	_C_LABEL :=  IIF(FP0->FP0_STATUS == "6" , "INDISPONÍVEL" , ; 
				 IIF(FP0->FP0_STATUS == "7" , "REJEITADO"    , ; 
				 IIF(FP0->FP0_STATUS == "8" , "FATURADO"     , ; 
				 IIF(FP0->FP0_STATUS == "A" , "REVISADO"     , ; 
				 IIF(FP0->FP0_STATUS == "B" , "EXCLUÍDO"     , ; 
				 IIF(FP0->FP0_STATUS == "C" , "PERDIDO"      , ""))))))
	//MSGSTOP(CCADASTRO + " ENCONTRA-SE COM O STATUS " + FP0->FP0_STATUS + "-" + _C_LABEL + ", NÃO É POSSÍVEL A MANUTENÇÃO !!!" , "GPO - LOCC001.PRW") 

	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{CCADASTRO + " Encontra-se com o status: " + FP0->FP0_STATUS + "-" + _C_LABEL + ", não é possível a manutenção."})

	RETURN .F.
ENDIF

// MERGE - ORGUEL 94 - INICIO
// Ponto de Entrada para alterar o Tudo OK da ZA0
IF  lFP0TDOK
    cTudoOK += ' ExecBlock("FP0TDOK",.f.,.f.)'
Endif
// MERGE - ORGUEL 94 - FIM


DBSELECTAREA("FP0")
NOPCA := AXALTERA("FP0", RECNO(), 4,,,,, cTudoOk,, /*cTransact*/ ) // AxAltera(cString,Recno(),4)  // MERGE - ORGUEL 94 - INICIO
LRET  := (NOPCA == 1)  							// 1=OK,3=CANCEL

IF LRET
	IF EXISTBLOCK("LC001GRV")
		EXECBLOCK("LC001GRV" , .T. , .T. , {,,FP0->FP0_PROJET,.T.}) 
	ENDIF 
ENDIF 

RETURN LRET


/*/{PROTHEUS.DOC} ZA0INCL
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A INCLUSÃO DOS DADOS PRINCIPAIS DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001INC") - APÓS A GRAVAÇÃO DOS DADOS.
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@PARAM MV_LOCX248

@RETURN LÓGICO COM O RESULTADO SE FOI PROCESSADO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00104() 
LOCAL   CPROJET
LOCAL   ODLG
LOCAL   NPOS
LOCAL   LRET      := .F.
LOCAL   NOPCA									// RETORNO DO AXINCLUI()
LOCAL   AHEADER
LOCAL   ACOLS
LOCAL   ACOLS0
LOCAL   ACASADAS  := {}
LOCAL   NCASADAS
LOCAL   NRECZA0   := FP0->(RECNO())
LOCAL   NORDZA0   := FP0->(INDEXORD())
LOCAL   LRECEITAT := .F.
LOCAL   LRECEITAE := .F.
LOCAL   LRECEITAL := .F.
LOCAL   LEXIBE    := .T.
LOCAL   LEXIB1    := .T.
LOCAL   LEXIB2    := .T.
LOCAL   LEXIB3    := .T.
LOCAL   ABUTTONS  := {} 
LOCAL   NPOS

PRIVATE NOPC      := 3 							// 3=INCLUIR
PRIVATE NOPCMANU  := 3 							// 3=INCLUIR
PRIVATE ZA0RECEIT								// USADA EM ZA0INICI("FP0_RECEIT")  	// INICIALIZADOR PADRÃO DO CAMPO
PRIVATE ZA0TIPOSE								// USADA EM ZA0INICI("FP0_TIPOSE")  	// INICIALIZADOR PADRÃO DO CAMPO
PRIVATE CCADASTRO := "INCLUSÃO DE " + SUPERGETMV("MV_LOCX248" , .F. , "PROJETO") 

// --> SUPERGETMV("MV_LOCX073" , .F. , "") 		// --> TIPOS DE RECEITA DISPONIVEIS PARA SELECAO (T=TRANSPORTE / E=EQUIPAMENTO / L=LOCACAO). EX: TEL OU TL OU EL OU L. 
CSELECREC := UPPER(ALLTRIM(CSELECREC)) 

IF EMPTY(CSELECREC)								// --> SE PARAMETRO NÃO EXISTIR E/OU ESTIVER VAZIO, HABILITA TODAS AS RECEITAS.

	LEXIBE := .T. 
	LEXIB1 := .T. 								// --> RECEITA TRANSPORTE 
	LEXIB2 := .T. 								// --> RECEITA EQUIPAMENTO 
	LEXIB3 := .T. 								// --> RECEITA LOCACAO

ELSE											// --> CASO NÃO EXISTA OU NÃO ESTEJA HABILITADO, CONSIDERA (EVENTUAL) P.E. 

	IF LEN(CSELECREC) = 1 						// --> SÓ EXITE UMA RECEITA CONFIGURADA NO PARÂMETRO.
		LEXIBE := .F. 							// --> NÃO PRECISO ABRIR A JANELA DE SELEÇÃO.
		IF     CSELECREC = "T"
			LRECEITAT := .T. 
		ELSEIF CSELECREC = "E"
			LRECEITAE := .T. 
		ELSEIF CSELECREC = "L"
			LRECEITAL := .T. 
		ELSE 
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	         			Nil,"O módulo não está adequadamente configurado para o tipo de receita.",1,0,Nil,Nil,Nil,Nil,Nil,;
			 			{"Utilize o tipo de receita Locação."})
			RETURN .F. 
		ENDIF 
	ELSE										// --> EXISTE MAIS QUE UMA RECEITA CONFIGURADA NO PARÂMETRO.
		LEXIBE := .T. 							// --> NÃO PRECISO ABRIR A JANELA DE SELEÇÃO.		
		LEXIB1 := .F. 
		LEXIB2 := .F. 
		LEXIB3 := .F. 
		IF "T" $ CSELECREC 
			LEXIB1    := .T. 					// --> HABILITA CHECK PARA TRANSPORTE
		ENDIF 		
		IF "E" $ CSELECREC 
			LEXIB2    := .T. 					// --> HABILITA CHECK PARA EQUIPAMENTO
		ENDIF 
		IF "L" $ CSELECREC 
			LEXIB3    := .T. 					// --> HABILITA CHECK PARA LOCACAO 
		ENDIF  
		IF !(LEXIB1 .OR. LEXIB2 .OR. LEXIB3) 
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	         			Nil,"O módulo não está adequadamente configurado para o tipo de receita.",1,0,Nil,Nil,Nil,Nil,Nil,;
			 			{"Utilize o tipo de receita Locação."})
			RETURN .F. 
		ENDIF 
	ENDIF 

ENDIF 

/* Removido a pedido do Lui em 10/02/2021 - Frank Z Fuga.
IF LEXIBE
	DEFINE MSDIALOG ODLG TITLE "INCLUSÃO DE " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") FROM C(178),C(181) TO C(402),C(385) PIXEL 
		@ C(010),C(008) TO C(090),C(097) LABEL "SELECIONE A RECEITA" PIXEL OF ODLG
		IF LEXIB1
			@ C(017),C(015) CHECKBOX OCHECKBOX1 VAR LRECEITAT PROMPT "RECEITA TRANSPORTE"   SIZE C(075),C(008) PIXEL OF ODLG
		ENDIF
		IF LEXIB2
			@ C(026),C(015) CHECKBOX OCHECKBOX2 VAR LRECEITAE PROMPT "RECEITA EQUIPAMENTOS" SIZE C(075),C(008) PIXEL OF ODLG
		ENDIF
		IF LEXIB3
			@ C(035),C(015) CHECKBOX OCHECKBOX3 VAR LRECEITAL PROMPT "RECEITA LOCAÇÃO"      SIZE C(075),C(008) PIXEL OF ODLG
		ENDIF
		@ C(097),C(024) BMPBUTTON TYPE 1 ACTION ( LRET := .T., CLOSE(ODLG) ) 
		@ C(097),C(054) BMPBUTTON TYPE 2 ACTION ( LRET := .F., CLOSE(ODLG) ) 
	ACTIVATE MSDIALOG ODLG CENTERED

	IF !LRET
		RETURN NIL
	ENDIF
ENDIF
*/

LRECEITAT := .F.
LRECEITAE := .F.
LRECEITAL := .T.

IF LRECEITAT 
	AADD(ACASADAS,"T")
ENDIF 
IF LRECEITAE
	AADD(ACASADAS,"E")
ENDIF 
IF LRECEITAL
	AADD(ACASADAS,"L")
ENDIF 

IF LEN(ACASADAS) == 0
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"Falta selecionar a receita."})
	RETURN .F.
ENDIF

ZA0RECEIT := ACASADAS[1]  						// USADA EM ZA0INICI("FP0_RECEIT")  // INICIALIZADOR PADRÃO DO CAMPO
ZA0TIPOSE := ACASADAS[1]  						// USADA EM ZA0INICI("FP0_TIPOSE")  // INICIALIZADOR PADRÃO DO CAMPO
//       AXINCLUI( [CALIAS] [NREG] [NOPC] [AACHO] [CFUNC] [ACPOS] [CTUDOOK] [LF3] [CTRANSACT] [ABUTTONS] [APARAM] [AAUTO] [LVIRTUAL] [LMAXIMIZED] [CTELA] [LPANELFIN] [OFATHER] [ADIM] [UAREA] )
NOPCA := AXINCLUI( "FP0"   , 0    , 3    ,       ,       ,       , "VALFP0()"        ,     ,           , ABUTTONS ,        ,       ,          , .T.        ,       ,           ,         ,      ,        ) 

LRET := ( NOPCA == 1 )  						// 1=OK,3=CANCEL

IF LRET
	IF RECLOCK("FP0",.F.)
		IF !("LOCA00140" $ ALLTRIM(GETSX3CACHE("FP0_PROJET", "X3_RELACAO")))		// IF PARA NÃO PULAR NUMERAÇÃO.
			FP0->FP0_PROJET := LOCA00140("FP0_PROJET", .F.)
		ENDIF 
		FP0->FP0_COD    := SUBSTR(FP0->FP0_PROJET, 7, 3)
		FP0->FP0_USUINC := USRRETNAME(RETCODUSR())
		FP0->(MSUNLOCK())
	ENDIF

	IF EXISTBLOCK("LC001INC") 					// PARA REALIZAR ALGUMA ALTERAÇÃO APÓS A INCLUSÃO DO CONTRATO
		EXECBLOCK("LC001INC" , .T. , .T. , {FP0->FP0_FILIAL,FP0->FP0_PROJET}) 
    ENDIF

	CPROJET := PROJETO(.T.) 

	IF LEN(ACASADAS) >= 2						// INCLUI O TIPO DO SERVIÇO NO NRO.DO PROJETO
		CTIPONEW   := ACASADAS[1]
		CPROJETNEW := ALLTRIM(SUBSTR(CPROJET,1,9)) + CTIPONEW 		// MONTA O NRO.PROJETO COM O TIPO DO SEVIÇO
		CPROJETNEW := PADR(CPROJETNEW, LEN(CPROJET)) 				// MONTA O NRO.PROJETO COM O TAMANHO DO FP0_PROJET

		FP0->(RECLOCK("FP0",.F.))
		FP0->FP0_PROJET := CPROJETNEW
		FP0->FP0_TIPOSE := CTIPONEW
		FP0->(MSUNLOCK())

		ZA0COMPLE()								// RESPONSABILIDADES E ZA1 

		// MONTA O AHEADER E O ACOLS PARA GERAR AS RECEITAS
		AHEADER := {}
		ACOLS   := {}
		ACOLS0  := {}
		FOR NPOS:=1 TO FP0->(FCOUNT())
			FP0->(AADD(AHEADER,{UPPER(ALLTRIM(FIELDNAME(NPOS))),UPPER(ALLTRIM(FIELDNAME(NPOS)))}))
			FP0->(AADD(ACOLS0,FIELDGET(NPOS)))
		NEXT NPOS 
		AADD(ACOLS,ACOLS0)

		NORDZA0 := FP0->(INDEXORD())
		NRECZA0 := FP0->(RECNO())

		FOR NCASADAS := 2 TO LEN(ACASADAS)  						// INICIA EM 2 PORQUE O PRIMEIRO REGISTRO É A PRIMEIRA RECEITA
			CTIPONEW := ACASADAS[NCASADAS]
			FGRAVANEW(AHEADER,ACOLS,CTIPONEW)  						// GRAVA O NOVO TIPO DE SERVIÇO
			CPROJETNEW := ALLTRIM(SUBSTR(CPROJET,1,9)) + CTIPONEW  	// MONTA O NRO.PROJETO COM O TIPO DO SEVIÇO
			CPROJETNEW := PADR(CPROJETNEW, LEN(CPROJET))         	// MONTA O NRO.PROJETO COM O TAMANHO DO FP0_PROJET
			IF FP0->( DBSEEK( XFILIAL("FP0") + CPROJETNEW ) )
				ZA0COMPLE()											// RESPONSABILIDADES E ZA1 
			ENDIF
		NEXT NCASADAS 

		FP0->(DBSETORDER(NORDZA0))
		FP0->(DBGOTO(NRECZA0))
	ENDIF
ENDIF

RETURN .T. 

// Validação do cadastro dos orçamentos - Inclusão.
// Frank Zwarg Fuga - 24/02/2021
Function VALFP0
Local _lRet := .T.
LOCAL lFP0TDOK  := ExistBlock("FP0TDOK") // MERGE - ORGUEL 94 - INICIO
If empty(M->FP0_CLI) .and. empty(M->FP0_PROSPE)
	_lRet := .F.
	Help(Nil,Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"Falta o preenchimento do cliente, ou do prospect."})
EndIF

If lFP0TDOK
	_lRet := ExecBlock("FP0TDOK",.f.,.f.)
EndIf

Return _lRet

/*/{PROTHEUS.DOC} ZA0COMPLE
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE O CONTROLE DAS RESPONSABILIDADES AUTOMÁTICAS E LOCALIDADES.

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM SEM PARÂMETROS PARA CHAMADA DA FUNÇÃO

@RETURN LÓGICO COM O RESULTADO SE FOI PROCESSADO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
STATIC FUNCTION ZA0COMPLE()
// --> RESPONSABILIDADES AUTOMÁTICAS E ZA1 - LOCALIDADES
LOCAL AAREA := GETAREA() 
LOCAL CSQL 

IF SELECT("TRB") > 0 
	TRB->(DBCLOSEAREA()) 
ENDIF

IF SUPERGETMV("MV_LOCX227",.F.,.T.)
	IF SELECT("TRB") > 0 
		TRB->(DBCLOSEAREA()) 
	ENDIF 
	CSQL := " SELECT FP7_CODIGO , FP7_DESCRI "
	CSQL += " FROM "+RETSQLNAME("FP7") + " ZAB "
	CSQL += " WHERE  ZAB.FP7_TIPOSE IN ('"+FP0->FP0_TIPOSE+"','X') "
	CSQL +=   " AND  ZAB.FP7_PADRAO =  'S' "
	CSQL +=   " AND  ZAB.D_E_L_E_T_ =  '' "
	CSQL := CHANGEQUERY(CSQL) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRB" , .F. , .T.) 
	WHILE !TRB->(EOF()) 
		RECLOCK("FP6",.T.) 
		FP6->FP6_FILIAL := XFILIAL("FP6") 
		FP6->FP6_PROJET := FP0->FP0_PROJET 
		FP6->FP6_OBRA   := "001" 
		FP6->FP6_SEQRES := "201" 
		FP6->FP6_CODIGO := TRB->FP7_CODIGO 
		FP6->FP6_DESCRI := TRB->FP7_DESCRI 
		FP6->FP6_RESPON := "C" 
		FP6->FP6_SEQGUI := "001" 
		FP6->(MSUNLOCK()) 
		TRB->(DBSKIP()) 
	ENDDO 
ENDIF 

IF SELECT("TRB") > 0
	TRB->(DBCLOSEAREA())
ENDIF

IF FP0->FP0_TIPOSE $ "P;E"
	DBSELECTAREA("FP1")
	DBSETORDER(1) 								// FP1_FILIAL+FP1_PROJET+FP1_OBRA
	IF ! DBSEEK( XFILIAL("FP1") + FP0->FP0_PROJET + "001" )
		RECLOCK("FP1",.T.)
		FP1->FP1_FILIAL := XFILIAL("FP1")
		FP1->FP1_PROJET := FP0->FP0_PROJET
		FP1->FP1_TIPOSE := FP0->FP0_TIPOSE
		FP1->FP1_OBRA   := "001"
		FP1->FP1_NOMORI := FP0->FP0_CLINOM
		FP1->FP1_CGCORI := FP0->FP0_CLICGC
		FP1->FP1_INSORI := FP0->FP0_CLIINS
		FP1->FP1_ENDORI := FP0->FP0_CLIEND
		FP1->FP1_MUNORI := FP0->FP0_CLIMUN
		FP1->FP1_BAIORI := FP0->FP0_CLIBAI
		FP1->FP1_ESTORI := FP0->FP0_CLIEST
		FP1->FP1_CEPORI := FP0->FP0_CLICEP
		FP1->FP1_EMAORI := FP0->FP0_CLIEMA
		FP1->FP1_DDDORI := FP0->FP0_CLIDDD
		FP1->FP1_TELORI := FP0->FP0_CLITEL
		FP1->FP1_FAXORI := FP0->FP0_CLIFAX
		FP1->FP1_CLIORI := FP0->FP0_CLI
		FP1->FP1_LOJORI := FP0->FP0_LOJA
		FP1->(MSUNLOCK()) 
	ENDIF 
ENDIF 

RESTAREA( AAREA )

RETURN .T.


/*/{PROTHEUS.DOC} FGRAVANEW
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A GRAVAÇÃO DO NOVO TIPO DE SERVIÇO.

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>
MV_LOCX248

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM AHEADER, CAMPOS DA MSNEWGETDADOS
@PARAM ACOLS, REGISTROS DA MSNEWGETDADOS
@PARAM CTIPONES, TIPO DO SERVIÇO, EXEMPLO: L=LOCAÇÃO.

@RETURN LÓGICO COM O RESULTADO SE FOI PROCESSADO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION FGRAVANEW(AHEADER , ACOLS , CTIPONEW) 
// ======================================================================= \\
// --> GRAVA O NOVO TIPO DE SERVIÇO

LOCAL AREAZA0 := FP0->(GETAREA()) 
LOCAL CPROJET
LOCAL CPROJETNEW

CPROJET    := FP0->FP0_PROJET
CPROJETNEW := ALLTRIM(SUBSTR(CPROJET,1,9)) + CTIPONEW	// MONTA O NRO.PROJETO COM O TIPO DO SEVIÇO
CPROJETNEW := PADR(CPROJETNEW,LEN(CPROJET))				// MONTA O NRO.PROJETO COM O TAMANHO DO FP0_PROJET

FP0->(DBSETORDER(1))  									// FP0_FILIAL + FP0_PROJET
IF FP0->(DBSEEK(XFILIAL("FP0")+CPROJETNEW))
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"JÁ existe o "+SUPERGETMV("MV_LOCX248",.F.,"PROJETO")+" "+ALLTRIM(CPROJETNEW)})
	FP0->( RESTAREA(AREAZA0) )
	RETURN .F.
ENDIF

RECLOCK("FP0",.T.) 
FGRAVATUDO( "FP0", AHEADER, ACOLS[1] )  		// GRAVA TODOS OS CAMPOS DO ACOLS
FP0->FP0_PROJET := CPROJETNEW
FP0->FP0_TIPOSE := CTIPONEW
FP0->FP0_RECEIT := CTIPONEW						// QUANDO É CASADA O SISTEMA FICAVA COM A RECEITA DA PRIMEIRA
FP0->(MSUNLOCK())

FP0->(RESTAREA(AREAZA0))

RETURN .T. 


/*/{PROTHEUS.DOC} ZA0MANU
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A MANUTENÇÃO DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001MAN") - PONTO DE ENTRADA PARA VALIDAR SE É POSSÍVEL DAR MANUTENÇÃO NO PROJETO
EXISTBLOCK("LC001AJU") - PONTO DE ENTRADA PARA AJUSTAR A TABELA ZAG ANTES DE ABRIR A MANUTENÇÃO
<P><B>PARÂMETROS:</B>
MV_LOCX248:

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM COPC, INDICA SE É INCLUSÃO, ALTERAÇÃO, EXCLUSÃO...

@RETURN LÓGICO COM O RESULTADO SE FOI PROCESSADO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00105(COPC) 
// ======================================================================= \\
// --> CHAMADA: MENU - "MANUTENÇÃO"   &   "COPIAR" (5) 

LOCAL   CPROJET 

PRIVATE CSTSATU := "" 

CPROJET  := PROJETO(.T.) 
CSTSATU  := FP0->FP0_STATUS 

LCOPYPRJ := (COPC == 5)							// COPIA DE PROJETO

IF FP0->FP0_TIPOSE != "T" .AND. COPC == 5
	
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"Não pode ser efetuado cópia deste tipo de serviço."})

	RETURN .F.
ELSE
	IF FP0->FP0_STATUS $ "6|7|A|B|C" .AND. !LCOPYPRJ
		_CLABEL :=  IIF(FP0->FP0_STATUS == "6" , "INDISPONÍVEL" , ; 
					IIF(FP0->FP0_STATUS == "7" , "REJEITADO"    , ; 
					IIF(FP0->FP0_STATUS == "8" , "FATURADO"     , ; 
					IIF(FP0->FP0_STATUS == "A" , "REVISADO"     , ; 
					IIF(FP0->FP0_STATUS == "B" , "EXCLUÍDO"     , ; 
					IIF(FP0->FP0_STATUS == "C" , "PERDIDO"      , ""))))))

		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
		Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
		{SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " encontra-se com o status: " + FP0->FP0_STATUS + "-" + _CLABEL + ", não é possível a manutenção."})

		RETURN .F.
	ENDIF

	IF EXISTBLOCK("LC001MAN") 					// --> PONTO DE ENTRADA PARA VALIDAR SE É POSSÍVEL DAR MANUTENÇÃO NO PROJETO
		LRET := EXECBLOCK("LC001MAN" , .T. , .T. , {FP0->FP0_FILIAL,FP0->FP0_PROJET,COPC}) 
		IF !LRET
			RETURN .F.
		ENDIF
	ENDIF
	
	IF FP0->FP0_STATUS $ "3|4|5|8" .AND. !LCOPYPRJ
		_CLABEL :=  IIF(FP0->FP0_STATUS == "3", "APROVADA",;
					IIF(FP0->FP0_STATUS == "4", "NÃO APROVADA",;
					IIF(FP0->FP0_STATUS == "5", "FECHADA","")))
	
		IF MSGYESNO("VOCÊ PODE EFETUAR A ALTERAÇÃO DESTE " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + ", " + CRLF +;
					"MAS AO CONFIRMAR ESSA OPÇÃO O STATUS DA MESMA " +CRLF+;
					"SERÁ MODIFICADO PARA 1=DIGITADO.              " +CRLF+;
					"VOCÊ DESEJA EFETUAR A ALTERAÇÃO?" , "GPO - LOCC001.PRW") 
			RECLOCK("FP0",.F.)
			FP0->FP0_STATUS := "1" 
			FP0->(MSUNLOCK()) 
		ELSE
			MSGALERT(SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " NÃO FOI ALTERADO." , "RENTAL: "+alltrim(upper(Procname()))) 

			RETURN .F.
		ENDIF
	ENDIF

	IF EXISTBLOCK("LC001AJU") 					// --> PONTO DE ENTRADA PARA AJUSTAR A TABELA ZAG ANTES DE ABRIR A MANUTENÇÃO
	   EXECBLOCK("LC001AJU" , .T. , .T. , {FP0->FP0_FILIAL,FP0->FP0_PROJET,COPC}) 
	ENDIF
	
	FMANU(4)
	
ENDIF 

RETURN .T.


/*/{PROTHEUS.DOC} ZA0FOLLOW
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE A MANUTENÇÃO DO FOLLOWUP DO PROJETO.

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>
MV_LOCX248:

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM COPC, INDICA SE É INCLUSÃO, ALTERAÇÃO, EXCLUSÃO...

@RETURN LÓGICO COM O RESULTADO SE FOI PROCESSADO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
FUNCTION LOCA00106() 
// ======================================================================= \\
// --> CHAMADA: MENU - "FOLLOW-UP"

LOCAL   CPROJET 

PRIVATE CSTSATU := ""

CPROJET := PROJETO(.T.) 
CSTSATU := FP0->FP0_STATUS

IF FP0->FP0_STATUS == "A" .OR. FP0->FP0_STATUS == "B"
	_CLABEL := IIF(FP0->FP0_STATUS == "A" , "REVISADO" , ; 
			   IIF(FP0->FP0_STATUS == "B" , "EXCLUIDO" , "")) 

	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " Encontra-se com o status: " + FP0->FP0_STATUS + "-" + _CLABEL + ", não é possível Follow-UP."})

	RETURN .F.
ENDIF 

FMANU(0)

RETURN .T.



/*
// ======================================================================= \\
FUNCTION LOCA00107() 
// ======================================================================= \\
// --> CHAMADA: NÃO EXISTE NENHUMA CHAMADA
LOCAL NPOS
LOCAL ATABAUX
LOCAL CPROJET
LOCAL CREVISA
LOCAL CPROJETNEW
LOCAL CREVISANEW
LOCAL AAREAZA0   := FP0->(GETAREA())
LOCAL NRGZA0     := 0
LOCAL _LFLAG     := .T.

CPROJET    := SUBSTR(FP0->FP0_PROJET,1,9)
CREVISA    := FP0->FP0_REVISA
CREVISANEW := STRZERO(VAL(CREVISA)+1,LEN(CREVISA))

IF ! MSGYESNO("CONFIRMA A REVISÃO "+ CREVISANEW + " DO " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " " + ALLTRIM(CPROJET) + " ?")
	RETURN .F.
ENDIF

BEGIN TRANSACTION

	// VERIFICO SE JÁ NÃO EXISTE REVISÃO DESTA(S) PROPOSTA(S) *OBS: MAIS DE UMA NO CASO DE CASADAS
	DBSELECTAREA("FP0")
	DBSETORDER(1)  //FP0_FILIAL+FP0_PROJET
	FP0->(DBSEEK(XFILIAL("FP0") + CPROJET))

	WHILE FP0->(!EOF()) .AND. SUBSTR(FP0->FP0_PROJET,1,9) == CPROJET .AND. _LFLAG
		NRGZA0 := FP0->(RECNO())
		IF FP0->FP0_REVISA == CREVISA
			NPOS := AT("/",FP0->FP0_PROJET)
			IF NPOS==0
				CPROJETNEW:=PADR(ALLTRIM(FP0->FP0_PROJET)         + "/" + CREVISANEW,LEN(FP0->FP0_PROJET)) 
			ELSE
				CPROJETNEW:=PADR(SUBSTR(FP0->FP0_PROJET,1,NPOS-1) + "/" + CREVISANEW,LEN(FP0->FP0_PROJET)) 
			ENDIF
			IF DBSEEK(XFILIAL("FP0") + CPROJETNEW)
				_LFLAG := .F.
			ELSE
				DBGOTO(NRGZA0)
				RECLOCK("FP0",.F.)
				FP0->FP0_STATUS := "A"	//ALTERO O STATUS DA PROPOSTA ORIGINAL PARA A=REVISADO
				FP0->(MSUNLOCK()) 
				PROCESSA({|| FZA0REVI(FP0->FP0_PROJET, CPROJETNEW, CREVISANEW)},"AGUARDE... ATUALIZANDO A REVISÃO")
			ENDIF
		ENDIF
		DBGOTO(NRGZA0)
		FP0->(DBSKIP())
		WHILE FP0->(!EOF()) .AND. SUBSTR(FP0->FP0_PROJET,1,9) == CPROJET .AND. FP0->FP0_REVISA == CREVISANEW .AND. _LFLAG
			FP0->(DBSKIP())
		ENDDO
	ENDDO

	IF ! _LFLAG
	    MSGSTOP("ATENÇÃO: JÁ EXISTE A REVISÃO " + CREVISANEW + " DO " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " " + ALLTRIM(CPROJET) + " !" , "GPO - LOCC001.PRW") 
		DISARMTRANSACTION()
	    RESTAREA(AAREAZA0)
		RETURN .F.
	ENDIF

END TRANSACTION

RESTAREA(AAREAZA0)

RETURN .T.
*/


/*/{PROTHEUS.DOC} FZA0REVI
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE GERAR A REVISÃO DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CPROJET, CÓDIGO DO PROJETO
@PARAM CPROJETNEW, CÓDIGO DO PROJETO A SER CRIADO
@PARAM CREVISANEW, CÓDIGO DA REVISÃO A SER GERADA
@RETURN RETORNO LÓGICO COM O RESULTADO DO PROCESSAMENTO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
STATIC FUNCTION FZA0REVI(CPROJET , CPROJETNEW , CREVISANEW) 
// ======================================================================= \\
// --> PROCESSA A REVISÃO

LOCAL LRET := .F.

PROCREGUA(15)

IF  LOCA00108("FP0",1,"FP0_FILIAL+FP0_PROJET",XFILIAL("FP0")+CPROJET,{{"FP0_PROJET",CPROJETNEW},;
                                                                       {"FP0_REVISA",CREVISANEW},;
                                                                       {"FP0_STATUS","1"},;
                                                                       {"FP0_DATINC",DDATABASE},;
                                                                       {"FP0_DTPARA",DDATABASE},;
                                                                       {"FP0_HRINC",SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)},;
                                                                       {"FP0_PRVALI",30},;
                                                                       {"FP0_DTVALI",DDATABASE+30}})//DUPLICA O REGISTRO DA TABELA INFORMADA

	LOCA00108("FP1",1,"FP1_FILIAL+FP1_PROJET",XFILIAL("FP1")+CPROJET,{{"FP1_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	//LOCA00108("ZA4",1,"ZA4_FILIAL+ZA4_PROJET",XFILIAL("ZA4")+CPROJET,{{"ZA4_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FP4",1,"FP4_FILIAL+FP4_PROJET",XFILIAL("FP4")+CPROJET,{{"FP4_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	//LOCA00108("ZA6",1,"ZA6_FILIAL+ZA6_PROJET",XFILIAL("ZA6")+CPROJET,{{"ZA6_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	//LOCA00108("ZA7",1,"ZA7_FILIAL+ZA7_PROJET",XFILIAL("ZA7")+CPROJET,{{"ZA7_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FP5",1,"FP5_FILIAL+FP5_PROJET",XFILIAL("FP5")+CPROJET,{{"FP5_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FQ8",1,"FQ8_FILIAL+FQ8_PROJET",XFILIAL("FQ8")+CPROJET,{{"FQ8_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FP6",1,"FP6_FILIAL+FP6_PROJET",XFILIAL("FP6")+CPROJET,{{"FP6_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FP8",1,"FP8_FILIAL+FP8_PROJET",XFILIAL("FP8")+CPROJET,{{"FP8_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FP9",1,"FP9_FILIAL+FP9_PROJET",XFILIAL("FP9")+CPROJET,{{"FP9_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FPA",1,"FPA_FILIAL+FPA_PROJET",XFILIAL("FPA")+CPROJET,{{"FPA_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FPB",1,"FPB_FILIAL+FPB_PROJET",XFILIAL("FPB")+CPROJET,{{"FPB_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	//LOCA00108("ZAK",1,"ZAK_FILIAL+ZAK_PROJET",XFILIAL("ZAK")+CPROJET,{{"ZAK_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FPD",1,"FPD_FILIAL+FPD_PROJET",XFILIAL("FPD")+CPROJET,{{"FPD_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA
	LOCA00108("FQ7",1,"FQ7_FILIAL+FQ7_PROJET",XFILIAL("FQ7")+CPROJET,{{"FQ7_PROJET",CPROJETNEW}})  //DUPLICA O REGISTRO DA TABELA INFORMADA

	LRET := .T.
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} DUPLIREG
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE DUPLICAR REGISTROS DA TABELA INFORMADA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS, NOME DA TABELA A SER PROCESSADA
@PARAM NORDEM, ORDEM PARA PESQUISA DO ÍNDICE
@PARAM CCHAVECPOS, CAMPOS PARA FILTRO DA TABELA EM QUESTÃO
@PARAM CCHAVEOLD, CAMPOS PARA COMPARAÇÃO COM O CCHAVECPOS
@PARAM AREPLACE, INDICA OS CAMPOS QUE SERÃO REPLICADOS
@RETURN RETORNO LÓGICO COM O RESULTADO DO PROCESSAMENTO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00108(CALIAS , NORDEM , CCHAVECPOS , CCHAVEOLD , AREPLACE) 
// ======================================================================= \\
// DUPLICA OS REGISTROS DA TABELA INFORMADA 

LOCAL NPOS 
LOCAL ATABAUX := {} 
LOCAL NORDANT := (CALIAS)->(INDEXORD()) 

INCPROC("PROCESSANDO... "+CALIAS)

(CALIAS)->(DBSETORDER(NORDEM))
(CALIAS)->(DBSEEK(CCHAVEOLD))
WHILE (CALIAS)->(!EOF() .AND. &CCHAVECPOS==CCHAVEOLD)
	(CALIAS)->(AADD(ATABAUX,RECNO()))
	(CALIAS)->(DBSKIP())
ENDDO 

FOR NPOS := 1 TO LEN(ATABAUX)
	(CALIAS)->(DBGOTO(ATABAUX[NPOS]))
	LOCA00109(CALIAS,AREPLACE) 				// DUPLICA O REGISTRO DA TABELA INFORMADA
NEXT NPOS 

(CALIAS)->(DBSETORDER(NORDANT))

RETURN .T.


/*/{PROTHEUS.DOC} FDUPLIREG 
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE DUPLICAR UM REGISTRO DE UMA TABELA INFORMADA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS, NOME DA TABELA A SER PROCESSADA
@PARAM AREPLACE, INDICA OS CAMPOS QUE SERÃO REPLICADOS
@RETURN RETORNO LÓGICO COM O RESULTADO DO PROCESSAMENTO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00109(CALIAS,AREPLACE) 
// ======================================================================= \\
// DUPLICA O REGISTRO DA TABELA INFORMADA

LOCAL NPOS
LOCAL ATABAUX   := {}
LOCAL CCAMPO
LOCAL CCAMPOGET

FOR NPOS := 1 TO (CALIAS)->(FCOUNT())
	(CALIAS)->(AADD(ATABAUX,FIELDGET(NPOS)))
NEXT NPOS 

(CALIAS)->(RECLOCK(CALIAS,.T.)) 				// INSERE O NOVO REGISTRO

FOR NPOS := 1 TO LEN(ATABAUX)
	(CALIAS)->(FIELDPUT(NPOS,ATABAUX[NPOS]))
NEXT NPOS 

FOR NPOS := 1 TO LEN(AREPLACE) 					// CAMPOS PARA O REPLACE
	CCAMPO    := AREPLACE[NPOS][1] 				// NOME DO CAMPO
	CCAMPOGET := AREPLACE[NPOS][2] 				// CONTEÚDO DO CAMPO
	(CALIAS)->&CCAMPO := CCAMPOGET
NEXT NPOS 

(CALIAS)->(MSUNLOCK())

RETURN .T. 


/*/{PROTHEUS.DOC} ZA0VISU
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE VISUALIZAR O PROJETO COM TODAS AS ABAS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM _CPROJ, CÓDIGO DO PROJETO PARA SER VIZUALIZADO
@RETURN RETORNO LÓGICO COM O RESULTADO DO PROCESSAMENTO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00110(_CPROJ) 
// ======================================================================= \\
// --> CHAMADA: MENU - "VISUALIZAR"

DEFAULT _CPROJ  := ""

IF ! EMPTY(_CPROJ) .AND. _CPROJ != "FP0"
	FP0->( DBSEEK(XFILIAL("FP0") + _CPROJ) )
ENDIF

PROJETO(.T.)

FMANU(2)

RETURN NIL


/*/{PROTHEUS.DOC} FDUPLIGUI 
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE DUPLICAR AS LINHAS DA LOCAÇÃO

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN RETORNO LÓGICO COM O RESULTADO DO PROCESSAMENTO.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDUPLIGUI() 
// ======================================================================= \\

LOCAL CCAMPO
LOCAL CCAMPOGET
LOCAL ODLGQ
LOCAL _NNUMDUP  := 0
LOCAL _F
LOCAL LOK       := .F.

IF !OFOLDER:NOPTION == NFOLDERGUI 
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Selecionar a aba Locação."})
	RETURN .F. 
ENDIF 

// ALTERADO POR FRANK EM 31/08/2020 COMPATIBILIZACAO DE VERSÃO
//@ 0,0 TO 90,250 MSDIALOG ODLGQ TITLE "DUPLICA A ÚLTIMA LOCAÇÃO"
DEFINE MSDIALOG ODLGQ TITLE "DUPLICA A ÚLTIMA LOCAÇÃO" FROM 0,0 TO 90,250 //OF ODLG3 PIXEL
	@ 00,01 TO 03,15
	@ 001,002 SAY "Quantidade de linhas a duplicar:"
	@ 001,012 GET _NNUMDUP PICTURE "999" WHEN FWHEN()
	@ 025,060 BMPBUTTON TYPE 1 ACTION ( LOK := .T., CLOSE(ODLGQ) )
	@ 025,085 BMPBUTTON TYPE 2 ACTION CLOSE(ODLGQ)
ACTIVATE MSDIALOG ODLGQ CENTERED

IF !LOK .OR. EMPTY(_NNUMDUP) .OR. !MSGYESNO("DUPLICA A ÚLTIMA LOCAÇÃO " + ALLTRIM(STR(_NNUMDUP)) + " VEZES ??" , "GPO - LOCC001.PRW") 
	RETURN .F. 
ENDIF 

FOR _F := 1 TO _NNUMDUP 
	AADD(ODLGGUI:ACOLS,ACLONE(ODLGGUI:ACOLS[LEN(ODLGGUI:ACOLS)]))

	CCAMPO    := "FP4_SEQGUI"
	CCAMPOGET := ODLGGUI:ACOLS[LEN(ODLGGUI:ACOLS)][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	ODLGGUI:ACOLS[LEN(ODLGGUI:ACOLS)][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
	ODLGGUI:ACOLS[LEN(ODLGGUI:ACOLS)][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VIAGEM"})] := ""
	ODLGGUI:ACOLS[LEN(ODLGGUI:ACOLS)][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_AS"})]     := ""
NEXT _F 

RETURN .T.


/*/{PROTHEUS.DOC} PROJETO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O NÚMERO DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM LGET, INDICA SE GUARDA A POSIÇÃO DA TABELA DE PROJETOS
@RETURN RETORNO COM O CÓDIGO DO PROJETO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION PROJETO(LGET) 
// ======================================================================= \\

STATIC  AAREAZA0 := FP0->( GETAREA() )
STATIC  CPROJET  := FP0->FP0_PROJET

DEFAULT LGET     := .F.

IF LGET													// SALVA POSIÇÃO ZA0 E GUARDA NÚMERO DO PROJETO
	AAREAZA0 := FP0->( GETAREA() )
	CPROJET  := FP0->FP0_PROJET
ELSE
	FP0->( RESTAREA( AAREAZA0 ) )						// SEMPRE POSICIONA ZA0
ENDIF

RETURN CPROJET											// RETORNA NÚMERO DO PROJETO


/*/{PROTHEUS.DOC} FMANU
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A MANUTENÇÃO DOS DADOS DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001BUT") - PONTO DE ENTRADA PARA INCLUSÃO DE BOTÕES NAS AÇÕES RELACIONADAS DA MANUTENÇÃO
<P><B>PARÂMETROS:</B>
MV_LOCX208
MV_LOCX248

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM POPC, INDICA O TIPO DE OPERAÇÃO: INCLUSÃO, ALTERAÇÃO...
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FMANU(POPC)
// ======================================================================= \\

LOCAL   CPROJET  := PROJETO(.T.)						// ARMAZENA POSIÇÃO ZA0 E RETONAR O NÚMERO DO PROJETO
LOCAL   LDPLIT   := SUPERGETMV("MV_LOCX208",.F.,.F.) 	// PARÂMETRO QUE HABILITA A FUNÇÃO DE DUPLICAR ITENS
LOCAL   NSTYLE   := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL   NPOS
//LOCAL   ODLG
LOCAL   ABUTTONS := {}
LOCAL   ACOLSAUX := {}
LOCAL   OFONT1   := TFONT():NEW("ARIAL",10,14,,.T.,,,,.T.,.F.)  //SAY   12,16
LOCAL   OFONT2   := TFONT():NEW("ARIAL",10,14,,.T.,,,,.T.,.F.)  //GET
LOCAL   NX       := 0
LOCAL   NI       := 0 

PRIVATE ACOLSTURNO  := {}
PRIVATE OTURNO_COLS := {}
PRIVATE NOPC        := IIF(POPC==0,4,POPC)				// CASO SEJA 0, SIGNIFICA QUE É APENAS A ABA FOLLOW-UP, FIXEI NO PROGRAMA PARA NÃO TER INTERFERÊNCIAS
PRIVATE NOPCMANU    := IIF(POPC==0,4,POPC)  			// USADA PARA VISUALIZAR
PRIVATE OARIAL12N1  := TFONT():NEW("ARIAL",12,16,,.T.,,,,.T.,.F.)
PRIVATE OARIAL12N2  := TFONT():NEW("ARIAL",12,16,,.T.,,,,.T.,.F.)
PRIVATE AOBJECTS    := {}
PRIVATE AINFO       := {}
PRIVATE APOSGET     := {}
PRIVATE APOSOBJ     := {}
PRIVATE CFILTROF12  									// FILTRA A ABA PLATAFORMA (NFOLDERPLA)

PRIVATE AHEADER := {} 
PRIVATE ACOLS   := {} 

PRIVATE OGETVT
PRIVATE ODLGPRO,OFOLDERPRO,NFOLDERPRO
PRIVATE ODLGOBR,OFOLDEROBR,NFOLDEROBR,OOBR_COLS:={},OOBR_COLS0:={}
PRIVATE ODLGROT,OFOLDERROT,NFOLDERROT,OROT_COLS:={},OROT_COLS0:={}
PRIVATE ODLGTRE,OFOLDERTRE,NFOLDERTRE,OTRE_COLS:={},OTRE_COLS0:={}
PRIVATE ODLGGUI,OFOLDERGUI,NFOLDERGUI,OGUI_COLS:={},OGUI_COLS0:={}
PRIVATE ODLGPLA,OFOLDERPLA,NFOLDERPLA,OPLA_COLS:={},OPLA_COLS0:={},OPLACOLRET:={}
PRIVATE ODLGTRA,OFOLDERTRA,NFOLDERTRA,OTRA_COLS:={},OTRA_COLS0:={}
PRIVATE ODLGCON,OFOLDERCON,NFOLDERCON,OCON_COLS:={},OCON_COLS0:={}
PRIVATE ODLGCAR,OFOLDERCAR,NFOLDERCAR,OCAR_COLS:={},OCAR_COLS0:={}
PRIVATE ODLGRES,OFOLDERRES,NFOLDERRES,ORES_COLS:={},ORES_COLS0:={}
PRIVATE ODLGCUS,OFOLDERCUS,NFOLDERCUS,OCUS_COLS:={},OCUS_COLS0:={}
PRIVATE ODLGBDI,OFOLDERBDI,NFOLDERBDI,OBDI_COLS:={},OBDI_COLS0:={}
PRIVATE ODLGFOL,OFOLDERFOL,NFOLDERFOL,OFOL_COLS:={},OFOL_COLS0:={}
PRIVATE ODLGDOC,OFOLDERDOC,NFOLDERDOC,ODOC_COLS:={},ODOC_COLS0:={}
PRIVATE ODLGCNJ,OFOLDERCNJ,NFOLDERCNJ,OCNJACOLS
PRIVATE ODLGCNP,OFOLDERCNP,NFOLDERCNP,OCNPACOLS

PRIVATE ARESDEL := {} 

PRIVATE OORIGEME , CORIGEME := SPACE(06)
PRIVATE ODESTINE , CDESTINE := SPACE(06)
PRIVATE OMUNORIE , CMUNORIE := SPACE(25)
PRIVATE OMUNDESE , CMUNDESE := SPACE(25)
PRIVATE OESTORIE , CESTORIE := SPACE(02)
PRIVATE OESTDESE , CESTDESE := SPACE(02)
PRIVATE OROTAE   , CROTAE   := SPACE(03)

PRIVATE OPROJET
PRIVATE OOBRA , COBRA , XOBRA 

PRIVATE OORIGEM,CORIGEM
PRIVATE ODESTIN,CDESTIN
PRIVATE OMUNORI,CMUNORI
PRIVATE OMUNDES,CMUNDES
PRIVATE OESTORI,CESTORI
PRIVATE OESTDES,CESTDES
PRIVATE OROTA,CROTA
PRIVATE OSEQGUI,CSEQGUI
PRIVATE OSEQTRA,CSEQTRA
PRIVATE OSEQGRU,CSEQGRU
PRIVATE OSEQCAR,CSEQCAR

PRIVATE CDIRPROJ := "\SYSTEM\PROJETOS"

PRIVATE OSTATUS
PRIVATE CSTATUS := FP0->FP0_STATUS
PRIVATE OCODCONCO,CCODCONCO   := FP0->FP0_CODCON
PRIVATE ONOMCONCO,CNOMCONCO   := POSICIONE("AC3" , 1 , XFILIAL("AC3")+CCODCONCO , "AC3_NOME") 
PRIVATE OVALCONCO,NVALCONCO   := FP0->FP0_VALCON
PRIVATE OVALCONCOL,NVALCONCOL := FP0->FP0_VALLOC

PRIVATE ODATAVAL,DDATAVAL := DDATABASE			// FP0->FP0_DATINC

PRIVATE ODATARET
PRIVATE DDATARET := FP0->FP0_DTRETO
PRIVATE OFOLLOW  , CFOLLOW  := "" 
PRIVATE OFOLLOW0 , CFOLLOW0 := "" 

PRIVATE OCOMP,NCOMP
PRIVATE OLARG,NLARG
PRIVATE OALTU,NALTU
PRIVATE OPESO,NPESO

PRIVATE OCOMPCONT,NCOMPCONT
PRIVATE OLARGCONT,NLARGCONT
PRIVATE OALTUCONT,NALTUCONT
PRIVATE OPESOCONT,NPESOCONT
PRIVATE OEIXOCONT,NEIXOCONT

PRIVATE OCOMPCONC,NCOMPCONC
PRIVATE OLARGCONC,NLARGCONC
PRIVATE OALTUCONC,NALTUCONC
PRIVATE OPESOCONC,NPESOCONC
PRIVATE OEIXOCONC,NEIXOCONC

PRIVATE OCOMPCONG,NCOMPCONG
PRIVATE OLARGCONG,NLARGCONG
PRIVATE OALTUCONG,NALTUCONG
PRIVATE OPESOCONG,NPESOCONG
PRIVATE OEIXOCONG,NEIXOCONG

PRIVATE OCOMPCART,NCOMPCART
PRIVATE OLARGCART,NLARGCART
PRIVATE OALTUCART,NALTUCART
PRIVATE OPESOCART,NPESOCART
PRIVATE OEIXOCART,NEIXOCART

PRIVATE OCOMPCARC,NCOMPCARC
PRIVATE OLARGCARC,NLARGCARC
PRIVATE OALTUCARC,NALTUCARC
PRIVATE OPESOCARC,NPESOCARC
PRIVATE OEIXOCARC,NEIXOCARC

PRIVATE OCOMPCARG
PRIVATE NCOMPCARG:=0
PRIVATE OLARGCARG
PRIVATE NLARGCARG:=0
PRIVATE OALTUCARG
PRIVATE NALTUCARG:=0
PRIVATE OPESOCARG
PRIVATE NPESOCARG:=0
PRIVATE OEIXOCARG,NEIXOCARG
PRIVATE LVEZES:=.T.

PRIVATE OKMV,NKMV,NKMV1,NKMV2
PRIVATE OKMC,NKMC,NKMC1,NKMC2
PRIVATE OKMT,NKMT,NKMT1,NKMT2

PRIVATE NKMVE ,NKMVF ,NKMVSP ,NKMVT
PRIVATE NKMVE1,NKMVF1,NKMVSP1,NKMVT1
PRIVATE NKMVE2,NKMVF2,NKMVSP2,NKMVT2

PRIVATE NKMCE ,NKMCF ,NKMCSP ,NKMCT
PRIVATE NKMCE1,NKMCF1,NKMCSP1,NKMCT1
PRIVATE NKMCE2,NKMCF2,NKMCSP2,NKMCT2

PRIVATE NVALPEDVE ,NVALPEDVF ,NVALPEDVSP ,NVALPEDVT
PRIVATE NVALPEDVE1,NVALPEDVF1,NVALPEDVSP1,NVALPEDVT1
PRIVATE NVALPEDVE2,NVALPEDVF2,NVALPEDVSP2,NVALPEDVT2

PRIVATE NVALPEDCE ,NVALPEDCF ,NVALPEDCSP ,NVALPEDCT
PRIVATE NVALPEDCE1,NVALPEDCF1,NVALPEDCSP1,NVALPEDCT1
PRIVATE NVALPEDCE2,NVALPEDCF2,NVALPEDCSP2,NVALPEDCT2

PRIVATE NVALISS

PRIVATE OVALLSRM,NVALLSRM,OVL2LSRM,NVL2LSRM
PRIVATE OVALPREM,NVALPREM,OVL2PREM,NVL2PREM
PRIVATE OVALPRFM,NVALPRFM,OVL2PRFM,NVL2PRFM
PRIVATE OVALTAPM,NVALTAPM,OVL2TAPM,NVL2TAPM
PRIVATE OVALTUVM,NVALTUVM,OVL2TUVM,NVL2TUVM
PRIVATE OVALTURM,NVALTURM,OVL2TURM,NVL2TURM
PRIVATE OVALESCM,NVALESCM,OVL2ESCM,NVL2ESCM
PRIVATE OVALPEDM,NVALPEDM,OVL2PEDM,NVL2PEDM
PRIVATE OVALINVM,NVALINVM,OVL2INVM,NVL2INVM
PRIVATE OVALALEM,NVALALEM,OVL2ALEM,NVL2ALEM
PRIVATE OVALIPTM,NVALIPTM,OVL2IPTM,NVL2IPTM
PRIVATE OVALACOM,NVALACOM,OVL2ACOM,NVL2ACOM
PRIVATE OVALCETM,NVALCETM,OVL2CETM,NVL2CETM
PRIVATE OVALSEMM,NVALSEMM,OVL2SEMM,NVL2SEMM
PRIVATE OVALTVAM,NVALTVAM,OVL2TVAM,NVL2TVAM
PRIVATE OVALTELM,NVALTELM,OVL2TELM,NVL2TELM
PRIVATE OVALOUTM,NVALOUTM,OVL2OUTM,NVL2OUTM
PRIVATE OVALCONM,NVALCONM,OVL2CONM,NVL2CONM
PRIVATE OVALADIM,NVALADIM,OVL2ADIM,NVL2ADIM
PRIVATE OVALAUXM,NVALAUXM,OVL2AUXM,NVL2AUXM
PRIVATE OVALCUSM,NVALCUSM,OVL2CUSM,NVL2CUSM

PRIVATE OVALLSRD,NVALLSRD,OVL2LSRD,NVL2LSRD
PRIVATE OVALPRED,NVALPRED,OVL2PRED,NVL2PRED
PRIVATE OVALPRFD,NVALPRFD,OVL2PRFD,NVL2PRFD
PRIVATE OVALTAPD,NVALTAPD,OVL2TAPD,NVL2TAPD
PRIVATE OVALTUVD,NVALTUVD,OVL2TUVD,NVL2TUVD
PRIVATE OVALTURD,NVALTURD,OVL2TURD,NVL2TURD
PRIVATE OVALESCD,NVALESCD,OVL2ESCD,NVL2ESCD
PRIVATE OVALPEDD,NVALPEDD,OVL2PEDD,NVL2PEDD
PRIVATE OVALINVD,NVALINVD,OVL2INVD,NVL2INVD
PRIVATE OVALALED,NVALALED,OVL2ALED,NVL2ALED
PRIVATE OVALIPTD,NVALIPTD,OVL2IPTD,NVL2IPTD
PRIVATE OVALACOD,NVALACOD,OVL2ACOD,NVL2ACOD
PRIVATE OVALCETD,NVALCETD,OVL2CETD,NVL2CETD
PRIVATE OVALSEMD,NVALSEMD,OVL2SEMD,NVL2SEMD
PRIVATE OVALTVAD,NVALTVAD,OVL2TVAD,NVL2TVAD
PRIVATE OVALTELD,NVALTELD,OVL2TELD,NVL2TELD
PRIVATE OVALOUTD,NVALOUTD,OVL2OUTD,NVL2OUTD
PRIVATE OVALCOND,NVALCOND,OVL2COND,NVL2COND
PRIVATE OVALADID,NVALADID,OVL2ADID,NVL2ADID
PRIVATE OVALAUXD,NVALAUXD,OVL2AUXD,NVL2AUXD
PRIVATE OVALCUSD,NVALCUSD,OVL2CUSD,NVL2CUSD

PRIVATE OVALLSR,NVALLSR,OVL2LSR,NVL2LSR
PRIVATE OVALPRE,NVALPRE,OVL2PRE,NVL2PRE
PRIVATE OVALPRF,NVALPRF,OVL2PRF,NVL2PRF
PRIVATE OVALTAP,NVALTAP,OVL2TAP,NVL2TAP
PRIVATE OVALTUV,NVALTUV,OVL2TUV,NVL2TUV
PRIVATE OVALTUR,NVALTUR,OVL2TUR,NVL2TUR
PRIVATE OVALESC,NVALESC,OVL2ESC,NVL2ESC
PRIVATE OVALPED,NVALPED,OVL2PED,NVL2PED
PRIVATE OVALINV,NVALINV,OVL2INV,NVL2INV
PRIVATE OVALALE,NVALALE,OVL2ALE,NVL2ALE
PRIVATE OVALIPT,NVALIPT,OVL2IPT,NVL2IPT
PRIVATE OVALACO,NVALACO,OVL2ACO,NVL2ACO
PRIVATE OVALCET,NVALCET,OVL2CET,NVL2CET
PRIVATE OVALSEM,NVALSEM,OVL2SEM,NVL2SEM
PRIVATE OVALTVA,NVALTVA,OVL2TVA,NVL2TVA
PRIVATE OVALTEL,NVALTEL,OVL2TEL,NVL2TEL
PRIVATE OVALOUT,NVALOUT,OVL2OUT,NVL2OUT
PRIVATE OVALCON,NVALCON,OVL2CON,NVL2CON
PRIVATE OVALADI,NVALADI,OVL2ADI,NVL2ADI
PRIVATE OVALAUX,NVALAUX,OVL2AUX,NVL2AUX
PRIVATE OVALCUS,NVALCUS,OVL2CUS,NVL2CUS

PRIVATE OVALVIS,NVALVIS
PRIVATE OVALTCP,NVALTCP

PRIVATE OVALMOB,NVALMOB
PRIVATE OVALDES,NVALDES
PRIVATE OVALSEG,NVALSEG
PRIVATE OVALEQU,NVALEQU

PRIVATE OVALGUI,NVALGUI
PRIVATE OVALCUG,NVALCUG

PRIVATE OVALCUT,NVALCUT
PRIVATE OVALDIASV,NVALDIASV,OVALKMV,NVALKMV
PRIVATE OVALDIASC,NVALDIASC,OVALKMC,NVALKMC
PRIVATE OVALBASE,NVALBASE,OVALBASEI,NVALBASEI
PRIVATE OVALBASET,NVALBASET
PRIVATE OVALFRETES,NVALFRETES

PRIVATE OVADCUT,NVADCUT
PRIVATE OVADDIASV,NVADDIASV
PRIVATE OVADDIASC,NVADDIASC
PRIVATE OVADBASE,NVADBASE,OVADBASEI,NVADBASEI
PRIVATE OVADBASET,NVADBASET
PRIVATE OVADFRETES,NVADFRETES

PRIVATE OVAKCUT,NVAKCUT
PRIVATE OVAKDIASV,NVAKDIASV
PRIVATE OVAKDIASC,NVAKDIASC
PRIVATE OVAKBASE,NVAKBASE,OVAKBASEI,NVAKBASEI
PRIVATE OVAKBASET,NVAKBASET
PRIVATE OVAKFRETES,NVAKFRETES

PRIVATE OVALFRETE,NVALFRETE
PRIVATE OVALVIAGEM,NVALVIAGEM
PRIVATE OVALPRET,NVALPRET
PRIVATE OVALFECHT,NVALFECHT

PRIVATE OVALAQU,NVALAQU
PRIVATE OPERRES,NPERRES
PRIVATE OVALRES,NVALRES
PRIVATE OVALUTI,NVALUTI
PRIVATE OVALDIS,NVALDIS
PRIVATE OVALEFE,NVALEFE
PRIVATE OVALJUR,NVALJUR
PRIVATE OPERSEG,NPERSEG

PRIVATE OVALLIC,NVALLIC
PRIVATE OVALLAV,NVALLAV
PRIVATE OFRELAV,NFRELAV
PRIVATE OVALCOM,NVALCOM
PRIVATE OQTDCOM,NQTDCOM
PRIVATE OVALLUB,NVALLUB
PRIVATE OINTLUB,NINTLUB
PRIVATE OVALPNE,NVALPNE
PRIVATE OPREPNE,NPREPNE
PRIVATE OVIDPNE,NVIDPNE
PRIVATE OVALPEC,NVALPEC

PRIVATE OVALREMFIX,NVALREMFIX
PRIVATE OPERRESFIX,NPERRESFIX
PRIVATE OVALRESFIX,NVALRESFIX
PRIVATE OVALCASFIX,NVALCASFIX
PRIVATE OVALLICFIX,NVALLICFIX
PRIVATE OVALSEGFIX,NVALSEGFIX

PRIVATE OVALCOMFIX,NVALCOMFIX
PRIVATE OVALLUBFIX,NVALLUBFIX
PRIVATE OVALPNEFIX,NVALPNEFIX
PRIVATE OVALLAVFIX,NVALLAVFIX

PRIVATE OVALISSBDI,NVALISSBDI
PRIVATE OVALPISBDI,NVALPISBDI
PRIVATE OVALADMBDI,NVALADMBDI
PRIVATE OVALLUCBDI,NVALLUCBDI
PRIVATE OVALSEGBDI,NVALSEGBDI
PRIVATE OVALJURBDI,NVALJURBDI
PRIVATE OVALCPMBDI,NVALCPMBDI
PRIVATE OVALCSLBDI,NVALCSLBDI
PRIVATE OVALIRRBDI,NVALIRRBDI
PRIVATE OVALTOTBDI,NVALTOTBDI

PRIVATE OPERISSBDI,NPERISSBDI
PRIVATE OPERPISBDI,NPERPISBDI
PRIVATE OPERADMBDI,NPERADMBDI
PRIVATE OPERLUCBDI,NPERLUCBDI
PRIVATE OPERSEGBDI,NPERSEGBDI
PRIVATE OPERJURBDI,NPERJURBDI
PRIVATE OPERCPMBDI,NPERCPMBDI
PRIVATE OPERCSLBDI,NPERCSLBDI
PRIVATE OPERIRRBDI,NPERIRRBDI
PRIVATE OPERTOTBDI,NPERTOTBDI

PRIVATE OVALTOTX,NVALTOTX

PRIVATE OPREDIAG ,NPREDIAG
PRIVATE OVALBASG,NVALBASG
PRIVATE OVALTUR1,NVALTUR1
PRIVATE OVALTUR2,NVALTUR2
PRIVATE OVALTUR3,NVALTUR3
PRIVATE OVALBASGT,NVALBASGT
PRIVATE OVALMOBG,NVALMOBG
PRIVATE OVALDESG,NVALDESG
PRIVATE OVALTACG,NVALTACG
PRIVATE OVALISSG,NVALISSG
PRIVATE OVALSEGG,NVALSEGG
PRIVATE OVALTOTG,NVALTOTG
PRIVATE OVALCUSTG,NVALCUSTG
PRIVATE OVALRENTG,NVALRENTG
PRIVATE NMINDIA,NMINMES

PRIVATE OVALCUSIG,NVALCUSIG						// CUSTO INDIRETO
PRIVATE OVALCOBR,NVALCOBR						// VALOR A COBRAR

PRIVATE OVAMMOBG,NVAMMOBG
PRIVATE OVAMDESG,NVAMDESG
PRIVATE OVAMISSG,NVAMISSG
PRIVATE OVAMSEGG,NVAMSEGG
PRIVATE OVAMTOTG,NVAMTOTG

PRIVATE OPREDIAU ,NPREDIAU
PRIVATE OVALBASU,NVALBASU
PRIVATE OVALBASUT,NVALBASUT
PRIVATE OVALMOBU,NVALMOBU
PRIVATE OVALDESU,NVALDESU

PRIVATE OVLEST  ,NVLEST
PRIVATE OMONTAGU,NMONTAGU
PRIVATE ODESMONU,NDESMONU
PRIVATE OTELESCU,NTELESCU
PRIVATE OANCORAU,NANCORAU
PRIVATE OGUIMONU,NGUIMONU
PRIVATE OGUIDESU,NGUIDESU
PRIVATE OOPERADU,NOPERADU
PRIVATE OOPERADUT,NOPERADUT
PRIVATE OACESSOU,NACESSOU

PRIVATE ODISISSU,CDISISSU

PRIVATE OTIPISSU,CTIPISSU
PRIVATE OPERISSU,NPERISSU
PRIVATE OBASISSU,NBASISSU,NBASEU
PRIVATE OVALISSU,NVALISSU
PRIVATE OTIPSEGU,CTIPSEGU
PRIVATE OBASSEGU,NBASSEGU
PRIVATE OPERSEGU,NPERSEGU
PRIVATE OVALSEGU,NVALSEGU
PRIVATE OVALTOTU,NVALTOTU

PRIVATE OVALISSU1,NVALISSU1
PRIVATE OVALSEGU1,NVALSEGU1

PRIVATE O1DESC,C1DESC
PRIVATE O1COMP,N1COMP
PRIVATE O1LARG,N1LARG
PRIVATE O1ALTU,N1ALTU
PRIVATE O1PESO,N1PESO

PRIVATE O2DESC,C2DESC
PRIVATE O2COMP,N2COMP
PRIVATE O2LARG,N2LARG
PRIVATE O2ALTU,N2ALTU
PRIVATE O2PESO,N2PESO

PRIVATE O3DESC,C3DESC
PRIVATE O3COMP,N3COMP
PRIVATE O3LARG,N3LARG
PRIVATE O3ALTU,N3ALTU
PRIVATE O3PESO,N3PESO

PRIVATE OINSTRU, NINSTRU						// VALORES P/ BASE DE CÁLCULO GRAVADOS NA TABELA ZA9 
PRIVATE OBALSA , NBALSA
PRIVATE ODESDTA, NDESDTA
PRIVATE OMONDES, NMONDES
PRIVATE OAPOGUI, NAPOGUI
PRIVATE OCAVEXT, NCAVEXT

PRIVATE OMOBENC, NMOBENC
PRIVATE ODMOENC, NDMOENC

PRIVATE NFOLDCR

// TOTAL PROJETO
PRIVATE OVALBAST,NVALBAST
PRIVATE OVALMOBT,NVALMOBT
PRIVATE	OVALDEST,NVALDEST
PRIVATE	OVALSEGT,NVALSEGT
PRIVATE OTIPOISST,CTIPOISST
PRIVATE	OTIPOSEGT,CTIPOSEGT
PRIVATE	OTIPOCAT,CTIPOCAT
PRIVATE	OPREDIAT,NPREDIAT
PRIVATE	OVRHORT,NVRHORT
PRIVATE	OMINDIAT,NMINDIAT
PRIVATE	OMINMEST,NMINMEST
PRIVATE	OQTMEST,NQTMEST
PRIVATE	OQTDIAT,NQTDIAT
PRIVATE OVALEQUT,NVALEQUT
PRIVATE OVALBASTT,NVALBASTT
PRIVATE OVALTUR1T,NVALTUR1T
PRIVATE	OVALTUR2T,NVALTUR2T
PRIVATE	OVALTUR3T,NVALTUR3T
PRIVATE OVALTACT,NVALTACT
PRIVATE OVALISST,NVALISST
PRIVATE OVALCOBRT,NVALCOBRT
PRIVATE OVALTOTT,NVALTOTT
PRIVATE OVALCUST,NVALCUST
PRIVATE OVALRENT,NVALRENT

// TOTAL OBRA
PRIVATE OVALBASOG,NVALBASOG
PRIVATE OVALMOBO,NVALMOBO
PRIVATE	OVALDESO,NVALDESO
PRIVATE	OVALSEGO,NVALSEGO
PRIVATE OTIPOISSO,CTIPOISSO
PRIVATE	OTIPOSEGO,CTIPOSEGO
PRIVATE	OTIPOCAO,CTIPOCAO
PRIVATE	OPREDIAO,NPREDIAO
PRIVATE	OVRHORO,NVRHORO
PRIVATE	OMINDIAO,NMINDIAO
PRIVATE	OMINMESO,NMINMESO
PRIVATE	OQTMESO,NQTMESO
PRIVATE	OQTDIAO,NQTDIAO
PRIVATE OVALEQUO,NVALEQUO
PRIVATE OVALBASTO,NVALBASTO
PRIVATE OVALTUR1O,NVALTUR1O
PRIVATE	OVALTUR2O,NVALTUR2O
PRIVATE	OVALTUR3O,NVALTUR3O
PRIVATE OVALTACO,NVALTACO
PRIVATE OVALISSO,NVALISSO
PRIVATE OVALCOBRO,NVALCOBRO
PRIVATE OVALTOTO,NVALTOTO
PRIVATE OVALCUSO,NVALCUSO
PRIVATE OVALRENO,NVALRENO

PRIVATE CPROJETCOPY := ""

PRIVATE ODLG
PRIVATE CTITJAN  := SUPERGETMV("MV_LOCX248",.F.,"PROJETO")

PRIVATE _nTempX01,_nTempX02,_nTempX03,_nTempX04,_nTempX05,_nTempX06,_nTempX07,_cTempX08,_cTempX09,_nTempX10,_nTempX11,_nTempX12,_nTempX13,_nTempX14,_nTempX15
PRIVATE _oTempX01,_oTempX02,_oTempX03,_oTempX04,_oTempX05,_oTempX06,_oTempX07,_oTempX08,_oTempX09,_oTempX10,_oTempX11,_oTempX12,_oTempX13,_oTempX14,_oTempX15

// MERGE - ORGUEL 94 - INICIO
//NÃO MEXER NESSAS VARIAVEIS POIS SÃO UTILIZADAS NO RODAPÉ CUSTOMIZADO DA ABA LOCAÇÃO
Private oRodSay1, oRodSay2, oRodSay3, oRodSay4, oRodSay5, oRodSay6, oRodSay7, oRodSay8, oRodSay9, oRodSayA
Private oRodGet1, oRodGet2, oRodGet3, oRodGet4, oRodGet5, oRodGet6, oRodGet7, oRodGet8, oRodGet9, oRodGetA
Private nRodCtd1, nRodCtd2, nRodCtd3, nRodCtd4, nRodCtd5, nRodCtd6, nRodCtd7, nRodCtd8, nRodCtd9, nRodCtdA
Private cRodCtd1, cRodCtd2, cRodCtd3, cRodCtd4, cRodCtd5, cRodCtd6, cRodCtd7, cRodCtd8, cRodCtd9, cRodCtdA
Private aFamFold := {}
// MERGE - ORGUEL 94 - FIM

/*
PERGUNTE("LOCC001F12",.F.)
DO CASE 
CASE MV_PAR01==1 
	CFILTROF12 := "SEM NF RETORNO" 
CASE MV_PAR01==2 
	CFILTROF12 := "COM NF RETORNO" 
OTHERWISE 
	CFILTROF12 := "AMBOS" 
ENDCASE
*/
IF EMPTY(CFILTROF12)
	CFILTROF12 := "AMBOS" 
ENDIF

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

IF LDPLIT
	IF NOPC == 3 .OR. NOPC == 4
		AADD(ABUTTONS , {"ANALITIC",{|| U_LOCC001X(FP0->FP0_PROJET) },OEMTOANSI("Duplica Itens" ),OEMTOANSI("Duplica Itens")})
	ENDIF
ENDIF

IF ! FP0->FP0_TIPOSE $ "T;L" .AND. POPC == 2
		AADD(ABUTTONS , {"GPEIMG32",{||TURVAL(NOPCMANU, OBJT) },OEMTOANSI("Turnos e Valores"  ),OEMTOANSI("Turnos" )})
ENDIF

IF FP0->FP0_TIPOSE == "L" .AND. FP0->FP0_TIPFAT == "L"
		AADD(ABUTTONS , {"OBJETIVO",{|| CONSLIFT() },OEMTOANSI("Consulta LIFT"),OEMTOANSI("Consulta LIFT")})
ENDIF

// MONTA OS BOTÕES DA BARRA DE FERRAMENTAS
IF FWHEN()
	AADD(ABUTTONS,{"S4WB001N",{||FSALVAR900()},OEMTOANSI("Salvar")         ,OEMTOANSI("Salvar" )})
	AADD(ABUTTONS,{"OBJETIVO",{||LOCR034()} ,OEMTOANSI("Disponibilidade"),OEMTOANSI("Dispon.")})
	AADD(ABUTTONS,{"ESTRUTURA",{||LOCXITU02()} ,OEMTOANSI("Estrutura"),OEMTOANSI("Estrutura")}) // FRANK VISÃO POR ESTRUTURA 28/09/20
	AADD(ABUTTONS,{"CONHECIMENTO",{|| ITCONHE() },OEMTOANSI("Conhecimento" ),OEMTOANSI("Conhecimento")}) // FRANK BANCO DE CONHECIMENTO
    IF !FP0->FP0_TIPOSE $ "T;L" .AND. POPC <> 0
		AADD(ABUTTONS,{"GPEIMG32",{||TURVAL(NOPCMANU,OBJT)      },OEMTOANSI("Turnos e Valores"  ),OEMTOANSI("Turnos" )}) //ALTERAÇÃO CLAUDINO(BIALE CONSULTORIA).
	ENDIF

    DO CASE
	CASE FP0->FP0_TIPOSE == "E" .AND. POPC <> 0			// NÃO FOR FOLLOW-UP
		AADD(ABUTTONS , {"ANALITIC",{||FDUPLIGUI()} , OEMTOANSI("Duplica Locação"),OEMTOANSI("Locação")})
	CASE FP0->FP0_TIPOSE == "T" .AND. POPC <> 0			// NÃO FOR FOLLOW-UP
		AADD(ABUTTONS , {"S4WB005N",{||IMPPLAN()}   , OEMTOANSI("Packing List"   ),OEMTOANSI("Packing")})
		AADD(ABUTTONS , {"ANALITIC",{||FDUPLITRA()} , OEMTOANSI("Duplica Viagem" ),OEMTOANSI("Dupl. Viagem")})
	ENDCASE
ENDIF

IF EXISTBLOCK("LC001BUT") 						// --> PONTO DE ENTRADA PARA INCLUSÃO DE BOTÕES NAS AÇÕES RELACIONADAS DA MANUTENÇÃO
	ABUTTONS := EXECBLOCK("LC001BUT" , .T. , .T. , {ABUTTONS,POPC}) 
ENDIF

AADD(ABUTTONS , {"Notas de Retorno",{||LOCA00199()} , OEMTOANSI("Notas de Retorno" ),OEMTOANSI("Notas de Retorno")})


ASIZEAUT 	 := MSADVSIZE()
IF OMAINWND:NCLIENTWIDTH > 800
	AADD( AOBJECTS, {  100, 008, .T., .T. } ) 			// ENCHOICE
	AADD( AOBJECTS, {  100, 082, .T., .T. } ) 			// MSGETDADOS
ELSE
	AADD( AOBJECTS, {  100, 010, .T., .T. } ) 			// ENCHOICE
	AADD( AOBJECTS, {  100, 080, .T., .T. } ) 			// MSGETDADOS
ENDIF

AINFO 	:= {ASIZEAUT[1],ASIZEAUT[2],ASIZEAUT[3],ASIZEAUT[4],3,3}
APOSOBJ := MSOBJSIZE( AINFO, AOBJECTS, .T. , .F. )
APOSGET := MSOBJGETPOS((ASIZEAUT[3]-ASIZEAUT[1]),315,{{004,024,240,270}} )

XTABTUV := {}  											// TABELA DA TUV
XTABTUR := {} 											// TABELA DA TUR
/*ZAP->(DBGOTOP())
WHILE ZAP->(!EOF())
	ZAP->(AADD(XTABTUV,{ZAP_DE,ZAP_ATE,ZAP_FATOR})) 	// TABELA DA TUV
	ZAP->(AADD(XTABTUR,{ZAP_DE,ZAP_ATE,ZAP_FATOR})) 	// TABELA DA TUR
	ZAP->(DBSKIP())
ENDDO */

/* FRANK 17/12/2020 MODULO 94
ZAX->(DBGOTOP())
XTUVTON := ZAX->ZAX_TUVTON
XTUVUFI := ZAX->ZAX_TUVUFI
XTAPTON := ZAX->ZAX_TAPTON
XFATTAP := ZAX->ZAX_FATTAP
XVALPRE := ZAX->ZAX_VALPRE
XVALBAT := ZAX->ZAX_VALBAT
XBATDIA := ZAX->ZAX_BATDIA
XVALPLA := ZAX->ZAX_VALPLA
XVALINV := ZAX->ZAX_VALINV
XVALALE := ZAX->ZAX_VALALE

IF ZAX->(TYPE("ZAX_TURTON")<>"U")  						// SE O CAMPO EXISTE
	XTURTON := ZAX->ZAX_TURTON  						// TUR LIM.TON.
	XTURUFI := ZAX->ZAX_TURUFI  						// TUR UFIR
ELSE
	XTURTON := ZAX->ZAX_TUVTON  						// TUV LIM.TON.
	XTURUFI := ZAX->ZAX_TUVUFI  						// TUV UFIR
ENDIF
*/ 

XFATPRF := {}
AADD(XFATPRF,{70,0.65})
AADD(XFATPRF,{60,0.76})
AADD(XFATPRF,{50,0.91})
AADD(XFATPRF,{40,1.14})
AADD(XFATPRF,{30,1.53})
AADD(XFATPRF,{20,2.29})
AADD(XFATPRF,{10,4.59})

XFATBAT := {}
AADD(XFATBAT,{70,0.00+0.65})
AADD(XFATBAT,{60,0.76+0.65})
AADD(XFATBAT,{50,0.91+0.65})
AADD(XFATBAT,{40,1.14+0.65})
AADD(XFATBAT,{30,1.53+0.65})
AADD(XFATBAT,{20,2.29+0.65})
AADD(XFATBAT,{10,3.94+0.65})

XPESOINV := 70
XLARGINV := 5500
XALTUINV := 5200
XCOMPINV := 30000

XPESOALE := 70
XLARGALE := 5500
XALTUALE := 5200
XCOMPALE := 30000


DEFINE MSDIALOG ODLG FROM ASIZEAUT[7],0 TO ASIZEAUT[6],ASIZEAUT[5] TITLE OEMTOANSI(CTITJAN) OF OMAINWND PIXEL 

	FZERATUDO()

	// --> CRIACAO DA INTERFACE.
	NFOLDERPRO := 0
	NFOLDEROBR := 0
	NFOLDERROT := 0
	NFOLDERTRE := 0
	NFOLDERGUI := 0
	NFOLDERPLA := 0
	NFOLDERTRA := 0
	NFOLDERCAR := 0
	NFOLDERCON := 0
	NFOLDERCUS := 0
	NFOLDERBDI := 0
	NFOLDERFOL := 0
	NFOLDERRES := 0
	NFOLDERDOC := 0
	NFOLDERCNJ := 0								// ABA CJ.TRANSP. (PARA ACESSÓRIOS DE GUINDASTES) 
	NFOLDERCNP := 0								// ABA CJ.PLATAFORMA 

	APAGES  := {}

	ATITLES := {}
    ATITLES := FCFOLDER(ATITLES, POPC)

	NLIN1 := APOSOBJ[2,1]
	NCOL1 := APOSOBJ[2,2]
	NLIN2 := APOSOBJ[2,4]-APOSOBJ[2,2] 			// LARGURA
	NCOL2 := APOSOBJ[2,3]-APOSOBJ[2,1] 			// ALTURA

	// 	       TFOLDER():NEW(<NROW>,<NCOL>,<CPROMPT>,<CDLGNAMEN>,<OWND> ,<NOPTION>,<NCLRFORE>,<NCLRBACK>,<.LPIXEL.>,<.LDESIGN.>,<NWIDTH>,<NHEIGHT>,<CMSG>)
	OFOLDER := TFOLDER():NEW(NLIN1 ,NCOL1 ,ATITLES  ,APAGES     ,ODLG   ,         ,          ,          ,.T.       ,.F.        ,NLIN2   ,NCOL2    ,      )

	// FORÇA A CRIAÇÃO DO ATITLES NOVAMENTE, POIS NA V12 ESTAVA DUPLICANDO O ARRAY AO PASSAR PELO TFOLDER()
	ATITLES := {}
    ATITLES := FCFOLDER(ATITLES, POPC)

	FOR NPOS := 1 TO LEN(ATITLES)
		OFOLDER:ADIALOGS[NPOS]:OFONT := ODLG:OFONT
	NEXT

	// --> CONSISTENCIA A CADA MUDANCA DE PASTA DO OBJETO FOLDER
	OFOLDER:BSETOPTION := {|NINDO| LOCA00111(NINDO,OFOLDER:NOPTION,@ODLG,@OFOLDER) }

	CALIAS  := "FP0"
	ASAYZA0 := {}
	AGETZA0 := {}

	SX3->(DBSETORDER(1))
	SX3->(DBSEEK(CALIAS))
	WHILE SX3->(!EOF() .AND. X3_ARQUIVO==CALIAS)
		IF X3USO(SX3->X3_USADO) .AND. CNIVEL >= SX3->X3_NIVEL
			AADD(ASAYZA0,SX3->X3_CAMPO)
			IF SX3->(!UPPER(ALLTRIM(X3_CAMPO))$UPPER("FP0_PROJET"))
				AADD(AGETZA0,SX3->X3_CAMPO)
			ENDIF
			IF SX3->X3_CONTEXT <> "V"
				M->&(SX3->X3_CAMPO) := (CALIAS)->&(SX3->X3_CAMPO)
			ELSE
				M->&(SX3->X3_CAMPO) := CRIAVAR(SX3->X3_CAMPO)
			ENDIF
		ENDIF
		SX3->(DBSKIP())
	ENDDO 

	// DADOS DO PROJETO
	NLIN1 := APOSOBJ[1,1]
	NCOL1 := APOSOBJ[1,2]
	NLIN2 := APOSOBJ[1,3]
	NCOL2 := APOSOBJ[1,4]
	@ NLIN1,NCOL1 TO NLIN2,NCOL2 OF ODLG PIXEL
	@ NLIN1+06,NCOL1+005 SAY   OEMTOANSI(SUPERGETMV("MV_LOCX248",.F.,"PROJETO")+":") SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT1 
	@ NLIN1+05,NCOL1+055 MSGET OPROJET VAR CPROJET                   WHEN FWHEN(.F.) SIZE 150,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT2 
	@ NLIN1+06,NCOL1+220 SAY   OEMTOANSI("Localidade:")                              SIZE 080,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT1 
	@ NLIN1+05,NCOL1+290 MSGET OOBRA   VAR XOBRA                     WHEN FWHEN(.F.) SIZE 200,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT2 

	NLIN1 := 002
	NCOL1 := 003
	NLIN2 := (APOSOBJ[2,3]-62)-25
	NCOL2 := APOSOBJ[2,4]-07

	IF NFOLDERPRO > 0  							// DADOS DO PROJETO - TODOS OS PROJETOS
		FFOLDERPRO(NFOLDERPRO,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDEROBR > 0  							// LOCALIDADES - EQUIPAMENTO E PLATAFORMA
		FFOLDEROBR(NFOLDEROBR,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERGUI > 0  							// GUINDASTES
		FFOLDERGUI(NFOLDERGUI,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERCNJ > 0  							// CONJUNTO DE TRANSPORTE PARA GUINDASTES
		FFOLDERCNJ(NFOLDERCNJ,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERPLA > 0  							// PLATAFORMAS
		FFOLDERPLA(NFOLDERPLA,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERTRA > 0  							// TRANSPORTES
		FFOLDEROBR(NFOLDERTRA,0,0,0,0)
		FFOLDERTRA(NFOLDERTRA,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERROT > 0  							// ROTAS ( EQUIPAMENTOS )
		FFOLDERROT(NFOLDERROT,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERTRE > 0  							// TRECHOS ( TRANSPORTES E EQUIPAMENTOS )
		FFOLDERTRE(NFOLDERTRE,NLIN1,NCOL1,NLIN2-20,NCOL2)
	ENDIF

	IF NFOLDERCAR > 0  							// CARGAS ( TRANSPORTES )
		FFOLDERCAR(NFOLDERCAR,NLIN1,NCOL1,NLIN2-100,NCOL2)
	ENDIF

	IF NFOLDERCON > 0  							// CONJ.TRANSPORTADOR ( TRANSPORTES )
		FFOLDERCON(NFOLDERCON,NLIN1,NCOL1,NLIN2-100,NCOL2)
	ENDIF

	IF NFOLDERRES > 0  							// RESPONSABILIDADES
		FFOLDERRES(NFOLDERRES,NLIN1,NCOL1,NLIN2-20,NCOL2)
	ENDIF

	IF NFOLDERFOL > 0  							// FOLLOW-UP
		FFOLDERFOL(NFOLDERFOL,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF NFOLDERCUS > 0  							// CUSTOS
		FFOLDERCUS(NFOLDERCUS,NLIN1,NCOL1,NLIN2,NCOL2) // REMOVIDO EM 17/12/2020 MODULO 94
	ENDIF

	IF NFOLDERDOC > 0  							// DOCUMENTOS
		FFOLDERDOC(NFOLDERDOC,NLIN1,NCOL1,NLIN2-20,NCOL2)
	ENDIF

	IF NFOLDERCNP > 0  							// CONJUNTO TRANSPORTADOR DE PLATAFORMA
		FFOLDERCNP(NFOLDERCNP,NLIN1,NCOL1,NLIN2,NCOL2)
	ENDIF

	IF FP0->FP0_TIPOSE == "G" .AND. POPC <> 0
		TURVAL(10 , ODLGGUI) 
	ENDIF

	IF NOPC == 4
		IF LCOPYPRJ

			CSTATUS := "1"

			IF FP0->FP0_TIPOSE == "T"
				FOR NX := 1 TO LEN(OTRA_COLS)
					ACOLSAUX := OTRA_COLS[NX]
					FOR NI := 1 TO LEN(ACOLSAUX)
						ACOLSAUX[ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_AS"})]     := ""
						ACOLSAUX[ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_VIAGEM"})] := ""
					NEXT NI
				NEXT NX
				FOR NX := 1 TO LEN(OCAR_COLS)
					ACOLSAUX := OCAR_COLS[NX]
					FOR NI := 1 TO LEN(ACOLSAUX)
						ACOLSAUX[ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_AS"})]     := ""
					NEXT NI
				NEXT NX

			ELSEIF FP0->FP0_TIPOSE == "E"
				FOR NX := 1 TO LEN(OGUI_COLS)
					ACOLSAUX := OGUI_COLS[NX]
					FOR NI := 1 TO LEN(ACOLSAUX)
						ACOLSAUX[ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_AS"})]     := ""
						ACOLSAUX[ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VIAGEM"})] := ""
					NEXT NI
				NEXT NX
				
            ELSEIF FP0->FP0_TIPOSE == "L"
				FOR NX := 1 TO LEN(OPLA_COLS)
					ACOLSAUX := OPLA_COLS[NX]
					FOR NI := 1 TO LEN(ACOLSAUX)
						ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    })] := ""
						ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VIAGEM"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM" })] := "" 
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SERREM"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_FILREM"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ITEREM"})] := ""					    
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DNFREM"})] := CTOD("")
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DNFENT"})] := CTOD("")
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PLACAI"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_REBOQI"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_MOTRET"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NMOTRE"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET" })] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SERRET"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ITERET"})] := ""
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTPRRT"})] := CTOD("")
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTSCRT"})] := CTOD("")
					    ACOLSAUX[ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ULTFAT"})] := CTOD("")
					NEXT NI
				NEXT NX 
			ENDIF
		ENDIF
	ENDIF

	OBJT := BOBKJ()								// OBJETO INICIADO

	IF NOPC == 2 .AND. SIMPLELOCK()				// VISUALIZAÇÃO - GRAVAMOS O VALOR DO PROJETO 
		_NVALPROJ := GETVALPROJ(FP0->FP0_PROJET , FP0->FP0_TIPOSE) 
	 //	RECLOCK("FP0",.F.) 
		FP0->FP0_VALPRO := _NVALPROJ 
		MSRUNLOCK() 
	ENDIF

ACTIVATE MSDIALOG ODLG CENTERED ON INIT ENCHOICEBAR(ODLG , {||VALID(ODLG)} , {|| ODLG:END()} , , ABUTTONS) 

RETURN NIL 



/*
// ======================================================================= \\
STATIC FUNCTION FCANCMAN()
// ======================================================================= \\
// --> NÃO EXISTE NANHUMA CHAMADA !
// --> REALIZA VALIDAÇÕES ANTES DE CANCELAR 
LOCAL _LRET := .T.       
                        
IF EXISTBLOCK("LC01CMAN") 						// --> PONTO DE ENTRADA PARA VALIDAR O CANCELAMENTO DA MANUTENÇÃO
   _LRET := EXECBLOCK("LC01CMAN" , .T. , .T. , {CSTSATU})
ENDIF

RETURN _LRET
*/


/*/{PROTHEUS.DOC} COPIAZA0
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A COPIA DA PRINCIPAL TABELA DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM NRECNO, INDICA O NÚMERO DO RECNO A SER COPIADO.
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION COPIAZA0(NRECNO)
// ======================================================================= \\
// --> FAZ A COPIA DA TABELA ZA0 E ZBB 

LOCAL CPROJET   := PROJETO()
LOCAL AAREAZBB	:= FPE->(GETAREA())
LOCAL AZA0		:= {}
LOCAL AZBB		:= {}
LOCAL CTIME		:= TIME()
LOCAL NX		:= 1

CTIME := SUBSTR(CTIME,1,2)+SUBSTR(CTIME,4,2)

DBSELECTAREA("FP0")
DBGOTO(NRECNO)

FOR NX := 1 TO FP0->(FCOUNT())					// ARMAZENO OS DADOS PARA DUPLICAR O REGISTRO
	AADD(AZA0, FP0->(FIELDGET(NX)))
NEXT NX

FP0->(RECLOCK("FP0",.T.))
FOR NX := 1 TO FP0->(FCOUNT())
	FP0->(FIELDPUT(NX, AZA0[NX]))
NEXT NX
FP0->FP0_PROJET := CPROJETCOPY
FP0->FP0_STATUS := "1"
FP0->FP0_DATINC := DDATABASE
FP0->FP0_HORINC := CTIME
FP0->(MSUNLOCK())

DBSELECTAREA("FPE")
DBSETORDER(2)
DBSEEK(XFILIAL("FPE")+ CPROJET )
WHILE !FPE->(EOF()) .AND. FPE->FPE_PROJET == CPROJET
	AZBB := {}
	FOR NX := 1 TO FPE->(FCOUNT())				// ARMAZENO OS DADOS PARA DUPLICAR O REGISTRO
		AADD(AZBB, FPE->(FIELDGET(NX)))
	NEXT NX

	AAREAZBB := FPE->(GETAREA())
	FPE->(RECLOCK("FPE",.T.))
	FOR NX := 1 TO FPE->(FCOUNT())
		FPE->(FIELDPUT(NX, AZBB[NX]))
	NEXT NX
	FPE->FPE_PROJET := CPROJETCOPY
	FPE->(MSUNLOCK())
	RESTAREA(AAREAZBB)

	FPE->(DBSKIP())
ENDDO

RESTAREA(AAREAZBB)

RETURN NIL 


/*/{PROTHEUS.DOC} FSALVAR900
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A COPIA DA PRINCIPAL TABELA DO PROJETO

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LC001VAL") - VALIDAÇÃO COMPLEMENTAR ANTES DE SALVAR
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM ODLG, OBJETO DAS TELAS DO CADASTRO DOS PROJETOS
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVAR900() 
// ======================================================================= \\

LOCAL AAREA := GETAREA()
LOCAL _aOldOdlg := oDlg
LOCAL _omainold := omainwnd

IF ! FWHEN()
	RETURN .F.
ENDIF

// FRANK Z FUGA - 28/09/2020
// CONTROLE DO ESTOQUE
ITESTX()

// FRANK 26/10/20
// ROTINA PARA LIMPAR O VALOR DOS ITENS PAIS
LOCA001A0()

IF EXISTBLOCK("LC001VAL")
	DO CASE
	CASE FP0->FP0_TIPOSE == "T"
		IF !EXECBLOCK("LC001VAL" , .T. , .T. , {ODLGCAR:ACOLS,ODLGCAR:AHEADER}) 
			RETURN .F.
		ENDIF
	CASE ALLTRIM(FP0->FP0_TIPOSE) $ "E#G"
		IF !EXECBLOCK("LC001VAL" , .T. , .T. , {ODLGGUI:ACOLS,ODLGGUI:AHEADER}) 
			RETURN .F.
		ENDIF
	OTHERWISE
		IF !EXECBLOCK("LC001VAL" , .T. , .T. , {ODLGPLA:ACOLS,ODLGPLA:AHEADER}) 
			RETURN .F.
		ENDIF
	ENDCASE
ENDIF

IF MSGYESNO("CONFIRMA A ATUALIZAÇÃO DAS TABELAS ??" , "GPO - LOCC001.PRW") 

	FSALVAR000()

	M->FP0_REVISA := FP0->FP0_REVISA

	IF VALTYPE(ODLGGUI)=="O"
		FTRAZGUI()
		MUDAGUIB()
		ODLGGUI:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGTRA)=="O"
		FTRAZTRA()
		MUDATRAB()
		ODLGTRA:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGROT)=="O"
		FTRAZROT()
		MUDAROTB()
		ODLGROT:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGTRE)=="O"
		FTRAZTRE()
		MUDATREB()
		ODLGTRE:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGPLA)=="O"
		FTRAZPLA()
		LOCA00141()
		ODLGPLA:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGCAR)=="O"
		FTRAZCAR()
		MUDACARB()
		ODLGCAR:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGCON)=="O"
		FTRAZCON()
		MUDACONB()
		ODLGCON:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGRES)=="O"
		FTRAZRES()
		MUDARESB()
		ODLGRES:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGDOC)=="O"
		FTRAZDOC()
		LOCA00146()
		ODLGDOC:OBROWSE:REFRESH()
	ENDIF

	IF VALTYPE(ODLGCNJ)=="O"					// ATUALIZAR DADOS BECHANGE 
		OCNJACOLS:SETDATA(ODLGCNJ:ACOLS)
	ENDIF

	IF VALTYPE(ODLGCNP)=="O"
		OCNPACOLS:SETDATA(ODLGCNP:ACOLS)
	ENDIF


ENDIF

RESTAREA( AAREA )
omainwnd := _omainold 
oDlg:=_aOldOdlg

RETURN NIL 


/*/{PROTHEUS.DOC} FSALVAR
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM ODLG, OBJETO DAS TELAS DO CADASTRO DOS PROJETOS
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVAR(ODLG)
// ======================================================================= \\

IF ! FWHEN()
	ODLG:END()
	RETURN .F.
ENDIF

FSALVAR000()

ODLG:END()


RETURN .T.



/*/{PROTHEUS.DOC} FSALVAR000
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

//---------------------------------------------------------------------------
// SALVAR - INÍCIO
//---------------------------------------------------------------------------
// ======================================================================= \\
STATIC FUNCTION FSALVAR000()
// ======================================================================= \\

Local _aArea := GetArea()

IF ! FWHEN()
	RestArea(_aArea)
	RETURN .F.
ENDIF

PROJETO()										// RESTAURAMOS A ÁREA DA ZA0 ORIGINAL

// FRANK Z FUGA - 28/09/2020
// CONTROLE DO ESTOQUE
IF TYPE(PROCNAME(1)) == "U"
	IF PROCNAME(1) == "FSALVAR"
		ITESTX()
	ENDIF
ENDIF

BEGIN TRANSACTION
	IF LCOPYPRJ
		CPROJETCOPY := LOCA00140("FP0_PROJET") 
		EVALTRIGGER()
		CONFIRMSX8()
	
		PROJETO()								// RESTAURAMOS A ÁREA DA ZA0 ORIGINAL
	
		COPIAZA0(FP0->(RECNO())) 				// COPIA A ZA0 ANTES DE CARREGAR TODOS OS ACOLS DOS FOLDERS
	
		M->FP0_PROJET := PROJETO(.T.)			// GUARDAMOS O NOVO ZA0 (COPIADO)
	ENDIF
	
	PROCESSA( {|| FSALVAR001()}, "AGUARDE... ATUALIZANDO AS TABELAS")
END TRANSACTION

LCOPYPRJ := .F.									// APÓS SALVAR, NÃO É MAIS UM PROJETO NOVO/COPIADO.....
PROJETO()										// RESTAURAMOS A ÁREA DA ZA0 ORIGINAL

RestArea(_aArea)
RETURN NIL


/*/{PROTHEUS.DOC} FSALVAR001
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
EXISTBLOCK("LCTURGRV")- PONTO DE ENTRADA APOS O PREENCHIMENTO DOS TURNOS.
EXISTBLOCK("LC001GRV")
EXISTBLOCK("U_LOCC001_") - PONTO DE ENTRADA PARA GRAVAÇÃO DO LOG.
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVAR001()
// ======================================================================= \\

LOCAL NPOS
LOCAL _LALT      := .F.
LOCAL _NCNT      := 0 
LOCAL _aArea     := GetArea()


PROCREGUA( LEN(OFOLDER:ADIALOGS) )

IF EXISTBLOCK("LC001GRU") 						// --> PONTO DE ENTRADA PARA VALIDAR AS LINHAS DA ABA LOCAÇÕES ANTES DE SALVAR.
	_LRET := .T.
	DO CASE
	CASE FP0->FP0_TIPOSE == "T" .AND. VALTYPE(ODLGCAR) == "O"
  	   _LRET := EXECBLOCK("LC001GRU",.T.,.T.,{ODLGCAR:AHEADER,ODLGCAR:ACOLS})
	CASE ALLTRIM(FP0->FP0_TIPOSE) $ "E#G" .AND. VALTYPE(ODLGGUI) == "O"
  	   _LRET := EXECBLOCK("LC001GRU",.T.,.T.,{ODLGGUI:AHEADER,ODLGGUI:ACOLS})
	CASE ALLTRIM(FP0->FP0_TIPOSE) $ "L#P" .AND. VALTYPE(ODLGPLA) == "O"
  	   _LRET := EXECBLOCK("LC001GRU",.T.,.T.,{ODLGPLA:AHEADER,ODLGPLA:ACOLS})
	ENDCASE
	IF !_LRET
		RETURN _LRET
	ENDIF
ENDIF

FOR _NCNT := 1 TO 20
	IF "LOCA00105" $ UPPER(ALLTRIM(PROCNAME(_NCNT)))
		_LALT := .T.
		EXIT
	ENDIF
NEXT _NCNT 

IF _LALT										// GRAVAÇÃO DO VALOR DO PROJETO 
	_NVALPROJ := GETVALPROJ(FP0->FP0_PROJET , FP0->FP0_TIPOSE) 

	RECLOCK("FP0",.F.)
	FP0->FP0_VALPRO := _NVALPROJ
 //	FP0->FP0_STATUS := "3" 						// PROPOSTA SEMPRE APROVADA 
	FP0->FP0_STATUS := "1"
	FP0->(MSUNLOCK()) 
ENDIF

IF EXISTBLOCK("LC001GRV")
	DO CASE
	CASE FP0->FP0_TIPOSE == "T" .AND. VALTYPE(ODLGCAR) == "O"
		ODLGCAR:ACOLS := EXECBLOCK("LC001GRV",.T.,.T.,{ODLGCAR:AHEADER, ODLGCAR:ACOLS, FP0->FP0_PROJET,_LALT})
	CASE ALLTRIM(FP0->FP0_TIPOSE) $ "E#G" .AND. VALTYPE(ODLGGUI) == "O"
		ODLGGUI:ACOLS := EXECBLOCK("LC001GRV",.T.,.T.,{ODLGGUI:AHEADER, ODLGGUI:ACOLS, FP0->FP0_PROJET,_LALT})
	CASE ALLTRIM(FP0->FP0_TIPOSE) $ "L#P" .AND. VALTYPE(ODLGPLA) == "O"
		ODLGPLA:ACOLS := EXECBLOCK("LC001GRV",.T.,.T.,{ODLGPLA:AHEADER, ODLGPLA:ACOLS, FP0->FP0_PROJET,_LALT})
	ENDCASE
	IF TYPE("_NCTRGRAVA") == "N"
		_NCTRGRAVA ++
	ENDIF
ENDIF

/*
IF FP0->FP0_TIPOSE == "T"
	IF VALTYPE(ODLGTRA) == "O" 					// SE O OBJETO JÁ FOI CRIADO
		IF VALTYPE(ODLGOBR) == "O" 				// SE O OBJETO JÁ FOI CRIADO
			ACOLS0 := {}
			FOR NPOS := 1 TO LEN(ODLGTRA:ACOLS)
				IF ! EMPTY(CSEQTRA)
					CSEQTRA  := ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_SEQTRA"})]
					CMUNORIT := ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNORI"})]
					CESTORIT := ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTORI"})]
				ENDIF
				AADD(ACOLS0,ACLONE(ODLGOBR:ACOLS[1]))
				ACOLS0[LEN(ACOLS0)][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })] := CSEQTRA
				ACOLS0[LEN(ACOLS0)][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := "OBRA: "+ALLTRIM(CMUNORIT)+" UF:"+ALLTRIM(CESTORIT)
			NEXT
			ODLGOBR:ACOLS := ACLONE(ACOLS0)
			ODLGOBR:OBROWSE:REFRESH()
		ENDIF
	ENDIF
ENDIF


IF EXISTBLOCK("LCTURGRV")						// --> PONTO DE ENTRADA APOS O PREENCHIMENTO DOS TURNOS.
	EXECBLOCK("LCTURGRV",.T.,.T.,{ ODLGGUI })
ELSE
	IF VALTYPE(OGETVT) == "O"
		INCPROC("ATUALIZANDO... TURNOS")
		FSALVARTUR("FPE",ACLONE(OGETVT:AHEADER),ACLONE(OGETVT:ACOLS))
	ENDIF
ENDIF
*/




IF NFOLDERPRO > 0
	INCPROC("ATUALIZANDO... PROJETOS")
	FSALVARPRO("FP0") 							// PROJETOS 
ENDIF


IF NFOLDEROBR > 0
	INCPROC("ATUALIZANDO... LOCALIDADES")
	FSALVAROBR("FP1",ACLONE(ODLGOBR:AHEADER),ACLONE(ODLGOBR:ACOLS))
ENDIF


//IF NFOLDERROT > 0
//	INCPROC("ATUALIZANDO... ROTAS")
//	FSALVARROT("ZA4",ACLONE(ODLGROT:AHEADER),ACLONE(ODLGROT:ACOLS))
//ENDIF


//IF NFOLDERTRE > 0
//	INCPROC("ATUALIZANDO... TRECHOS")
//	FSALVARTRE("FPD",ACLONE(ODLGTRE:AHEADER),ACLONE(ODLGTRE:ACOLS))
//ENDIF

//IF NFOLDERGUI > 0
//	INCPROC("ATUALIZANDO... EQUIPAMENTOS")
//	FSALVARGUI("FP4",ACLONE(ODLGGUI:AHEADER),ACLONE(ODLGGUI:ACOLS))
//ENDIF


IF NFOLDERPLA > 0
	INCPROC("ATUALIZANDO... LOCAÇÕES")
	FSALVARPLA("FPA",ACLONE(ODLGPLA:AHEADER),ACLONE(ODLGPLA:ACOLS))
ENDIF


//IF NFOLDERTRA > 0
//	INCPROC("ATUALIZANDO... LOCALIDADES")
//	FSALVAROBR("FP1",ACLONE(ODLGOBR:AHEADER),ACLONE(ODLGOBR:ACOLS))

//	INCPROC("ATUALIZANDO... TRANSPORTES")
//	FSALVARTRA("ZA6",ACLONE(ODLGTRA:AHEADER),ACLONE(ODLGTRA:ACOLS))
//ENDIF

//IF NFOLDERCAR > 0
//	INCPROC("ATUALIZANDO... CARGAS")
//	FSALVARCAR("ZA7",ACLONE(ODLGCAR:AHEADER),ACLONE(ODLGCAR:ACOLS))
//ENDIF

//IF NFOLDERCON > 0
//	INCPROC("ATUALIZANDO... CONJ.TRANSPORTADOR")
//	FSALVARCON("FP8",ACLONE(ODLGCON:AHEADER),ACLONE(ODLGCON:ACOLS))
//ENDIF


IF NFOLDERCUS > 0
	INCPROC("ATUALIZANDO... CUSTOS")
	FSALVARCUS("FQ8",ACLONE(ODLGCUS:AHEADER),ACLONE(ODLGCUS:ACOLS))
ENDIF

IF NFOLDERFOL > 0
	INCPROC("ATUALIZANDO... FOLLOW-UP")
	FSALVARFOL("FP9")  							// FOLLOW-UP
ENDIF


IF NFOLDERDOC > 0
	INCPROC("ATUALIZANDO... DOCUMENTOS")
	FSALVARDOC("FPB",ACLONE(ODLGDOC:AHEADER),ACLONE(ODLGDOC:ACOLS))
ENDIF

//IF NFOLDERCNJ > 0
//	INCPROC("ATUALIZANDO... CONJUNTO TRANSPORTE P/ EQUIPAMENTOS")
//	IF OFOLDER:NOPTION == NFOLDERCNJ
//		OCNJACOLS:SETDATA(ODLGCNJ:ACOLS)
//	ENDIF
//	FSALVARCNJ("FPS",ACLONE(ODLGCNJ:AHEADER),ACLONE(OCNJACOLS:GETDATA()))			// SALVAR BECHANGE CONJUNTO TRANSPORTADOR 
//ENDIF


IF NFOLDERCNP > 0
	INCPROC("ATUALIZANDO... CONJUNTO TRANSPORTE P/ LOCAÇÕES")
	//IF OFOLDER:NOPTION == NFOLDERCNP
	//	OCNPACOLS:SETDATA(ODLGCNP:ACOLS)
	//ENDIF
	//FSALVARCNP("FQ7",ACLONE(ODLGCNP:AHEADER),OCNPACOLS:acols)) 			// SALVAR BECHANGE CONJUNTO PLATAFORMA 
	FSALVARCNP("FQ7",ACLONE(ODLGCNP:AHEADER),ODLGCNP:acols) 			// SALVAR BECHANGE CONJUNTO PLATAFORMA 
ENDIF


IF NFOLDERRES > 0
	INCPROC("ATUALIZANDO... RESPONSABILIDADES")
	FSALVARRES("FP6",ACLONE(ODLGRES:AHEADER),ACLONE(ODLGRES:ACOLS))
ENDIF

/*
DO CASE
CASE FP0->FP0_TIPOSE == "T" .AND. VALTYPE(ODLGTRA) == "O"
	DELETVIAGE()   							// VERIFICA SE ALGUMA VIAGEM FOI DELETADA, E DELETA REGISTROS DAS OUTRAS ABAS RELACIONADAS A VIAGEM DELETADA.
	IF EXISTBLOCK("LC001GRV")
		EXECBLOCK("LC001GRV",.T.,.T.,{ODLGCAR:AHEADER, ODLGCAR:ACOLS, FP0->FP0_PROJET,.T.})
	ENDIF
CASE ALLTRIM(FP0->FP0_TIPOSE) $ "E#G" .AND. VALTYPE(ODLGGUI) == "O"
	DELETVIAGE()   							// VERIFICA SE ALGUMA VIAGEM FOI DELETADA, E DELETA REGISTROS DAS OUTRAS ABAS RELACIONADAS A VIAGEM DELETADA.
	IF EXISTBLOCK("LC001GRV")
		EXECBLOCK("LC001GRV",.T.,.T.,{ODLGGUI:AHEADER, ODLGGUI:ACOLS, FP0->FP0_PROJET,.T.})
	ENDIF
CASE ALLTRIM(FP0->FP0_TIPOSE) $ "L#P" .AND. VALTYPE(ODLGPLA) == "O"
	DELETVIAGE()   							// VERIFICA SE ALGUMA VIAGEM FOI DELETADA, E DELETA REGISTROS DAS OUTRAS ABAS RELACIONADAS A VIAGEM DELETADA.
	IF EXISTBLOCK("LC001GRV")
		EXECBLOCK("LC001GRV",.T.,.T.,{ODLGPLA:AHEADER, ODLGPLA:ACOLS, FP0->FP0_PROJET,.T.})
	ENDIF
ENDCASE
*/
msgalert("Registros salvos com sucesso!","Processo de gravação.")
RestArea(_aArea)
RETURN NIL 


/*/{PROTHEUS.DOC} FSALVARPRO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR A GRAVAÇÃO DOS PROJETOS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS,NOME DA TABELA A SER SALVA
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARPRO(CALIAS)				// PROJETOS
// ======================================================================= \\

LOCAL _CPROJET  := PROJETO()					// RESTAURA ZA0 E RETORNA NÚMERO DO PROJETO
LOCAL _F        := 0 
LOCAL _aArea    := GetArea()

DBSELECTAREA(CALIAS)
DBSETORDER(1)  									// FP0_FILIAL+FP0_PROJET+FP0_NUM

DBSEEK( XFILIAL(CALIAS) + _CPROJET)

IF NOPC == 5  									// 5=EXCLUI
	(CALIAS)->(RECLOCK(CALIAS,.F.))
	(CALIAS)->(DBDELETE())
	(CALIAS)->(MSUNLOCK())
	RETURN .T.
ENDIF

IF NOPC==3 										// 3=INCLUI
	(CALIAS)->(RECLOCK(CALIAS,.T.))
ELSE
	(CALIAS)->(RECLOCK(CALIAS,.F.))
ENDIF
(CALIAS)->FP0_FILIAL := XFILIAL(CALIAS)
(CALIAS)->FP0_PROJET := _CPROJET  				// NRO.PROJETO
(CALIAS)->FP0_COD    := SUBSTR(_CPROJET,7,5)
(CALIAS)->FP0_STATUS := CSTATUS 				// STATUS
(CALIAS)->FP0_CODCON := CCODCONCO 				// COD.CONCORR.
(CALIAS)->FP0_VALCON := NVALCONCO 				// VR.CONCORR.
(CALIAS)->FP0_VALLOC := NVALCONCOL 				// VR.CONCORR.LOCAÇÃO
FOR _F := 1 TO LEN(ACAMPOZA0)
	CVARANT := CALIAS + "->" + ACAMPOZA0[_F]
	CVARPOS := "M->"		 + ACAMPOZA0[_F]
	&(CVARANT) := &(CVARPOS)
NEXT _F 
(CALIAS)->(MSUNLOCK())

IF CSTATUS == "C" .OR. CSTATUS == "B" .OR. CSTATUS == "8" .OR. CSTATUS == "5" .OR. CSTATUS == ""
    BLOQCLASS(FP0->FP0_PROJET)  				// BLOQUEIO DA CLASSE DE VALOR DO PROJETO
ENDIF

DBSELECTAREA("FP0") 

RestArea(_aArea)
RETURN .T. 


/*/{PROTHEUS.DOC} FOBRA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR AS VARIÁVEIS DE MEMÓRIA PARA O USO DO BECHANGE.

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS,NOME DA TABELA A SER SALVA
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FOBRA() 
// ======================================================================= \\

LOCAL LRET := .T.
LOCAL NX   := 0 

COBRA   := SPACE(03)
CORIGEM := SPACE(06)
CDESTIN := SPACE(06)
CMUNORI := SPACE(25)
CMUNDES := SPACE(25)

CSEQTRA := SPACE(03)
CSEQGUI := SPACE(03)
CSEQGRU := SPACE(03)
CSEQCAR := SPACE(03)

XOBRA   := SPACE(03)

DO CASE
CASE FP0->FP0_TIPOSE == "T" .AND. VALTYPE(ODLGTRA)=="O" 	// SE O OBJETO JÁ FOI CRIADO
	COBRA   := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_SEQTRA"})]
	CORIGEM := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ORIGEM"})]
	CDESTIN := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DESTIN"})]
	CMUNORI := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNORI"})]
	CMUNDES := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNDES"})]
	CESTORI := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTORI"})]
	CESTDES := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDES"})]
	XOBRA   := COBRA+" - "+TRIM(CMUNORI)+" - "+CESTORI

CASE VALTYPE(ODLGOBR)=="O" .AND. VALTYPE(ODLGROT)=="O" 		// SE O OBJETO JÁ FOI CRIADO
	COBRA   := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
	CORIGEM := ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_ORIGEM"})]
	CDESTIN := ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_DESTIN"})]
	CMUNORI := ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_MUNORI"})]
	CMUNDES := ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_MUNDES"})]
	CESTORI := ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_ESTORI"})]
	CESTDES := ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_ESTDES"})]
	XOBRA   := COBRA+" - "+ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})]

CASE VALTYPE(ODLGOBR)=="O" 									// SE O OBJETO JÁ FOI CRIADO
	COBRA   := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
	XOBRA   := COBRA+" - "+ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})]

CASE VALTYPE(ODLGTRA)=="O" 									// SE O OBJETO JÁ FOI CRIADO
	COBRA   := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_SEQTRA"})]
	CORIGEM := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ORIGEM"})]
	CDESTIN := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DESTIN"})]
	CMUNORI := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNORI"})]
	CMUNDES := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNDES"})]
	CESTORI := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTORI"})]
	CESTDES := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDES"})]
	XOBRA   := COBRA+" - "+CMUNORI+" - "+CESTORI

OTHERWISE
	IF VALTYPE(ODLGOBR)=="O"
		XOBRA := COBRA+" - .:. - "+ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})]
	ENDIF

ENDCASE

DO CASE
CASE FP0->FP0_TIPOSE == "T" .AND. VALTYPE(ODLGTRA)=="O"  	// SE O OBJETO JÁ FOI CRIADO
	CSEQTRA := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_SEQTRA"})]
	IF EMPTY(CSEQTRA)
	   CSEQTRA := "001"
	ENDIF

CASE FP0->FP0_TIPOSE == "E" .AND. VALTYPE(ODLGGUI)=="O"  	// SE O OBJETO JÁ FOI CRIADO
	CSEQGUI := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_SEQGUI"})]
	IF EMPTY(CSEQGUI)
	   CSEQGUI := "001"
	ENDIF

CASE FP0->FP0_TIPOSE == "L" .AND. VALTYPE(ODLGPLA)=="O"  	// SE O OBJETO JÁ FOI CRIADO
	IF ODLGPLA:LNEWLINE .AND. EMPTY(ALLTRIM(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]))
		IF LEN(OPLA_COLS) > LEN(ODLGPLA:ACOLS)
			CSEQGRU  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
			NVSEQGRU := 0
			CVSEQGRU := ""
			FOR NX := 1 TO LEN(OPLA_COLS)
			    IF ALLTRIM(COBRA) == OPLA_COLS[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
			       NVSEQGRU := VAL(OPLA_COLS[NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})])
				ENDIF
			NEXT NX
			CVSEQGRU := STRZERO(NVSEQGRU+1,3)

			NPOS := ASCAN(ODLGPLA:ACOLS,{|X|ALLTRIM(X[2])==CVSEQGRU})
			IF NPOS == 0
			   CSEQGRU := CVSEQGRU
			ENDIF
		ELSE
			IF ODLGPLA:NAT > 1
				IF EXISTBLOCK("LC01ORDP") 	// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA SEQUENCIA DE EQUIPAMENTO
					CSEQGRU := EXECBLOCK("LC01ORDP",.T.,.T.,{ CSEQGRU, ODLGPLA}) 
				ELSE
					CSEQGRU := SOMA1(ODLGPLA:ACOLS[ODLGPLA:NAT-1][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})])
				ENDIF
			ELSE
				CSEQGRU := STRZERO(LEN(ODLGPLA:ACOLS),3)
			ENDIF
		ENDIF
	ELSE
		CSEQGRU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]

		IF ODLGPLA:NAT > 1 .AND. ODLGPLA:LNEWLINE
			IF EXISTBLOCK("LC01ORDP") 	// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA SEQUENCIA DE EQUIPAMENTO
				CSEQGRU := EXECBLOCK("LC01ORDP",.T.,.T.,{ CSEQGRU, ODLGPLA}) 
			ELSE
				CSEQGRU := SOMA1(ODLGPLA:ACOLS[ODLGPLA:NAT-1][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})])
			ENDIF
		ENDIF
	ENDIF
	IF EMPTY(CSEQGRU)
	   CSEQGRU := "001"
	ENDIF
ENDCASE

IF FP0->FP0_TIPOSE == "T" .AND. VALTYPE(ODLGCAR)=="O"  		// SE O OBJETO JÁ FOI CRIADO
	CSEQCAR := ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQCAR"})]
	IF EMPTY(CSEQCAR)
	   CSEQCAR := "001"
	ENDIF
ENDIF

IF EMPTY(COBRA)
	COBRA := "001"
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} ZA0MUDA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR AS VARIÁVEIS DE MEMÓRIA PARA O USO DO BECHANGE.

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM NINDO, FOLDER DESTINO
@PARAM NESTOU, FOLDER ATUAL
@PARAM ODLG, OBJETO DAS INTERFACES
@PARAM OFOLDER, OBJETO DO FOLDER DOS PROJETOS
@RETURN RETORNO LÓGICO COM O RESULTADO DA OPERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00111(NINDO , NESTOU , ODLG , OFOLDER) 
// ======================================================================= \\

LOCAL ACOLS 
LOCAL LRET := .T.
LOCAL _NX

ACOLS := {} 

SETKEY(VK_F12 , NIL) 

DO CASE
CASE NESTOU==NFOLDERGUI
	FACUMUGUI()

CASE NESTOU==NFOLDERTRA
	FACUMUTRA()

CASE NESTOU==NFOLDERROT
	FACUMUROT()

CASE NESTOU==NFOLDERTRE
	FACUMUTRE()
	LRET := FVALIDATRE() 

CASE NESTOU==NFOLDERPLA
	FACUMUPLA()

CASE NESTOU==NFOLDERCAR
	FACUMUCAR()

CASE NESTOU==NFOLDERCON
	FACUMUCON()

CASE NESTOU==NFOLDERRES
	FACUMURES()

CASE NESTOU==NFOLDERCUS
	FTRAZMEM(.F.) 								// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS
	FACUMUCUS()

CASE NESTOU==NFOLDERDOC
	FACUMUDOC()

CASE NESTOU==NFOLDERCNJ							// BECHANGE CONJUNTO TRANSPORTADOR EQUIPAMENTO 
	OCNJACOLS:SETDATA(ODLGCNJ:ACOLS) 

CASE NESTOU==NFOLDERCNP							// BECHANGE CONJUNTO TRANSPORTADOR PLATAFORMA 
	OCNPACOLS:SETDATA(ODLGCNP:ACOLS)
ENDCASE

IF VALTYPE(ODLGGUI)=="O"
	FTRAZGUI()
	MUDAGUIB()
	LOCA00177()
	ODLGGUI:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGTRA)=="O"
	FTRAZTRA()
	MUDATRAB()
	ODLGTRA:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGROT)=="O"
	FTRAZROT()
	MUDAROTB()
	ODLGROT:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGTRE)=="O"
	FTRAZTRE()
	MUDATREB()
	ODLGTRE:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGPLA)=="O"
	FTRAZPLA()
	LOCA00141()
	ODLGPLA:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGCAR)=="O"
	FTRAZCAR()
	MUDACARB()
	ODLGCAR:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGCON)=="O"
	FTRAZCON()
	MUDACONB()
	ODLGCON:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGRES)=="O"
	FTRAZRES()
	MUDARESB()
	ODLGRES:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGCUS)=="O"
	FTRAZCUS()
	LOCA00139()
	FTRAZMEM(.T.) 								// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS 
	FCALCCUS()
	SUMVALRES() 								// SOMA VALORES DAS RESPONSABILIDADES
	ODLGCUS:OBROWSE:REFRESH()
ENDIF

IF VALTYPE(ODLGDOC)=="O"
	FTRAZDOC()
	LOCA00146()
	ODLGDOC:OBROWSE:REFRESH()
ENDIF

DO CASE
CASE NINDO == NFOLDERCUS						// ABA BASE DE CALCULO
	IF VALTYPE(ODLGCAR) == "O"  				// SE O OBJETO JÁ FOI CRIADO
		FOBRA()
		CJUNTO := ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_JUNTO"})]
		IF !EMPTY(CJUNTO)

			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   		Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 		{"A carga: "+CSEQCAR+" vai junto com a carga: "+CJUNTO})
			
			RETURN .F.
		ENDIF
	ENDIF

	FCALCTRE()
	FCALCTOTAL()
	FDISPTRAN()
	FDISPGUIN()
	FDISPGRUA()

	_nTempX01 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
	_nTempX02 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
	_nTempX03 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ACRESC"})]
	_nTempX04 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})]
	_nTempX05 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})]
	_nTempX06 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PDESC"})]
	_nTempX07 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
	_cTempX08 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUIM"})]
	_cTempX09 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUID"})]
	_nTempX10 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})]
	_nTempX11 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})]
	_nTempX12 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"})]
	_nTempX13 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERISS"})]
	_nTempX14 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS"})]
	_nTempX15 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]
	If _cTempX08 == "L"
		_cTempX08 := "Empresa"
	ElseIf _cTempX08 == "C"
		_cTempX08 := "Cliente"
	Else
		_cTempX08 := ""
	EndIF

	If _cTempX09 == "L"
		_cTempX09 := "Empresa"
	ElseIf _cTempX09 == "C"
		_cTempX09 := "Cliente"
	Else
		_cTempX09 := ""
	EndIF
	_oTempX01:Refresh()
	_oTempX02:Refresh()
	_oTempX03:Refresh()
	_oTempX04:Refresh()
	_oTempX05:Refresh()
	_oTempX06:Refresh()
	_oTempX07:Refresh()
	_oTempX08:Refresh()
	_oTempX09:Refresh()
	_oTempX10:Refresh()
	_oTempX11:Refresh()
	_oTempX12:Refresh()
	_oTempX13:Refresh()
	_oTempX14:Refresh()
	_oTempX15:Refresh()





	IF FP0->FP0_TIPOSE == "E"
		OVALCUSIG:SETFOCUS()
	ENDIF




CASE NINDO == NFOLDERCON
	IF VALTYPE(ODLGCAR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		FOBRA()
		CJUNTO := ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_JUNTO"})]
		IF ! EMPTY(CJUNTO)
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   		Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 		{"A carga: "+CSEQCAR+" vai junto com a carga: "+CJUNTO})
			RETURN .F.
		ENDIF
	ENDIF

CASE NINDO == NFOLDERCNJ						// BECHANGE CONJUNTO TRANSPORTADOR 
	ODLGCNJ:ACOLS := ACLONE(OCNJACOLS:GETDATA("FPS_OBRA=='"+COBRA+"' .AND. FPS_SEQGUI='"+CSEQGUI+"'"))
	MUDAZLW()

CASE NINDO == NFOLDERCNP						// BECHANGE CONJUNTO PLATAFORMA 
	ODLGCNP:ACOLS := ACLONE(OCNPACOLS:GETDATA("FQ7_OBRA=='"+COBRA+"' .AND. FQ7_SEQGUI='"+CSEQGRU+"'"))

	// FRANK 23/09/20
	// TRATAMENTO PARA SABER SE A ZA1 ESTA DELETADA.
	IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
		FOR _NX := 1 TO LEN(ODLGCNP:ACOLS)
			ODLGCNP:ACOLS[_NX][LEN(ODLGCNP:AHEADER)+1] := .T.
		NEXT
	ELSE
		FOR _NX := 1 TO LEN(ODLGCNP:ACOLS)
			ODLGCNP:ACOLS[_NX][LEN(ODLGCNP:AHEADER)+1] := .F.
		NEXT
	ENDIF

	MUDAZUC()

CASE NINDO == NFOLDERPLA
	SETKEY(VK_F12 , {|| LOCA00188()}) 

ENDCASE

FOBRA()

IF VALTYPE(ODLGCON)=="O"
	FCALCCON()
	FDISPCON()
ENDIF
FDISPCAR()
FCALCTRE()

FOBRA()
OOBRA:REFRESH()

OFOLDER:REFRESH()
ODLG:REFRESH()

SETFOCUS()

RETURN LRET 


/*/{PROTHEUS.DOC} FHEADER
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR OS CAMPOS UTILIZADOS NOS GRIDES

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS, TABELA QUE SERÁ UTILIZADA
@PARAM CCAMPOSSIM, INDICA QUAIS CAMPOS SERÃO APRESENTADOS
@PARAM CCAMPOSNAO, INDICA QUAIS CAMPOS NÃO SERÃO APRESENTADOS
@RETURN RETORNO COM O ARRAY A SER UTILIZADO NA MSNEWGETDADOS.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FHEADER( CALIAS , CCAMPOSSIM , CCAMPOSNAO) 
// ======================================================================= \\

LOCAL   ATABAUX
LOCAL   AHEADER    := {}

DEFAULT CCAMPOSSIM := ""
DEFAULT CCAMPOSNAO := ""

CCAMPOSSIM := UPPER( ALLTRIM(CCAMPOSSIM) )
CCAMPOSNAO := UPPER( ALLTRIM(CCAMPOSNAO) )

SX3->( DBSETORDER(1) )
SX3->( DBSEEK( CALIAS, .T. ) )
WHILE ! SX3->( EOF() ) .AND. SX3->X3_ARQUIVO == CALIAS

	IF ! X3USO(SX3->X3_USADO) 					// NÃO ESTÁ EM USO
		SX3->(DBSKIP())
		LOOP
	ENDIF

	IF UPPER( ALLTRIM( SX3->X3_CAMPO ) ) $ CCAMPOSNAO	// ESTÁ EM CAMPOSNÃO
		SX3->(DBSKIP())
		LOOP
	ENDIF

	IF ! EMPTY( CCAMPOSSIM ) .AND. ! UPPER( ALLTRIM( SX3->X3_CAMPO ) ) $ CCAMPOSSIM		// NÃO É EM CAMPOSSIM
		SX3->(DBSKIP())
		LOOP
	ENDIF

	ATABAUX := {}
	AADD(ATABAUX , TRIM(X3TITULO()))
	AADD(ATABAUX , SX3->X3_CAMPO   )
	AADD(ATABAUX , SX3->X3_PICTURE )
	AADD(ATABAUX , SX3->X3_TAMANHO )
	AADD(ATABAUX , SX3->X3_DECIMAL )
	AADD(ATABAUX , SX3->X3_VALID   )
	AADD(ATABAUX , SX3->X3_USADO   )
	AADD(ATABAUX , SX3->X3_TIPO    )
	AADD(ATABAUX , SX3->X3_F3      )
	AADD(ATABAUX , SX3->X3_CONTEXT )
	AADD(ATABAUX , SX3->X3_CBOX    )
	AADD(ATABAUX , SX3->X3_RELACAO )
	AADD(ATABAUX , SX3->X3_WHEN    )
	AADD(ATABAUX , SX3->X3_VISUAL  )
	IF EMPTY(ALLTRIM(SX3->X3_VLDUSER))
		AADD(ATABAUX , "LOCA00147('"+UPPER(ALLTRIM(SX3->X3_CAMPO))+"')")
	ELSE
		AADD(ATABAUX , SX3->X3_VLDUSER )
	ENDIF
	AADD(ATABAUX , SX3->X3_PICTVAR     )
	AADD(ATABAUX , SX3->X3_OBRIGAT     )

	AADD(AHEADER , ATABAUX             )

	SX3->(DBSKIP())
ENDDO 

RETURN ACLONE(AHEADER) 


/*/{PROTHEUS.DOC} FCOLS
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALIMENTAR O CONTEÚDO UTILIZADO NOS GRIDES

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM AHEADER, INDICA OS CAMPOS DA MSNEWGETDADOS
@PARAM CALIAS, INDICA QUAL TABELA ESTAMOS ATUANDO
@PARAM NINDICE, INDICA O INDICE QUE SERÁ UTILIZADO PARA COMPOR OS ELEMENTOS DO GRIDE
@PARAM CCHAVE, CHAVE DE BUSCA DO REGISTRO NA TABELA ORIGEM.
@PARAM CCONDICAO, CONDIÇÃO NA ESTRUTURA DE REPETIÇÃO PARA A LOCALIZAÇÃO DO REGISTRO.
@PARAM CFILTRO, FILTRO ADICIONAL PARA SEPARAR OS REGISTROS VÁLIDOS NA ESTRUTURA DE REPETIÇÃO.
@RETURN RETORNO COM O ARRAY A SER UTILIZADO NA MSNEWGETDADOS.
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCOLS(AHEADER, CALIAS, NINDICE, CCHAVE, CCONDICAO, CFILTRO) 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0
LOCAL ACOLS     := {}
LOCAL CALIASANT := ALIAS()

DBSELECTAREA(CALIAS)

(CALIAS)->(DBSETORDER(NINDICE))
(CALIAS)->(DBSEEK(CCHAVE,.T.))
WHILE (CALIAS)->(!EOF() .AND. &CCONDICAO)
	IF !(CALIAS)->(&CFILTRO)
		(CALIAS)->(DBSKIP())
        LOOP
	ENDIF
	ACOLS0 := {} 
	FOR NPOS:=1 TO LEN(AHEADER)
		IF !AHEADER[NPOS,10]=="V"  				// X3_CONTEXT
			(CALIAS)->(AADD(ACOLS0,FIELDGET(FIELDPOS(AHEADER[NPOS,2]))))
		ELSE
			(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
		ENDIF
	NEXT
	AADD(ACOLS0,.F.  )  						// DELETED
	AADD(ACOLS,ACOLS0)
	(CALIAS)->(DBSKIP())
ENDDO 

IF EMPTY(ACOLS)
	ACOLS0 := {}
	FOR NPOS := 1 TO LEN(AHEADER)
		(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
	NEXT
	AADD(ACOLS0 , .F.)  						// DELETED
	AADD(ACOLS,ACOLS0)

	// Banco de conhecimento no follow-up - Frank 16/03/21
	If calias == "AC9"
		// Campo AC9_DESCRIC deixar em branco quando não localizar movimentos.
		ACOLS[1][1] := ""
	EndIf


ENDIF

ACOLS0 := {}
FOR NPOS := 1 TO LEN(AHEADER)
	(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
NEXT
AADD( ACOLS0, .F. )  							// DELETED

DO CASE
CASE CALIAS=="FP1"
	OOBR_COLS0 := {}
	AADD(OOBR_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="ZA4"
	OROT_COLS0 := {}
	AADD(OROT_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FPD"
	OTRE_COLS0 := {}
	AADD(OTRE_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="ZA6"
	OTRA_COLS0 := {}
	AADD(OTRA_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FP4"
	OGUI_COLS0 := {}
	AADD(OGUI_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FP8"
	OCON_COLS0 := {}
	AADD(OCON_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="ZA7"
	OCAR_COLS0 := {}
	AADD(OCAR_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FP6"
	ORES_COLS0 := {}
	AADD(ORES_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FQ8"
	OCUS_COLS0 := {}
	AADD(OCUS_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FPB"
	ODOC_COLS0 := {}
	AADD(ODOC_COLS0,ACLONE(ACOLS0))

CASE CALIAS=="FP9"
	OFOL_COLS0 := {}
	AADD(OFOL_COLS0,ACLONE(ACOLS0))

CASE CALIAS == "FPA"
	OPLA_COLS0 := {}
	AADD(OPLA_COLS0, ACLONE(ACOLS0))

ENDCASE

DBSELECTAREA(CALIASANT)

RETURN ACLONE(ACOLS)


/*/{PROTHEUS.DOC} FGRAVATUDO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE GRAVAR TODOS OS ELEMENTOS UTILIZADOS NA MSNEWGETDADOS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS, INDICA QUAL TABELA ESTAMOS ATUANDO
@PARAM AHEADER, INDICA OS CAMPOS DA MSNEWGETDADOS
@PARAM ACOLS, ARRAY COM OS ELEMENTOS A SEREM GRAVADOS.
@RETURN RETORNO LÓGICO COM O RESULTADO DO PROCESSAMENTO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
STATIC FUNCTION FGRAVATUDO(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> GRAVA TODOS OS CAMPOS DO ACOLS

LOCAL NPOS
LOCAL CCAMPO

FOR NPOS := 1 TO LEN(AHEADER)
	CCAMPO := AHEADER[NPOS,2]
	(CALIAS)->(&CCAMPO) := ACOLS[NPOS]
NEXT

RETURN .T.


/*/{PROTHEUS.DOC} FTRAZCOMP
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_COMPRI

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_COMPRI
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZCOMP(CCOD)
RETURN 0 // removido da 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_COMPRI")) 


/*/{PROTHEUS.DOC} FTRAZALTU
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_ALTUR

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_ALTUR
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZALTU(CCOD)
RETURN 0 // removido na 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_ALTUR" ))


/*/{PROTHEUS.DOC} FTRAZLARG
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_LARGU

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_LARGU
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZLARG(CCOD)
RETURN 0 // removido da 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_LARGU" ))


/*/{PROTHEUS.DOC} FTRAZPESO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_PESO

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_PESO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZPESO(CCOD)
RETURN 0 // removido da 94 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_PESO"  ))

/*/{PROTHEUS.DOC} FTRAZEIXO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_LCEX

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_LCEX
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZEIXO(CCOD)
RETURN 0 // removido na 94 (VAL(POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_LCEX")))


/*/{PROTHEUS.DOC} FTRAZVRDIA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_VRDIA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_VRDIA
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZVRDIA(CCOD)  	// VR.POR DIA
RETURN 0 // removido na 94 Frank em 26/02/21 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_VRDIA" ))

/*/{PROTHEUS.DOC} FTRAZVRKM
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CONTEÚDO DO CAMPO T9_VRKM

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CCOD, CÓDIGO DO BEM
@RETURN RETORNO COM O CONTEÚDO DO CAMPO T9_VRKM
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZVRKM(CCOD)  	// VR.POR KM
RETURN 0 // removido na 94 Frank em 26/02/21 (POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_VRKM"  ))


// ======================================================================= \\

/*/{PROTHEUS.DOC} CADZA0
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00112();FCAD000("FP0");RETURN

/*/{PROTHEUS.DOC} CADZA1
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00113();FCAD000("FP1");RETURN

/*/{PROTHEUS.DOC} CADZA2
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00114();FCAD000("FP2");RETURN

/*/{PROTHEUS.DOC} CADZA3
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00115();FCAD000("FP3");RETURN

/*/{PROTHEUS.DOC} CADZA4
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00116();FCAD000("ZA4");RETURN

/*/{PROTHEUS.DOC} CADZA5
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00117();FCAD000("FP4");RETURN

/*/{PROTHEUS.DOC} CADZA6
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00118();FCAD000("ZA6");RETURN

/*/{PROTHEUS.DOC} CADZA7
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00119();FCAD000("ZA7");RETURN

/*/{PROTHEUS.DOC} CADZA8
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00120();FCAD000("FP5");RETURN

/*/{PROTHEUS.DOC} CADZA9
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00121();FCAD000("FQ8");RETURN

/*/{PROTHEUS.DOC} CADZAA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00122();FCAD000("FP6");RETURN

/*/{PROTHEUS.DOC} CADZAB
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00123();FCAD000("FP7");RETURN

/*/{PROTHEUS.DOC} CADZAC
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00124();FCAD000("ZAC");RETURN

/*/{PROTHEUS.DOC} CADZAE
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00125();FCAD000("FP8");RETURN

/*/{PROTHEUS.DOC} CADZAF
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00126();FCAD000("FP9");RETURN

/*/{PROTHEUS.DOC} CADZAG
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00127();FCAD000("FPA");RETURN

/*/{PROTHEUS.DOC} CADZAH
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00128();FCAD000("ZAH");RETURN

/*/{PROTHEUS.DOC} CADZAI
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00129();FCAD000("FPB");RETURN

/*/{PROTHEUS.DOC} CADZAJ
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00130();FCAD000("FPC");RETURN

/*/{PROTHEUS.DOC} CADZAK
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00131();FCAD000("ZAK");RETURN

/*/{PROTHEUS.DOC} CADZAL
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00132();FCAD000("ZAL");RETURN

/*/{PROTHEUS.DOC} CADZAM
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00133();FCAD000("FPD");RETURN

/*/{PROTHEUS.DOC} CADZAN
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00134();FCADZAN("ZAN");RETURN

/*/{PROTHEUS.DOC} CADZAO
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00135();FCAD000("ZAO");RETURN

/*/{PROTHEUS.DOC} CADZAP
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00136();FCAD000("ZAP");RETURN

/*/{PROTHEUS.DOC} CADZAX
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
FUNCTION LOCA00137();FCAD000("ZAX");RETURN

/*/{PROTHEUS.DOC} CADZAG
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE RETORNAR COM O CADASTRO DA TABELA

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00138();FCAD000("ST9");RETURN


/*/{PROTHEUS.DOC} FCAD000
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE REALIZAR O CADASTRO DAS TABELAS INDICADAS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM
@RETURN
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
STATIC FUNCTION FCAD000(CALIAS)
// ======================================================================= \\

PRIVATE CCADASTRO := "MANUTENÇÃO DE ARQUIVOS ("+CALIAS+")"
PRIVATE CSTRING   := CALIAS
PRIVATE AROTINA   := FMONTAROT0(CALIAS)  // MONTA O AROTINA
PRIVATE CDELFUNC  := ".T."

DBSELECTAREA(CSTRING)
DBSETORDER(1)
MBROWSE(6,1,22,75,CSTRING)

RETURN NIL


/*/{PROTHEUS.DOC} FMONTAROT0
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DA MONTAGEM DO AROTINA DO CADASTRO DAS TABELAS AUXILIARES

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CALIAS, INDICAÇÃO DA TABELA DO PROCESSAMENTO
@RETURN AROTINA
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FMONTAROT0(CALIAS)  	// MONTA O AROTINA
// ======================================================================= \\

LOCAL AROTINA := {}

IF CNIVEL>=5
	AADD(AROTINA,{"PESQUISAR"       ,"AXPESQUI"  ,0,1})
	AADD(AROTINA,{"VISUALIZAR"      ,"AXVISUAL"  ,0,2})
	AADD(AROTINA,{"INCLUIR"         ,"AXINCLUI"  ,0,3})
	AADD(AROTINA,{"ALTERAR"         ,"AXALTERA"  ,0,4})
	AADD(AROTINA,{"EXCLUIR"         ,"AXDELETA"  ,0,5})
ELSE
	AADD(AROTINA,{"PESQUISAR"       ,"AXPESQUI"  ,0,1})
	AADD(AROTINA,{"VISUALIZAR"      ,"AXVISUAL"  ,0,2})
ENDIF

IF UPPER(CALIAS)==UPPER("LOCA00115")
	AROTINA := {}
	AADD(AROTINA,{"PESQUISAR"       ,"AXPESQUI"  ,0,1})
	AADD(AROTINA,{"VISUALIZAR"      ,"AXVISUAL"  ,0,2})
	AADD(AROTINA,{"INCLUIR"         ,"LOCA031",0,3})
	AADD(AROTINA,{"ALTERAR"         ,"LOCA03101",0,4})
	AADD(AROTINA,{"EXCLUIR"         ,"AXDELETA"  ,0,5})
ENDIF

RETURN AROTINA


/*/{PROTHEUS.DOC} FMONTACAR
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DA MONTAGEM DA TELA COM OS DADOS DO CONJUNTO TRANSPORTADOR

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM NFOLDER, INDICA A POSIÇÃO DO FOLDER
@PARAM NLIN1, POSIÇÃO DE TELA
@PARAM NCOL1, POSIÇÃO DE TELA
@PARAM NLIN2, POSIÇÃO DE TELA
@PARAM NCOLS2, POSIÇÃO DE TELA
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FMONTACAR(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\

LOCAL NLINS1
LOCAL NCOLS1
LOCAL NLING1
LOCAL NCOLG1

NLINS1 := NLIN2+020
NCOLS1 := NCOL1+020
NLING1 := NLIN2+019
NCOLG1 := NCOL1+077

NCOLS2 := NCOLS1+118
NCOLS3 := NCOLS2+118
NCOLS4 := NCOLS3+118

NCOLG2 := NCOLG1+118
NCOLG3 := NCOLG2+118
NCOLG4 := NCOLG3+118

NLINA  := 010
NPOS   := 0

IF VALTYPE(ODLGCON)=="O"
	FCALCCON()
ENDIF

CLABEL := " DIMENSÕES CONJUNTO TRANSPORTADOR "

NPOS   := 0
@ NLINS1+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("Comprimento ====>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS2 SAY OEMTOANSI("Largura ====>"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS3 SAY OEMTOANSI("Altura ====>"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS4 SAY OEMTOANSI("Peso ====>"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

NPOS:=0
@ NLING1+(NLINA*(++NPOS-1)),NCOLG1 MSGET OCOMPCART  VAR NCOMPCART  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG2 MSGET OLARGCART  VAR NLARGCART  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG3 MSGET OALTUCART  VAR NALTUCART  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG4 MSGET OPESOCART  VAR NPESOCART  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"

@ NLINS1-010,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CLABEL := " DIMENSÕES CARGAS "
NPOS++
NPOSAUX := NPOS
NLINAUX := NLINS1+(NLINA*(NPOSAUX))
@ NLINS1+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("Comprimento ====>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS2 SAY OEMTOANSI("Largura ====>"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS3 SAY OEMTOANSI("Altura ====>"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS4 SAY OEMTOANSI("Peso ====>"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

NPOS := NPOSAUX
@ NLING1+(NLINA*(++NPOS-1)),NCOLG1 MSGET OCOMPCARC  VAR NCOMPCARC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG2 MSGET OLARGCARC  VAR NLARGCARC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG3 MSGET OALTUCARC  VAR NALTUCARC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG4 MSGET OPESOCARC  VAR NPESOCARC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"

@ NLINAUX-010,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CLABEL := " DIMENSÕES TOTAIS "
NPOS++
NPOSAUX := NPOS
NLINAUX := NLINS1+(NLINA*(NPOSAUX))
@ NLINS1+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("Comprimento ====>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS2 SAY OEMTOANSI("Largura ====>"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS3 SAY OEMTOANSI("Altura ====>"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS4 SAY OEMTOANSI("Peso ====>"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

NPOS := NPOSAUX
@ NLING1+(NLINA*(++NPOS-1)),NCOLG1 MSGET OCOMPCARG  VAR NCOMPCARG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG2 MSGET OLARGCARG  VAR NLARGCARG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG3 MSGET OALTUCARG  VAR NALTUCARG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG4 MSGET OPESOCARG  VAR NPESOCARG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"

@ NLINAUX-010,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

RETURN NIL


/*/{PROTHEUS.DOC} FMONTACON
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DA MONTAGEM DA TELA COM OS DADOS DO CONJUNTO TRANSPORTADOR

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM NFOLDER, INDICA A POSIÇÃO DO FOLDER
@PARAM NLIN1, POSIÇÃO DE TELA
@PARAM NCOL1, POSIÇÃO DE TELA
@PARAM NLIN2, POSIÇÃO DE TELA
@PARAM NCOLS2, POSIÇÃO DE TELA
@RETURN AROTINA
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FMONTACON(NFOLDER,NLIN1,NCOL1,NLIN2,NCOL2)
// ======================================================================= \\

LOCAL NLINS1
LOCAL NCOLS1
LOCAL NLING1
LOCAL NCOLG1

NLINS1 := NLIN2+020
NCOLS1 := NCOL1+020
NLING1 := NLIN2+019
NCOLG1 := NCOL1+077

NCOLS2 := NCOLS1+118
NCOLS3 := NCOLS2+118
NCOLS4 := NCOLS3+118

NCOLG2 := NCOLG1+118
NCOLG3 := NCOLG2+118
NCOLG4 := NCOLG3+118

NLINA  := 010
NPOS   := 0

FCALCCON()

CLABEL := " DIMENSÕES CONJUNTO TRANSPORTADOR "
NPOS   := 0
@ NLINS1+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("Comprimento ====>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS2 SAY OEMTOANSI("Largura ====>"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS3 SAY OEMTOANSI("Altura ====>"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS4 SAY OEMTOANSI("Peso ====>"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

NPOS := 0
@ NLING1+(NLINA*(++NPOS-1)),NCOLG1 MSGET OCOMPCONT  VAR NCOMPCONT  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG2 MSGET OLARGCONT  VAR NLARGCONT  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG3 MSGET OALTUCONT  VAR NALTUCONT  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG4 MSGET OPESOCONT  VAR NPESOCONT  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"

@ NLINS1-010,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CLABEL := " DIMENSÕES CARGAS "
NPOS++
NPOSAUX := NPOS
NLINAUX := NLINS1+(NLINA*(NPOSAUX))
@ NLINS1+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("Comprimento ====>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS2 SAY OEMTOANSI("Largura ====>"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS3 SAY OEMTOANSI("Altura ====>"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS4 SAY OEMTOANSI("Peso ====>"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

NPOS := NPOSAUX
@ NLING1+(NLINA*(++NPOS-1)),NCOLG1 MSGET OCOMPCONC  VAR NCOMPCONC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG2 MSGET OLARGCONC  VAR NLARGCONC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG3 MSGET OALTUCONC  VAR NALTUCONC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG4 MSGET OPESOCONC  VAR NPESOCONC  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"

@ NLINAUX-010,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CLABEL := " DIMENSÕES TOTAIS "
NPOS++
NPOSAUX := NPOS
NLINAUX := NLINS1+(NLINA*(NPOSAUX))
@ NLINS1+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("Comprimento ====>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS2 SAY OEMTOANSI("Largura ====>"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS3 SAY OEMTOANSI("Altura ====>"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLINS1+(NLINA*(  NPOS-1)),NCOLS4 SAY OEMTOANSI("Peso ====>"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

NPOS := NPOSAUX
@ NLING1+(NLINA*(++NPOS-1)),NCOLG1 MSGET OCOMPCONG  VAR NCOMPCONG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG2 MSGET OLARGCONG  VAR NLARGCONG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG3 MSGET OALTUCONG  VAR NALTUCONG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"
@ NLING1+(NLINA*(  NPOS-1)),NCOLG4 MSGET OPESOCONG  VAR NPESOCONG  SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999999,999.99"

@ NLINAUX-010,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

RETURN NIL

/*/{PROTHEUS.DOC} FCALCCON
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DO CÁLCULO DO CONJUNTO TRANSPORTADOR

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/
// ======================================================================= \\
STATIC FUNCTION FCALCCON()
// ======================================================================= \\

LOCAL CSEQCAR
LOCAL LVEZ
LOCAL NCOMPCAVA  								// COMPRIMENTO DO CAVALO
LOCAL AAREAZA9 := FQ8->(GETAREA())
LOCAL NX
LOCAL NPOS     := 0 

NCOMPCONC := 0
NLARGCONC := 0
NALTUCONC := 0
NPESOCONC := 0
NEIXOCONC := 0

NCOMPCAVA := 0  								// COMPRIMENTO DO CAVALO
NCOMPCONT := 0
NLARGCONT := 0
NALTUCONT := 0
NPESOCONT := 0
NEIXOCONT := 0

C1DESC := ""
N1COMP := 0
N1LARG := 0
N1ALTU := 0
N1PESO := 0

C2DESC := ""
N2COMP := 0
N2LARG := 0
N2ALTU := 0
N2PESO := 0

C3DESC := ""

IF VALTYPE(ODLGCAR) == "O"  					// SE O OBJETO JÁ FOI CRIADO
	IF ODLGCAR:ACOLS[ODLGCAR:NAT,LEN(ODLGCAR:AHEADER)+1]  //!DELETED()
		RETURN
	ENDIF

	C1DESC  := ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_CARGA"})]
	CSEQCAR := ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQCAR"})]

	NCOMPCONC +=               ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_COMP"  })]
	NLARGCONC := MAX(NLARGCONC,ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_LARG"  })])
	NALTUCONC := MAX(NALTUCONC,ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_ALTU"  })])
	NPESOCONC +=               ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_PESO"  })] * ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_QTD"})]

	FOR NX := 1 TO LEN(ODLGCAR:ACOLS)
		IF ! ODLGCAR:ACOLS[NX,LEN(ODLGCAR:AHEADER)+1]  //!DELETED()
			IF ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_JUNTO"  })] == CSEQCAR
				NPESOCONC += ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_PESO"  })] * ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_QTD"  })]
				NLARGCONC := MAX(NLARGCONC,ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_LARG"  })])
				NALTUCONC := MAX(NALTUCONC,ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_ALTU"  })])
				NCOMPCONC := MAX(NCOMPCONC,ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_COMP"  })])
			ENDIF
		ENDIF
	NEXT NX

	LVEZ := .T.

	IF VALTYPE(ODLGCON) == "O"  				// SE O OBJETO JÁ FOI CRIADO
		FOR NPOS:=1 TO LEN(ODLGCON:ACOLS)
			IF CSEQCAR != ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})]
				LOOP
			ENDIF
			IF ! ODLGCON:ACOLS[NPOS,LEN(ODLGCON:AHEADER)+1]  //!DELETED()
				IF LVEZ  						// CAVALO TEM QUE SER O PRIMEIRO REGISTRO
					LVEZ := .F.
					NCOMPCAVA +=           ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_COMP"  })]
				ENDIF
				NCOMPCONT +=               ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_COMP"  })]
				NLARGCONT := MAX(NLARGCONT,ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_LARG"  })])
				NALTUCONT := MAX(NALTUCONT,ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_ALTU"  })])
				NPESOCONT +=               ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_PESO"  })]
				NEIXOCONT +=               ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_QTEIXO"})]
				C2DESC    += PADR(ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DESTRA"})],100)
			ENDIF
		NEXT NPOS 
	ENDIF
ENDIF

IF VALTYPE(ODLGGUI) == "O" 						// SE O OBJETO JÁ FOI CRIADO
	IF ODLGGUI:ACOLS[ODLGGUI:NAT,LEN(ODLGGUI:AHEADER)+1]  //!DELETED()
		RETURN
	ENDIF

	CCOD := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"})]

	NCOMPCONT += FTRAZCOMP(CCOD) 
	NLARGCONT := MAX( NLARGCONC, FTRAZLARG(CCOD) ) 
	NALTUCONT := MAX( NALTUCONC, FTRAZALTU(CCOD) ) 
	NPESOCONT += FTRAZPESO(CCOD) 
	NEIXOCONT += FTRAZEIXO(CCOD) 
ENDIF

NCOMPCONG := NCOMPCAVA + (NCOMPCONT-NCOMPCAVA)

NLARGCONG := MAX( NLARGCONT, NLARGCONC)
NALTUCONG := NALTUCONT + NALTUCONC
NPESOCONG := NPESOCONT + NPESOCONC
NEIXOCONG := NEIXOCONT + NEIXOCONC

NCOMPCART := NCOMPCONT
NLARGCART := NLARGCONT
NALTUCART := NALTUCONT
NPESOCART := NPESOCONT
NEIXOCART := NEIXOCONT

NCOMPCARC := NCOMPCONC
NLARGCARC := NLARGCONC
NALTUCARC := NALTUCONC
NPESOCARC := NPESOCONC
NEIXOCARC := NEIXOCONC

// FAÇO LAÇO PARA ALIMENTAR OS CAMPOS TOTAIS
FOR NX := 1 TO LEN(ODLGCAR:ACOLS)
	IF LVEZES 									// FORÇA A PASSAR APENAS UM VEZ
		NCOMPCARG += ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_COMP"})]
		NLARGCARG += ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_LARG"})]
		NALTUCARG += ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_ALTU"})]
		NPESOCARG += ODLGCAR:ACOLS[NX][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_PESO"})]
	ENDIF
NEXT

LVEZES    := .F.

NEIXOCARG := NEIXOCONG

N1COMP    := NCOMPCONC
N1LARG    := NLARGCONC
N1ALTU    := NALTUCONC
N1PESO    := NPESOCONC

N2COMP    := NCOMPCONT
N2LARG    := NLARGCONT
N2ALTU    := NALTUCONT
N2PESO    := NPESOCONT

IF FP0->FP0_TIPOSE == "T"
	
	DBSELECTAREA("FQ8")
	DBSETORDER(2)
	IF DBSEEK( XFILIAL("FQ8") + FP0->FP0_PROJET + COBRA + CSEQTRA + CSEQCAR)
		N3COMP := IIF( N3COMP == 0, FQ8->FQ8_COMPT, N3COMP)
		N3LARG := IIF( N3LARG == 0, FQ8->FQ8_LARGT, N3LARG)
		N3ALTU := IIF( N3ALTU == 0, FQ8->FQ8_ALTUT, N3ALTU)
		N3PESO := IIF( N3PESO == 0, FQ8->FQ8_PESOT, N3PESO)
	ENDIF
	

	N3COMP := IIF( N3COMP == 0, NCOMPCONG, N3COMP)
	N3LARG := IIF( N3LARG == 0, NLARGCONG, N3LARG)
	N3ALTU := IIF( N3ALTU == 0, NALTUCONG, N3ALTU)
	N3PESO := IIF( N3PESO == 0, NPESOCONG, N3PESO)
ENDIF

RESTAREA(AAREAZA9)

RETURN NIL


/*/{PROTHEUS.DOC} FVERROTAS
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE VALIDAR AS ROTAS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FVERROTAS()
// ======================================================================= \\

LOCAL   AAREA      := GETAREA()
LOCAL   CTITULO    := "CONSULTA ROTAS"
LOCAL   LOK	   	   := .F.
LOCAL   ODLG3  	   := NIL
LOCAL   CORIANT
LOCAL   CDESANT
LOCAL   CROTANT
LOCAL   ACAMPOSSIM := {}
LOCAL   ACAMPOSPIC := {}
LOCAL   ACAMPOSTIT := {}
LOCAL   ACAMPOSTAM := {}
LOCAL   ACAMPOSITE := {}
LOCAL   NPOS       := 0 

PRIVATE CROTATRB 

IF ! FWHEN()
	RETURN .F.
ENDIF

IF EMPTY( CORIGEM )
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Falta o preenchimento de informação.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Favor preencher o campo origem na aba: " + IIF(FP0->FP0_TIPOSE=="T","Viagens","Localidades")})
	RETURN .F.
ENDIF

IF EMPTY( CDESTIN )
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Falta o preenchimento de informação.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Favor preencher o campo destino na aba: " + IIF(FP0->FP0_TIPOSE=="T","Viagens","Localidades")})
	RETURN .F.
ENDIF

IF SELECT("TRB") > 0
	TRB->(DBCLOSEAREA())
ENDIF

DEFINE FONT OFONT NAME "ARIAL" SIZE 0,-11 BOLD

AADD(ACAMPOSSIM,"FP3_ROTA"  )
AADD(ACAMPOSSIM,"FP3_NOMROT")
AADD(ACAMPOSSIM,"FP3_MUNORI")
AADD(ACAMPOSSIM,"FP3_ESTORI")
AADD(ACAMPOSSIM,"FP3_MUNDES")
AADD(ACAMPOSSIM,"FP3_ESTDES")

FOR NPOS:=1 TO LEN(ACAMPOSSIM)
	AADD(ACAMPOSPIC,ALLTRIM(GETSX3CACHE(ACAMPOSSIM[NPOS],"X3_PICTURE")))
	AADD(ACAMPOSTIT,ALLTRIM(GETSX3CACHE(ACAMPOSSIM[NPOS],"X3_TITULO" )))
	AADD(ACAMPOSTAM,30                                                 )
NEXT NPOS 

FOBRA()

IF SELECT("TRB") > 0 
	TRB->(DBCLOSEAREA()) 
ENDIF 
CQUERY := " SELECT * "
CQUERY += " FROM " + RETSQLNAME("FP3") + " "
CQUERY += " WHERE  FP3_FILIAL =  '" + XFILIAL("FP3") + "' AND "
CQUERY += "        FP3_ORIGEM =  '" + CORIGEM        + "' AND "
CQUERY += "        FP3_DESTIN =  '" + CDESTIN        + "' AND "
CQUERY += "        D_E_L_E_T_ <> '*' "
CQUERY += " ORDER BY FP3_ORIGEM , FP3_DESTIN , FP3_ROTA , FP3_ETAPA" 
CQUERY := CHANGEQUERY(CQUERY) 
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TRB" , .F. , .T.) 

WHILE TRB->(!EOF())
	ATABAUX:={}
	FOR NPOS:=1 TO LEN(ACAMPOSSIM)
		CCAMPO := "TRB->"+ACAMPOSSIM[NPOS] 
		AADD(ATABAUX,&CCAMPO)
	NEXT NPOS 
	AADD(ACAMPOSITE,ATABAUX)
	CORIANT := TRB->FP3_ORIGEM
	CDESANT := TRB->FP3_DESTIN
	CROTANT := TRB->FP3_ROTA

	WHILE TRB->(!EOF() .AND. FP3_ORIGEM+FP3_DESTIN+FP3_ROTA==CORIANT+CDESANT+CROTANT)
		TRB->(DBSKIP())
	ENDDO 
ENDDO 

IF LEN(ACAMPOSITE) == 0
	ATABAUX:={}
	FOR NPOS:=1 TO LEN(ACAMPOSSIM)
		CCAMPO := "TRB->"+ACAMPOSSIM[NPOS] 
		AADD(ATABAUX,&CCAMPO)
	NEXT NPOS 
	AADD(ACAMPOSITE,ATABAUX)
ENDIF

CCAB1 := "" 
POSICIONE("FP2" , 1 , XFILIAL("FP2")+CORIGEM , "FP2_DESCRI") 
CCAB1 += "ORIGEM: "  +CORIGEM+" - "+ALLTRIM(FP2->FP2_DESCRI)+" / "+FP2->FP2_ESTADO+SPACE(10)
POSICIONE("FP2" , 1 , XFILIAL("FP2")+CDESTIN , "FP2_DESCRI") 
CCAB1 += "DESTINO: " +CDESTIN+" - "+ALLTRIM(FP2->FP2_DESCRI)+" / "+FP2->FP2_ESTADO

DEFINE MSDIALOG ODLG3 TITLE CTITULO FROM 000,000 TO 550,758 OF ODLG3 PIXEL
	@ 020,005 SAY CCAB1 OF ODLG3 PIXEL FONT OFONT

	@ 030,005 LISTBOX OLBXITENS VAR CVARITENS FIELDS ;
	HEADER   ACAMPOSTIT[01],ACAMPOSTIT[02],ACAMPOSTIT[03],ACAMPOSTIT[04],ACAMPOSTIT[05],ACAMPOSTIT[06] ;
	COLSIZES ACAMPOSTAM[01],ACAMPOSTAM[02],ACAMPOSTAM[03],ACAMPOSTAM[04],ACAMPOSTAM[05],ACAMPOSTAM[06] ;
	SIZE 370,200 OF ODLG3 PIXEL

	OLBXITENS:SETARRAY(ACAMPOSITE)
	OLBXITENS:BLINE := { || { 	TRANSFORM(ACAMPOSITE[OLBXITENS:NAT,01],ACAMPOSPIC[01]),;
								TRANSFORM(ACAMPOSITE[OLBXITENS:NAT,02],ACAMPOSPIC[02]),;
								TRANSFORM(ACAMPOSITE[OLBXITENS:NAT,03],ACAMPOSPIC[03]),;
								TRANSFORM(ACAMPOSITE[OLBXITENS:NAT,04],ACAMPOSPIC[04]),;
								TRANSFORM(ACAMPOSITE[OLBXITENS:NAT,05],ACAMPOSPIC[05]),;
								TRANSFORM(ACAMPOSITE[OLBXITENS:NAT,06],ACAMPOSPIC[06])}}
	OLBXITENS:REFRESH()
	ODLG3:REFRESH()

	@ 235,060 BUTTON OBUTTETA PROMPT "Seleciona Rota" SIZE 60,10 ACTION (LOK:=.T.,CROTATRB:=ACAMPOSITE[OLBXITENS:NAT,01],CLOSE(ODLG3),) PIXEL
	@ 235,130 BUTTON OBUTTETA PROMPT "Incluir Rota"   SIZE 60,10 ACTION (IIF(FINCLUIETA(CORIGEM,CDESTIN,ACAMPOSITE[OLBXITENS:NAT,01],ACAMPOSITE[OLBXITENS:NAT,02]) , CLOSE(ODLG3) , )) PIXEL 
	@ 235,200 BUTTON OBUTTETA PROMPT "Altera Rota"    SIZE 60,10 ACTION (IIF(FALTERAETA(CORIGEM,CDESTIN,ACAMPOSITE[OLBXITENS:NAT,01],ACAMPOSITE[OLBXITENS:NAT,02]) , CLOSE(ODLG3) , )) PIXEL 
	@ 235,270 BUTTON OBUTTETA PROMPT "Cancela"        SIZE 60,10 ACTION (LOK:=.F.,CROTATRB:=ACAMPOSITE[OLBXITENS:NAT,01],CLOSE(ODLG3),) PIXEL
ACTIVATE MSDIALOG ODLG3 CENTERED ON INIT ENCHOICEBAR(ODLG3,{|| LOK:=.T.,CROTATRB:=ACAMPOSITE[OLBXITENS:NAT,01],CLOSE(ODLG3) },{|| LOK:=.F.,CROTATRB:=ACAMPOSITE[OLBXITENS:NAT,01],CLOSE(ODLG3) })

RESTAREA(AAREA)

IF LOK
	ODLGTRE:ACOLS := {}
	ODLGTRE:ACOLS := ACLONE( FCOLSROTAS(ODLGTRE:AHEADER,ODLGTRE:ACOLS,"TRB",CROTATRB) )
	ODLGTRE:OBROWSE:REFRESH()
ENDIF

TRB->(DBCLOSEAREA())

RETURN NIL


/*/{PROTHEUS.DOC} FINCLUIETA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE VALIDAR AS ROTAS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CORIGEM, ORIGEM DA ROTA
@PARAM CDESTIN, DESTINO DA ROTA
@PARAM CROTA, CÓDIGO DA ROTA
@PARAM CNOMROT, DESCRIÇÃO DA ROTA
@RETURN RETORNO LÓGICO INDICANDO A VALIDAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FINCLUIETA(CORIGEM , CDESTIN , CROTA , CNOMROT) 
// ======================================================================= \\

LOCAL   LRET

PRIVATE JORIGEM := CORIGEM
PRIVATE JDESTIN := CDESTIN
PRIVATE JROTA   := SPACE(LEN(CROTA))
PRIVATE JNOMROT := SPACE(LEN(CNOMROT))

LRET := LOCA03102()

RETURN LRET


/*/{PROTHEUS.DOC} FALTERAETA
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ALTERAR AS ROTAS

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM CORIGEM, ORIGEM DA ROTA
@PARAM CDESTIN, DESTINO DA ROTA
@PARAM CROTA, CÓDIGO DA ROTA
@PARAM CNOMROT, DESCRIÇÃO DA ROTA
@RETURN RETORNO LÓGICO INDICANDO A ALTERAÇÃO
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FALTERAETA(CORIGEM , CDESTIN , CROTA , CNOMROT)
// ======================================================================= \\

LOCAL   LRET
PRIVATE JORIGEM := CORIGEM
PRIVATE JDESTIN := CDESTIN
PRIVATE JROTA   := CROTA
PRIVATE JNOMROT := CNOMROT

LRET := LOCA03102()

RETURN(LRET)


/*/{PROTHEUS.DOC} FCOLSROTAS
ITUP BUSINESS - TOTVS RENTAL
ESTA FUNÇÃO TEM POR FINALIDADE DE ENCONTRAR AS ROTAS DO CADASTRO

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM AHEADER, ESTRUTURA DA MSNEWGETDADOS
@PARAM ACOLS, ARRAY COM O CONTEÚDO DA MSNEWGETDADOS
@PARAM CALIAS, NOME DA TABELA
@PARAM CROTTRB, CÓDIGO DA ROTA
@RETURN RETORNO COM O ACOLS
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCOLSROTAS(AHEADER , ACOLS , CALIAS , CROTATRB) 
// ======================================================================= \\

LOCAL NPOS 
LOCAL ACOLS0 
LOCAL CALIASANT := ALIAS() 

FOBRA()

DBSELECTAREA(CALIAS)
(CALIAS)->(DBGOTOP())

WHILE (CALIAS)->(!EOF())
	IF (CALIAS)->FP3_ROTA != CROTATRB
		(CALIAS)->(DBSKIP())
		LOOP
	ENDIF

	ACOLS0 := {}
	FOR NPOS := 1 TO LEN(AHEADER)
		(CALIAS)->( AADD( ACOLS0, CRIAVAR(AHEADER[NPOS,2] ) ) )
	NEXT
	AADD(ACOLS0, .F.   )  						// DELETED
	AADD(ACOLS , ACOLS0)

	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"  })] := COBRA

	IF GDFIELDPOS("FPD_SEQTRA", AHEADER) > 0
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})] := CSEQTRA
	ENDIF
	IF GDFIELDPOS("FPD_SEQGUI", AHEADER) > 0
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})] := CSEQGUI
	ENDIF
	IF GDFIELDPOS("FPD_SEQGRU", AHEADER) > 0
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})] := CSEQGRU
	ENDIF
	IF GDFIELDPOS("FPD_SEQCAR", AHEADER) > 0
		ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})] := CSEQCAR
	ENDIF

	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ORIGEM"})] := TRB->FP3_ORIGEM
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DESTIN"})] := TRB->FP3_DESTIN
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })] := TRB->FP3_ROTA
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA" })] := TRB->FP3_ETAPA
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DE"    })] := TRB->FP3_DE
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_MUNDE" })] := TRB->FP3_MUNDE
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTDE" })] := TRB->FP3_ESTDE
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ATE"   })] := TRB->FP3_ATE
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_MUNATE"})] := TRB->FP3_MUNATE
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTATE"})] := TRB->FP3_ESTATE
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})] := TRB->FP3_DISTAN
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO" })] := TRB->FP3_VAZIO
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})] := SPACE(01)
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_RODOVI"})] := TRB->FP3_RODOVI
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_VALPED"})] := TRB->FP3_VREIXO
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_QTDPED"})] := TRB->FP3_QTDPED
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})] := TRB->FP3_TIPORO
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPOPI"})] := TRB->FP3_TIPOPI

	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_CET"   })] := GETSTRZAN(TRB->FP3_TIPORO,TRB->FP3_TIPOPI,"FPD_CET",TRB->FP3_VAZIO)
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DER"   })] := GETSTRZAN(TRB->FP3_TIPORO,TRB->FP3_TIPOPI,"FPD_DER",TRB->FP3_VAZIO)
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DNIT"  })] := GETSTRZAN(TRB->FP3_TIPORO,TRB->FP3_TIPOPI,"FPD_DNIT",TRB->FP3_VAZIO)
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_CRED"  })] := GETINTZAN(TRB->FP3_TIPORO,TRB->FP3_TIPOPI,"FPD_CRED",TRB->FP3_DISTAN,TRB->FP3_VAZIO)
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TEMPO" })] := GETINTZAN(TRB->FP3_TIPORO,TRB->FP3_TIPOPI,"FPD_TEMPO",TRB->FP3_DISTAN,TRB->FP3_VAZIO)

	(CALIAS)->(DBSKIP())
ENDDO

IF EMPTY(ACOLS)
	ACOLS0 := {}
	FOR NPOS:=1 TO LEN(AHEADER)
		(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
	NEXT NPOS 
	AADD(ACOLS0,.F.  )  						// DELETED
	AADD(ACOLS,ACOLS0)
ENDIF

DBSELECTAREA(CALIASANT)

RETURN ACLONE(ACOLS)


/*/{PROTHEUS.DOC} FFOLDERCUS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERCUS(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\

LOCAL NSTYLE   := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL NLINS1
LOCAL NCOLS1
LOCAL NLING1
LOCAL NCOLG1
LOCAL NLINS2
LOCAL NCOLS2
LOCAL NLING2
LOCAL NCOLG2
LOCAL NLINS3
LOCAL NCOLS3
LOCAL NLING3
LOCAL NCOLG3
LOCAL NLINS4
LOCAL NCOLS4
LOCAL NLING4
LOCAL NCOLG4
LOCAL NLINS9
LOCAL NCOLS9
LOCAL NLING9
LOCAL NCOLG9
LOCAL CPROJET := PROJETO()


NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR 

FOBRA()

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
   NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FQ8",NOPCMANU,NSTYLE}) 
ENDIF

CALIAS    := "FQ8"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FQ8_FILIAL+FQ8_PROJET=="'+CCHAVE+'"'
NINDICE   := 1 									// FQ8_FILIAL+FQ8_PROJET+FQ8_OBRA+FQ8_SEQTRA+FQ8_SEQGUI+FQ8_SEQGRU+FQ8_SEQCAR
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FQ8")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

NLIN1X  := 0
NCOL1X  := 0
NLIN2X  := 0
NCOL2X  := 0
ODLGCUS := MSNEWGETDADOS():NEW(NLIN1X,NCOL1X,NLIN2X    ,NCOL2X ,NSTYLE,			  ,  	  ,""         ,      ,       ,MAXGETDAD ,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGCUS:OBROWSE:BCHANGE := {|| LOCA00139()} 

FACUMUCUS()
FTRAZCUS()

FTRAZMEM(.T.)  									// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS
FCALCCUS()

NLINS1 := 008
NCOLS1 := 004
NLING1 := 007
NCOLG1 := 061

NLINS2 := NLINS1
NCOLS2 := NCOLS1+118
NLING2 := NLING1
NCOLG2 := NCOLG1+118

NLINS3 := NLINS2
NCOLS3 := NCOLS2+118
NLING3 := NLING2
NCOLG3 := NCOLG2+118

NLINS4 := NLINS3
NCOLS4 := NCOLS3+118
NLING4 := NLING3
NCOLG4 := NCOLG3+118

NLINA := 010
NPOS  := 0

IF FP0->FP0_TIPOSE == "E"
	CLABEL := " TARIFAS PRINCIPAIS IDA-MOBILIZAÇÃO "
ELSE
	CLABEL := " TARIFAS PRINCIPAIS "
ENDIF

NPOS:=0

_nTempX01 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
_nTempX02 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
_nTempX03 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_ACRESC"})]
_nTempX04 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})]
_nTempX05 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})]
_nTempX06 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PDESC"})]
_nTempX07 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})]
_cTempX08 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUIM"})]
_cTempX09 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPGUID"})]
_nTempX10 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})]
_nTempX11 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})]
_nTempX12 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"})]
_nTempX13 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERISS"})]
_nTempX14 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS"})]
_nTempX15 := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]

If _cTempX08 == "L"
	_cTempX08 := "Empresa"
ElseIf _cTempX08 == "C"
	_cTempX08 := "Cliente"
Else
	_cTempX08 := ""
EndIF

If _cTempX09 == "L"
	_cTempX09 := "Empresa"
ElseIf _cTempX09 == "C"
	_cTempX09 := "Cliente"
Else
	_cTempX09 := ""
EndIF


DO CASE
CASE FP0->FP0_TIPOSE == "E"
	CLABEL := " CUSTOS LOCAÇÃO "
	NPOS   := 0
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("PREV.BASE"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.BASE"          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.TURNO 1"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.TURNO 2"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.TURNO 3"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.BASE TOTAL"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.MOB."          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.DESMOB."       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.TRANSP.ACESS"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VALOR A COBRAR"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VLR.TOTAL AS"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("LOCR03102"      	    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("RETORNO IMEDIATO" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("% CUSTO INDIRETO" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS := 0
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OPREDIAG   VAR NPREDIAG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALBASG   VAR NVALBASG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALTUR1   VAR NVALTUR1      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALTUR2   VAR NVALTUR2      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALTUR3   VAR NVALTUR3      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALBASGT  VAR NVALBASGT     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALMOBG   VAR NVALMOBG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALDESG   VAR NVALDESG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALTACG   VAR NVALTACG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALISSG   VAR NVALISSG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALSEGG   VAR NVALSEGG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALCOBR   VAR NVALCOBR      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALTOTG   VAR NVALTOTG      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALCUSTG  VAR NVALCUSTG     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALRENTG  VAR NVALRENTG     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALCUSIG  VAR NVALCUSIG     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999.99"        VALID FCUSTOIND()
	@ NLINS2-006,NCOLS1-002 TO NLINS2+(NLINA*(++NPOS-1))+002,NCOLS1+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	CLABEL := " CUSTOS LOCAÇÃO ('LOCALIDADE')" 
	NPOS   := 0
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.BASE"		    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.TURNO 1"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.TURNO 2"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.TURNO 3"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.BASE TOTAL"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.MOB."          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.DESMOB."	    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.TRANSP.ACESS"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VR.SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VALOR A COBRAR"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("VLR.TOTAL AS"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("LOCR03102"		    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS2 SAY OEMTOANSI("RETORNO IMEDIATO" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS := 0
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALBASOG  VAR NVALBASOG     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALTUR1O  VAR NVALTUR1O     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALTUR2O  VAR NVALTUR2O     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALTUR3O  VAR NVALTUR3O     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALBASTO  VAR NVALBASTO     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALMOBO   VAR NVALMOBO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALDESO   VAR NVALDESO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALTACO   VAR NVALTACO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALISSO   VAR NVALISSO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALSEGO   VAR NVALSEGO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALCOBRO  VAR NVALCOBRO     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALTOTO   VAR NVALTOTO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALCUSO   VAR NVALCUSO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG2 MSGET OVALRENO   VAR NVALRENO      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLINS3-006,NCOLS2-002 TO NLINS3+(NLINA*(++NPOS-1))+002,NCOLS2+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	CLABEL := " CUSTOS LOCAÇÃO ('PROJETO')"
	NPOS   := 0
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.BASE"		    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.TURNO 1"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.TURNO 2"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
    @ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.TURNO 3"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.BASE TOTAL"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.MOB."          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.DESMOB."	    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.TRANSP.ACESS"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VALOR A COBRAR"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VLR.TOTAL AS"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("LOCR03102"		    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS4+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("RETORNO IMEDIATO" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS := 0
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALBAST   VAR NVALBAST      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTUR1T  VAR NVALTUR1T     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTUR2T  VAR NVALTUR2T     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTUR3T  VAR NVALTUR3T     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALBASTT  VAR NVALBASTT     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALMOBT   VAR NVALMOBT      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALDEST   VAR NVALDEST      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTACT   VAR NVALTACT      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALISST   VAR NVALISST      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALSEGT   VAR NVALSEGT      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALCOBRT  VAR NVALCOBRT     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTOTT   VAR NVALTOTT      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALCUST   VAR NVALCUST      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING4+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALRENT   VAR NVALRENT      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLINS4-006,NCOLS3-002 TO NLINS4+(NLINA*(++NPOS-1))+002,NCOLS3+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CASE FP0->FP0_TIPOSE == "L"
	NCOLS3 := NCOLS1
	NCOLG3 := NCOLG1
	NCOLS4 := NCOLS2
	NCOLG4 := NCOLG2

	CLABEL := " CUSTOS LOCAÇÃO "
	NPOS   := 0.3
	/*
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("QT.BASE"          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.BASE"          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.BASE TOTAL"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.MOB."          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.DESMOB."       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.ESTADIAS"      ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.OPERADOR TOTAL") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("VR.LOCAÇÃO TOTAL" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	*/

	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Qtd. Base"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Quantidade"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Acréscimo"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Valor Unitário"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Valor Bruto"      ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("% Desconto"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Valor Base"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Resp.Frete Ida"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Resp.Frete Volta" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Vlr.Frete Ida"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS3 SAY OEMTOANSI("Vlr.Frete Volta"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS := 0.3
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX01 var _nTempX01      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX02 var _nTempX02      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX03 var _nTempX03      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX04 var _nTempX04      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX05 var _nTempX05      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX06 var _nTempX06      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX07 var _nTempX07      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX08 var _cTempX08      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@!"                WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX09 var _cTempX09      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@!"                WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX10 var _nTempX10      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET _oTempX11 var _nTempX11      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99"  WHEN FWHEN(.F.)
	


	/*
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OPREDIAU   VAR NPREDIAU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALBASU   VAR NVALBASU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTUR1   VAR NVALTUR1      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTUR2   VAR NVALTUR2      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTUR3   VAR NVALTUR3      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)

	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALBASUT  VAR NVALBASUT     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALMOBU   VAR NVALMOBU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALDESU   VAR NVALDESU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVLEST     VAR NVLEST        SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OOPERADUT  VAR NOPERADUT     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALISSU   VAR NVALISSU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALSEGU   VAR NVALSEGU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG3 MSGET OVALTOTU   VAR NVALTOTU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLINS2-006,NCOLS3-002 TO NLINS3+(NLINA*(++NPOS-1))+002,NCOLS3+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]
	*/
	@ NLINS2-006,NCOLS3-002 TO NLINS3+(NLINA*(++NPOS-1))+002,NCOLS3+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	CLABEL := " ISS E SEGURO LOCAÇÃO "
	NPOS   := 0.3
	/*
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("TP.ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("VR.BASE ISS"      ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("%  ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("VR.ISS"           ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("TP.SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("VR.BASE SEGURO"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("%  SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("VR.SEGURO"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	*/

	//@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("Tipo ISS"         ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("% ISS"            ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("Valor ISS"        ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS3+(NLINA*(++NPOS-1)),NCOLS4 SAY OEMTOANSI("Valor Seguro"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS := 0.3
	//@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _nTempX12      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _oTempX13 var _nTempX13      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _oTempX14 var _nTempX14      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET _oTempX15 var _nTempX15      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" WHEN FWHEN(.F.)
	
	/*
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET ODISISSU   VAR CDISISSU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]                            VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OBASISSU   VAR NBASISSU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OPERISSU   VAR NPERISSU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OVALISSU1  VAR NVALISSU1     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OTIPSEGU   VAR CTIPSEGU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]                            VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OBASSEGU   VAR NBASSEGU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OPERSEGU   VAR NPERSEGU      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING3+(NLINA*(++NPOS-1)),NCOLG4 MSGET OVALSEGU1  VAR NVALSEGU1     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	*/

	@ NLINS3-006,NCOLS4-002 TO NLINS4+(NLINA*(++NPOS-1))+002,NCOLS4+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CASE FP0->FP0_TIPOSE == "T"
	CLABEL  := " VR.FRETE INFORMADO"
	NPOSAUX := NPOS
	NLINAUX := NLINS2+(NLINA*(NPOSAUX))
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("DIAS VAZIO"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("DIAS CARREGADO"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("KM VAZIO"         ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("KM CARREGADO"     ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("TIPO DE CÁLCULO"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.BASE"          ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.BASE TOTAL"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VR.TARIFAS"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VALOR DO FRETE"   ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VALOR PRETENDIDO" ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VALOR FECHADO"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS    := NPOSAUX
	NLINAUX := NLINS2+(NLINA*(NPOSAUX))
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALDIASV  VAR NVALDIASV     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALDIASC  VAR NVALDIASC     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALKMV    VAR NVALKMV       SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALKMC    VAR NVALKMC       SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OTIPOCAT   VAR CTIPOCAT      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@X"               VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALBASE   VAR NVALBASE      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALBASET  VAR NVALBASET     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALCUT    VAR NVALCUT       SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALFRETE  VAR NVALFECHT     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL()
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALPRET   VAR NVALPRET      SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALFECHT  VAR NVALFRETE     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL()

	@ NLINAUX-006,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS1+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	CLABEL  := " RENTABILIDADE"
	NPOSAUX := NPOS
	NLINAUX := NLINS2+(NLINA*(NPOSAUX))
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("LOCR03102"		    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("RETORNO IMEDIATO"	) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS2+(NLINA*(++NPOS-1)),NCOLS1 SAY OEMTOANSI("VALOR VIAGEM"		) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS    := NPOSAUX
	NLINAUX := NLINS2+(NLINA*(NPOSAUX))
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALCUSTG  VAR NVALCUSTG     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALRENTG  VAR NVALRENTG     SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING2+(NLINA*(++NPOS-1)),NCOLG1 MSGET OVALVIAGEM VAR NVALVIAGEM    SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999,999.99" VALID FCALCTOTAL() WHEN FWHEN(.F.)

	@ NLINAUX-006,NCOLS1-002 TO NLINS1+(NLINA*(++NPOS-1))+002,NCOLS1+104 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	NLINS9 := NLINS2
	NLING9 := NLING2
	NCOLS9 := NCOLS2
	NCOLG9 := NCOLG2

	CLABEL  := " DIMENSÕES DO CONJ.TRANSPORTADOR"
	NPOS    := 0
	NPOSAUX := NPOS
	NLINAUX := NLINS9+(NLINA*(NPOSAUX))
	@ NLINS9+(NLINA*(++NPOS-1)),NCOLS9+000 SAY OEMTOANSI("Descrição"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	NPOS += 4
	@ NLINS9+(NLINA*(++NPOS-1)),NCOLS9+000 SAY OEMTOANSI("Comprimento"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+052 SAY OEMTOANSI("Largura"      ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+104 SAY OEMTOANSI("Altura"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+156 SAY OEMTOANSI("Peso"         ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS    := NPOSAUX
	NLINAUX := NLINS9+(NLINA*(NPOSAUX))
	@ NLING9+(NLINA*(++NPOS-1)),NCOLG9-020   GET O2DESC     VAR C2DESC     SIZE 165,48 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] MEMO                     VALID FCALCTOTAL() WHEN FWHEN(.F.)

	NPOS += 5
	@ NLING9+(NLINA*(++NPOS-1)),NCOLS9+000 MSGET O2COMP     VAR N2COMP     SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+052 MSGET O2LARG     VAR N2LARG     SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+104 MSGET O2ALTU     VAR N2ALTU     SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+156 MSGET O2PESO     VAR N2PESO     SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999.999"  VALID FCALCTOTAL() WHEN FWHEN(.F.)

	@ NLINAUX-006,NCOLS9-002 TO NLINS9+(NLINA*(++NPOS-1))+002,NCOLS9+104+100 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	CLABEL  := " DIMENSÕES DA CARGA"
	NPOSAUX := NPOS
	NLINAUX := NLINS9+(NLINA*(NPOSAUX))
	@ NLINS9+(NLINA*(++NPOS-1)),NCOLS9+000 SAY OEMTOANSI("Descrição"    ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(++NPOS-1)),NCOLS9+000 SAY OEMTOANSI("Comprimento"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+052 SAY OEMTOANSI("Largura"      ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+104 SAY OEMTOANSI("Altura"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+156 SAY OEMTOANSI("Peso"         ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS    := NPOSAUX
	NLINAUX := NLINS9+(NLINA*(NPOSAUX))
	@ NLING9+(NLINA*(++NPOS-1)),NCOLG9-020 MSGET O1DESC     VAR C1DESC    SIZE 165,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]                          VALID FCALCTOTAL() WHEN FWHEN(.F.)
	NPOS++
	@ NLING9+(NLINA*(++NPOS-1)),NCOLS9+000 MSGET O1COMP     VAR N1COMP    SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+052 MSGET O1LARG     VAR N1LARG    SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+104 MSGET O1ALTU     VAR N1ALTU    SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+156 MSGET O1PESO     VAR N1PESO    SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999.999"  VALID FCALCTOTAL() WHEN FWHEN(.F.)
	@ NLINAUX-006,NCOLS9-002 TO NLINS9+(NLINA*(++NPOS-1))+002,NCOLS9+104+100 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

	CLABEL  := " DIMENSÕES TOTAIS"
	NPOSAUX := NPOS
	NLINAUX := NLINS9+(NLINA*(NPOSAUX))
	@ NLINS9+(NLINA*(++NPOS-1)),NCOLS9+000 SAY OEMTOANSI("Comprimento"  ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+052 SAY OEMTOANSI("Largura"      ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+104 SAY OEMTOANSI("Altura"       ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
	@ NLINS9+(NLINA*(  NPOS-1)),NCOLS9+156 SAY OEMTOANSI("Peso"         ) SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]

	NPOS    := NPOSAUX
	NLINAUX := NLINS9+(NLINA*(NPOSAUX))
	NPOS++

	@ NLING9+(NLINA*(++NPOS-1)),NCOLS9+000 MSGET O3COMP     VAR NCOMPCARG/*N3COMP*/ SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() //WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+052 MSGET O3LARG     VAR NLARGCARG/*N3LARG*/ SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() //WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+104 MSGET O3ALTU     VAR NALTUCARG/*N3ALTU*/ SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 9,999.99"    VALID FCALCTOTAL() //WHEN FWHEN(.F.)
	@ NLING9+(NLINA*(  NPOS-1)),NCOLS9+156 MSGET O3PESO     VAR NPESOCARG/*N3PESO*/ SIZE 045,08 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] PICTURE "@E 999999.999"  VALID FCALCTOTAL() //WHEN FWHEN(.F.)

	@ NLINAUX-006,NCOLS9-002 TO NLINS9+(NLINA*(++NPOS-1))+002,NCOLS9+104+100 LABEL CLABEL PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]
ENDCASE

//@ NLIN2-015,IIF(FP0->FP0_TIPOSE == "G",NCOLS1,NCOLS2)-002 BUTTON OBUTTCALC PROMPT "CALCULA" SIZE 60,15 ACTION FCALCITEM() OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 

RETURN NIL


/*/{PROTHEUS.DOC} FDISPGUIN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDISPGUIN()
// ======================================================================= \\

IF VALTYPE(OPREDIAG) != "O"  					// SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

OPREDIAG:REFRESH()
OVALBASG:REFRESH()
OVALBASGT:REFRESH()
OVALMOBG:REFRESH()
OVALDESG:REFRESH()
OVALISSG:REFRESH()
OVALSEGG:REFRESH()
OVALTOTG:REFRESH()
OVALRENTG:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FDISPTRAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDISPTRAN() 
// ======================================================================= \\

IF VALTYPE(OVALDIASV) != "O"  					// SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

OVALDIASV:REFRESH()
OVALDIASC:REFRESH()
OVALKMV:REFRESH()
OVALKMC:REFRESH()
OTIPOCAT:REFRESH()
OVALBASE:REFRESH()
OVALBASET:REFRESH()
OVALCUT:REFRESH()
OVALRENTG:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} MUDACUSB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00139() 
// ======================================================================= \\
// --> MUDA BROWSE

FOBRA()

IF ODLGCUS:NAT > LEN(ODLGCUS:ACOLS)
	ODLGCUS:NAT := LEN(ODLGCUS:ACOLS)
ENDIF

ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"  })] := COBRA
ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})] := CSEQTRA
ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})] := CSEQGUI
ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})] := CSEQGRU
ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})] := CSEQCAR
ODLGCUS:OBROWSE:REFRESH()

RETURN .T. 


/*/{PROTHEUS.DOC} FSALVARCUS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARCUS(CALIAS , AHEADER , ACOLS)  	// CUS
// ======================================================================= \\

LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL _aArea    := GetArea()

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
IF OFOLDER:NOPTION == NFOLDERCUS
	FTRAZMEM(.F.)  								// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS 
	FACUMUCUS()
ENDIF
ACOLS := ACLONE(OCUS_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5 									// 5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"  })]
		CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
		CSEQGUI := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})]
		CSEQGRU := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})]
		CSEQCAR := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR)  //!DELETED()
			DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR)
			IF EOF()
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FQ8_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FQ8_PROJET := CPROJET
			(CALIAS)->FQ8_OBRA	 := COBRA
			(CALIAS)->FQ8_SEQTRA := CSEQTRA
			(CALIAS)->FQ8_SEQGUI := CSEQGUI
			(CALIAS)->FQ8_SEQGRU := CSEQGRU
			(CALIAS)->FQ8_SEQCAR := CSEQCAR
			(CALIAS)->(MSUNLOCK())
			AADD(AGRAVADOS,RECNO()) 			// GRAVADOS
		ENDIF
	NEXT
ENDIF

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. FQ8_FILIAL+FQ8_PROJET == XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,RECNO()) == 0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO 

restarea(_aArea)
RETURN


/*/{PROTHEUS.DOC} FZERATUDO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FZERATUDO()						// USADO NA ROTINA FMANU
// ======================================================================= \\

NVALLSRM := NVL2LSRM := 0
NVALPREM := NVL2PREM := 0
NVALPRFM := NVL2PRFM := 0
NVALTAPM := NVL2TAPM := 0
NVALTUVM := NVL2TUVM := 0
NVALTURM := NVL2TURM := 0
NVALESCM := NVL2ESCM := 0
NVALPEDM := NVL2PEDM := 0
NVALINVM := NVL2INVM := 0
NVALALEM := NVL2ALEM := 0

NVALIPTM := NVL2IPTM := 0
NVALACOM := NVL2ACOM := 0
NVALCETM := NVL2CETM := 0
NVALSEMM := NVL2SEMM := 0
NVALTVAM := NVL2TVAM := 0
NVALTELM := NVL2TELM := 0
NVALOUTM := NVL2OUTM := 0
NVALCONM := NVL2CONM := 0
NVALADIM := NVL2ADIM := 0
NVALAUXM := NVL2AUXM := 0
NVALCUSM := NVL2CUSM := 0

NVALLSRD := NVL2LSRD := 0
NVALPRED := NVL2PRED := 0
NVALPRFD := NVL2PRFD := 0
NVALTAPD := NVL2TAPD := 0
NVALTUVD := NVL2TUVD := 0
NVALTURD := NVL2TURD := 0
NVALESCD := NVL2ESCD := 0
NVALPEDD := NVL2PEDD := 0
NVALINVD := NVL2INVD := 0
NVALALED := NVL2ALED := 0

NVALIPTD := NVL2IPTD := 0
NVALACOD := NVL2ACOD := 0
NVALCETD := NVL2CETD := 0
NVALSEMD := NVL2SEMD := 0
NVALTVAD := NVL2TVAD := 0
NVALTELD := NVL2TELD := 0
NVALOUTD := NVL2OUTD := 0
NVALCOND := NVL2COND := 0
NVALADID := NVL2ADID := 0
NVALAUXD := NVL2AUXD := 0
NVALCUSD := NVL2CUSD := 0

NVALLSR  := NVL2LSR  := 0
NVALPRE  := NVL2PRE  := 0
NVALPRF  := NVL2PRF  := 0
NVALTAP  := NVL2TAP  := 0
NVALTUV  := NVL2TUV  := 0
NVALTUR  := NVL2TUR  := 0
NVALESC  := NVL2ESC  := 0
NVALPED  := NVL2PED  := 0
NVALINV  := NVL2INV  := 0
NVALALE  := NVL2ALE  := 0

NVALIPT  := NVL2IPT  := 0
NVALACO  := NVL2ACO  := 0
NVALCET  := NVL2CET  := 0
NVALSEM  := NVL2SEM  := 0
NVALTVA  := NVL2TVA  := 0
NVALTEL  := NVL2TEL  := 0
NVALOUT  := NVL2OUT  := 0
NVALCON  := NVL2CON  := 0
NVALADI  := NVL2ADI  := 0
NVALAUX  := NVL2AUX  := 0
NVALCUS  := NVL2CUS  := 0

NVALVIS  := 0
NVALTCP  := 0

NVALGUI  := 0
NVALCUG  := 0

NVALCUT    := 0
NVALDIASV  := 0
NVALDIASC  := 0
NVALBASE   := 0
NVALBASET  := 0
NVALFRETES := 0

NVALBASEI  := 0
NVADBASEI  := 0
NVAKBASEI  := 0

NVADCUT    := 0
NVADDIASV  := 0
NVADDIASC  := 0
NVADBASE   := 0
NVADBASET  := 0
NVADFRETES := 0

NVAKCUT    := 0
NVAKDIASV  := 0
NVAKDIASC  := 0
NVAKBASE   := 0
NVAKBASET  := 0
NVAKFRETES := 0

NVALFRETE  := 0
NVALPRET   := 0

NVALAQU := 0
NPERRES := 0
NVALRES := 0
NVALUTI := 0
NVALDIS := 0
NVALEFE := 0
NVALJUR := 0
NPERSEG := 0

NVALLIC := 0
NVALLAV := 0
NFRELAV := 0
NVALCOM := 0
NQTDCOM := 0
NVALLUB := 0
NINTLUB := 0
NVALPNE := 0
NPREPNE := 0
NVIDPNE := 0
NVALPEC := 0

NVALREMFIX := 0
NPERRESFIX := 0
NVALRESFIX := 0
NVALCASFIX := 0
NVALLICFIX := 0
NVALSEGFIX := 0

NVALCOMFIX := 0
NVALLUBFIX := 0
NVALPNEFIX := 0
NVALLAVFIX := 0

NVALISSBDI := 0
NVALPISBDI := 0
NVALADMBDI := 0
NVALLUCBDI := 0
NVALSEGBDI := 0
NVALJURBDI := 0
NVALCPMBDI := 0
NVALCSLBDI := 0
NVALIRRBDI := 0
NVALTOTBDI := 0

NPERISSBDI := 0
NPERPISBDI := 0
NPERADMBDI := 0
NPERLUCBDI := 0
NPERSEGBDI := 0
NPERJURBDI := 0
NPERCPMBDI := 0
NPERCSLBDI := 0
NPERIRRBDI := 0
NPERTOTBDI := 0

NVALTOTT  := 0
NVALTOTG  := 0
NVALTOTX  := 0

NPREDIAG  := 0

NVALTUR1  := 0
NVALTUR2  := 0
NVALTUR3  := 0

NVALBASG  := 0
NVALBASGT := 0
NVALMOBG  := 0
NVALDESG  := 0
NVALTACG  := 0
NVALISSG  := 0
NVALSEGG  := 0
NVALTOTG  := 0
NMINDIA	  := 0
NMINMES	  := 0

NVAMMOBG  := 0
NVAMDESG  := 0
NVAMISSG  := 0
NVAMSEGG  := 0
NVAMTOTG  := 0

NPREDIAU  := 0
NVALBASU  := 0
NVALBASUT := 0
NVALMOBU  := 0
NVALDESU  := 0
NVALCHUMB := 0
NVLEST	  := 0
NMONTAGU  := 0
NDESMONU  := 0
NTELESCU  := 0
NANCORAU  := 0
NGUIMONU  := 0
NGUIDESU  := 0
NOPERADU  := 0
NOPERADUT := 0
NACESSOU  := 0

CDISISSU  := SPACE(01)
CTIPISSU  := SPACE(01)
NPERISSU  := 0
NBASISSU  := NBASEU := 0
NVALISSU  := 0
CTIPSEGU  := SPACE(01)
NPERSEGU  := 0
NBASSEGU  := 0
NVALSEGU  := 0
NVALTOTU  := 0

NVALCUSIG := 0
N3COMP    := 0
N3LARG    := 0
N3ALTU    := 0
N3PESO    := 0

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZMEM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZMEM(LTRAZ)
// ======================================================================= \\

LOCAL NPOS
LOCAL ATABAUX
LOCAL CCAMPO
LOCAL CVAR
LOCAL LRET    := .T.

ATABAUX:={}

AADD(ATABAUX,{"NVALLSR"   , "FQ8_VALLSR"})
AADD(ATABAUX,{"NVALPRE"   , "FQ8_VALPRE"})
AADD(ATABAUX,{"NVALPRF"   , "FQ8_VALPRF"})
AADD(ATABAUX,{"NVALTAP"   , "FQ8_VALTAP"})
AADD(ATABAUX,{"NVALTUV"   , "FQ8_VALTUV"})
AADD(ATABAUX,{"NVALTUR"   , "FQ8_VALTUR"})
AADD(ATABAUX,{"NVALESC"   , "FQ8_VALESC"})
AADD(ATABAUX,{"NVALPED"   , "FQ8_VALPED"})
AADD(ATABAUX,{"NVALINV"   , "FQ8_VALINV"})

AADD(ATABAUX,{"NVALIPT"   , "FQ8_VALIPT"})
AADD(ATABAUX,{"NVALACO"   , "FQ8_VALACO"})
AADD(ATABAUX,{"NVALCET"   , "FQ8_VALCET"})
AADD(ATABAUX,{"NVALSEM"   , "FQ8_VALSEM"})
AADD(ATABAUX,{"NVALTVA"   , "FQ8_VALTVA"})
AADD(ATABAUX,{"NVALTEL"   , "FQ8_VALTEL"})
AADD(ATABAUX,{"NVALOUT"   , "FQ8_VALOUT"})
AADD(ATABAUX,{"NVALCON"   , "FQ8_VALCON"})
AADD(ATABAUX,{"NVALADI"   , "FQ8_VALADI"})
AADD(ATABAUX,{"NVALAUX"   , "FQ8_VALAUX"})

AADD(ATABAUX,{"NVL2LSR"   , "FQ8_VL2LSR"})
AADD(ATABAUX,{"NVL2PRE"   , "FQ8_VL2PRE"})
AADD(ATABAUX,{"NVL2PRF"   , "FQ8_VL2PRF"})
AADD(ATABAUX,{"NVL2TAP"   , "FQ8_VL2TAP"})
AADD(ATABAUX,{"NVL2TUV"   , "FQ8_VL2TUV"})
AADD(ATABAUX,{"NVL2TUR"   , "FQ8_VL2TUR"})
AADD(ATABAUX,{"NVL2ESC"   , "FQ8_VL2ESC"})
AADD(ATABAUX,{"NVL2PED"   , "FQ8_VL2PED"})
AADD(ATABAUX,{"NVL2INV"   , "FQ8_VL2INV"})

AADD(ATABAUX,{"NVL2IPT"   , "FQ8_VL2IPT"})
AADD(ATABAUX,{"NVL2ACO"   , "FQ8_VL2ACO"})
AADD(ATABAUX,{"NVL2CET"   , "FQ8_VL2CET"})
AADD(ATABAUX,{"NVL2SEM"   , "FQ8_VL2SEM"})
AADD(ATABAUX,{"NVL2TVA"   , "FQ8_VL2TVA"})
AADD(ATABAUX,{"NVL2TEL"   , "FQ8_VL2TEL"})
AADD(ATABAUX,{"NVL2OUT"   , "FQ8_VL2OUT"})
AADD(ATABAUX,{"NVL2CON"   , "FQ8_VL2CON"})
AADD(ATABAUX,{"NVL2ADI"   , "FQ8_VL2ADI"})
AADD(ATABAUX,{"NVL2AUX"   , "FQ8_VL2AUX"})

AADD(ATABAUX,{"NVALTCP"   , "FQ8_VALTCP"})
AADD(ATABAUX,{"NVALVIS"   , "FQ8_VALVIS"})

AADD(ATABAUX,{"NVALMOB"   , "FQ8_VALMOB"})
AADD(ATABAUX,{"NVALDES"   , "FQ8_DESMOB"})
AADD(ATABAUX,{"NVALSEG"   , "FQ8_SEGGUI"})
AADD(ATABAUX,{"NVALGUI"   , "FQ8_VALGUI"})
AADD(ATABAUX,{"NVALEQU"   , "FQ8_VALEQU"})

// BDI
AADD(ATABAUX,{"NVALAQU"   , "FQ8_AQUISI"})
AADD(ATABAUX,{"NPERRES"   , "FQ8_PERRSD"})
AADD(ATABAUX,{"NVALRES"   , "FQ8_VALRSD"})
AADD(ATABAUX,{"NVALUTI"   , "FQ8_VIDAUT"})
AADD(ATABAUX,{"NVALDIS"   , "FQ8_DISPVE"})
AADD(ATABAUX,{"NVALEFE"   , "FQ8_VIDAEF"})
AADD(ATABAUX,{"NVALJUR"   , "FQ8_JUROSM"})
AADD(ATABAUX,{"NPERSEG"   , "FQ8_SEGURP"})
AADD(ATABAUX,{"NVALLIC"   , "FQ8_LICENP"})
AADD(ATABAUX,{"NVALLAV"   , "FQ8_LAVAGE"})
AADD(ATABAUX,{"NFRELAV"   , "FQ8_FREQLA"})
AADD(ATABAUX,{"NVALCOM"   , "FQ8_COMBUS"})
AADD(ATABAUX,{"NQTDCOM"   , "FQ8_QTDCOM"})
AADD(ATABAUX,{"NVALLUB"   , "FQ8_LUBRIF"})
AADD(ATABAUX,{"NINTLUB"   , "FQ8_INTLUB"})
AADD(ATABAUX,{"NVALPNE"   , "FQ8_QTDPNE"})
AADD(ATABAUX,{"NPREPNE"   , "FQ8_PREPNE"})
AADD(ATABAUX,{"NVIDPNE"   , "FQ8_VIDAPN"})
AADD(ATABAUX,{"NVALPEC"   , "FQ8_CONSER"})

// CUSTO FIXO
AADD(ATABAUX,{"NVALREMFIX", "FQ8_REMCAP"})
AADD(ATABAUX,{"NPERRESFIX", "FQ8_PERRES"})
AADD(ATABAUX,{"NVALRESFIX", "FQ8_VALRES"})
AADD(ATABAUX,{"NVALCASFIX", "FQ8_CASCO" })
AADD(ATABAUX,{"NVALLICFIX", "FQ8_LICENC"})
AADD(ATABAUX,{"NVALSEGFIX", "FQ8_SEGURO"})

// CUSTO VARIÁVEL
AADD(ATABAUX,{"NVALCOMFIX", "FQ8_VALCOM"})
AADD(ATABAUX,{"NVALLUBFIX", "FQ8_VALLUB"})
AADD(ATABAUX,{"NVALPNEFIX", "FQ8_VALPNE"})
AADD(ATABAUX,{"NVALLAVFIX", "FQ8_VALLAV"})

//  TARIFAS
AADD(ATABAUX,{"NPERISSBDI", "FQ8_PERISS"})
AADD(ATABAUX,{"NPERPISBDI", "FQ8_PERPIS"})
AADD(ATABAUX,{"NPERADMBDI", "FQ8_PERADM"})
AADD(ATABAUX,{"NPERLUCBDI", "FQ8_PERLUC"})
AADD(ATABAUX,{"NPERSEGBDI", "FQ8_PERSEG"})
AADD(ATABAUX,{"NPERJURBDI", "FQ8_PERJUR"})
AADD(ATABAUX,{"NPERCPMBDI", "FQ8_PERCPM"})
AADD(ATABAUX,{"NPERCSLBDI", "FQ8_PERCSL"})
AADD(ATABAUX,{"NPERIRRBDI", "FQ8_PERIRR"})
AADD(ATABAUX,{"NPERTOTBDI", "FQ8_PERTOT"})

AADD(ATABAUX,{"NVALISSBDI", "FQ8_VALISS"})
AADD(ATABAUX,{"NVALPISBDI", "FQ8_VALPIS"})
AADD(ATABAUX,{"NVALADMBDI", "FQ8_VALADM"})
AADD(ATABAUX,{"NVALLUCBDI", "FQ8_VALLUC"})
AADD(ATABAUX,{"NVALSEGBDI", "FQ8_VALSEG"})
AADD(ATABAUX,{"NVALJURBDI", "FQ8_VALJUR"})
AADD(ATABAUX,{"NVALCPMBDI", "FQ8_VALCPM"})
AADD(ATABAUX,{"NVALCSLBDI", "FQ8_VALCSL"})
AADD(ATABAUX,{"NVALIRRBDI", "FQ8_VALIRR"})
AADD(ATABAUX,{"NVALTOTBDI", "FQ8_VALTOT"})

AADD(ATABAUX,{"NVALFRETE" , "FQ8_VRFRET"})

AADD(ATABAUX,{"N3COMP"    , "FQ8_COMPT" })
AADD(ATABAUX,{"N3LARG"    , "FQ8_LARGT" })
AADD(ATABAUX,{"N3ALTU"    , "FQ8_ALTUT" })
AADD(ATABAUX,{"N3PESO" 	  , "FQ8_PESOT" })
AADD(ATABAUX,{"NVALFECHT" , "FQ8_VALFEC"})		// VALOR FECHADO

AADD(ATABAUX,{"NINSTRU"   , "FQ8_INSTRU"})
AADD(ATABAUX,{"NBALSA"    , "FQ8_BALSA"})
AADD(ATABAUX,{"NDESDTA"   , "FQ8_DESDTA"})
AADD(ATABAUX,{"NMONDES"   , "FQ8_MONDES"})
AADD(ATABAUX,{"NAPOGUI"   , "FQ8_APOGUI"})
AADD(ATABAUX,{"NCAVEXT"   , "FQ8_CAVEXT"})
AADD(ATABAUX,{"NMOBENC"   , "FQ8_MODENC"})
AADD(ATABAUX,{"NDMOENC"   , "FQ8_DMOENC"})

FOR NPOS:=1 TO LEN(ATABAUX)
	CVAR   := ATABAUX[NPOS,1]
	CCAMPO := ATABAUX[NPOS,2]
	IF LTRAZ
		&CVAR := ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] 
	ELSE
		ODLGCUS:ACOLS[ODLGCUS:NAT][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := &CVAR 
	ENDIF
NEXT

RETURN LRET


/*/{PROTHEUS.DOC} FCALCTOTAL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCTOTAL()					// CALCULO PARA CUSTO FIXO
// ======================================================================= \\

NVALREMFIX := 0
NVALRESFIX := 0
NVALCASFIX := 0
NVALLICFIX := 0

NVALRES    := (((NVALAQU*NPERRES)/100)/01)

NVALREMFIX := (((NVALAQU-NVALRES)*NVALJUR)/100)

NVALRESFIX := (((NVALAQU*NPERRES)/100)/01)
NVALCASFIX := (((NVALAQU*NPERSEG)/100)/12)
NVALLICFIX := (((NVALAQU*NVALLIC)/100)/12)

// CALCULO PARA CUSTO VARIÁVEL
NVALCOMFIX := 0
NVALLUBFIX := 0
NVALPNEFIX := 0
NVALLAVFIX := 0

NVALCOMFIX := (NQTDCOM*NVALCOM*NVALEFE)
NVALLUBFIX := ((NVALLUB*NVALEFE)/NVALDIS)
NVALPNEFIX := ((NVALPNE*NPREPNE)/(NVIDPNE))*NVALEFE
NVALLAVFIX := ((NVALLAV*NFRELAV*NVALEFE)/NVALDIS)

// CALCULO PARA TOTALIZADORES
NTOTCUSFIX := 0
NTOTCUSVAR := 0
NTOTCUSMAN := 0
NTOTCUSMAO := 0
NTOTHORPAR := 0
NTOTVALHOR := 0
NMAOOBRA   := 100.00  							// RECEBE O VALOR DO GRID

NTOTCUSFIX := NVALREMFIX+NVALRESFIX+NVALCASFIX+NVALLICFIX+NVALSEGFIX
NTOTCUSVAR := NVALCOMFIX+NVALLUBFIX+NVALPNEFIX+NVALLAVFIX  //CUSTO VARIÁVEL
NTOTCUSMAN := NTOTCUSFIX+NTOTCUSVAR
NTOTCUSMAO := NMAOOBRA
NTOTMAOMAN := NTOTCUSMAO+NTOTCUSMAN
NTOTCUSOPE := (((NTOTCUSMAN+NTOTCUSMAO)*NVALPEC)/100)
NTOTMAOEQU := (NTOTCUSFIX+NTOTCUSVAR+NTOTCUSOPE+NTOTCUSMAO)
NTOTHORPAR := (NTOTCUSFIX/NVALEFE)+(NTOTCUSOPE/NVALEFE)

NVALISSBDI := NTOTMAOEQU-(NTOTMAOEQU*(1-NPERISSBDI/100))
NVALPISBDI := ((NTOTMAOEQU*NPERPISBDI)/100)
NVALADMBDI := ((NTOTMAOEQU*NPERADMBDI)/100)
NVALLUCBDI := ((NTOTMAOEQU*NPERLUCBDI)/100)
NVALSEGBDI := ((NTOTMAOEQU*NPERSEGBDI)/100)
NVALJURBDI := ((NTOTMAOEQU*NPERJURBDI)/100)
NVALCPMBDI := ((NTOTMAOEQU*NPERCPMBDI)/100)
NVALCSLBDI := ((NTOTMAOEQU*NPERCSLBDI)/100)
NVALIRRBDI := ((NTOTMAOEQU*NPERIRRBDI)/100)
NPERTOTBDI := (NPERISSBDI+NPERPISBDI+NPERADMBDI+NPERLUCBDI+NPERSEGBDI+NPERJURBDI+NPERCPMBDI+NPERCSLBDI+NPERIRRBDI)
NVALTOTBDI := (NTOTMAOEQU+NVALISSBDI+NVALPISBDI+NVALADMBDI+NVALLUCBDI+NVALSEGBDI+NVALJURBDI+NVALCPMBDI+NVALCSLBDI+NVALIRRBDI)

NTOTVALHOR := (NVALTOTBDI/NVALEFE)*(NVALDIS/NVALEFE)

NVALTOTX   := NVALTOTT+NVALTOTG

FCALCCUS()
FCALCGUI()
FCALCPLA()
FCALCTRA()

FTRAZMEM(.F.)  									// .T.=ATUALIZA VARIÁVEIS  /  .F.=ATUALIZA ODLGCUS:ACOLS 

FCALCGUIOB()
FCALGUIT()

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERCNJ
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERCNJ(NFOLDER , NLIN1 ,NCOL1 , NLIN2 , NCOL2)
// ======================================================================= \\

LOCAL NSTYLE  := IIF(NOPCMANU==2 , 0 , GD_INSERT+GD_UPDATE+GD_DELETE) 
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL NPOS
LOCAL CPROJET := PROJETO()

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FPS",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "FPS"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FPS_FILIAL+FPS_PROJET=="'+CCHAVE+'"'
NINDICE   := 2  								// FPS_FILIAL+FPS_PROJET+FPS_OBRA+FPS_SEQGUI+FPS_ITEM
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FPS")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

OCNJACOLS := BECHANGE():CREATE(AHEADER, ACOLS, "FPS_ITEM")
ACOLS     := OCNJACOLS:GETDATA("FPS_OBRA=='"+ COBRA +"' .AND. FPS_SEQGUI='"+CSEQGUI+"'")

IF LEN(ACOLS) == 0
	ATMP := {}
	FOR NPOS := 1 TO LEN(AHEADER)
		(CALIAS)->(AADD(ATMP,CRIAVAR(AHEADER[NPOS,2],.T.)))
	NEXT
	AADD(ATMP,.F.  )  							// DELETED
	AADD(ACOLS, ATMP)

	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPS_ITEM"  })] := "01"
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPS_OBRA"  })] := COBRA
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPS_SEQGUI"})] := CSEQGUI
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPS_PROJET"})] := CPROJET
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPS_DTLIM" })] := DDATABASE
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS   ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGCNJ := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FPS_ITEM",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGCNJ:OBROWSE:BCHANGE := {|| MUDAZLW()} 

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERCNP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERCNP(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\

LOCAL NSTYLE  := IIF(NOPCMANU==2 , 0 , GD_INSERT+GD_UPDATE+GD_DELETE) 
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()
LOCAL NPOS    := 0 

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FQ7",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "FQ7"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FQ7_FILIAL+FQ7_PROJET=="'+CCHAVE+'"'
NINDICE   := 2
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FQ7")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

OCNPACOLS := BECHANGE():CREATE(AHEADER, ACOLS, "FQ7_ITEM")
ACOLS     := OCNPACOLS:GETDATA("FQ7_OBRA=='"+COBRA+"' .AND. FQ7_SEQGUI='"+CSEQGRU+"'")

IF LEN(ACOLS) == 0
	ATMP := {}
	FOR NPOS:=1 TO LEN(AHEADER)
		(CALIAS)->(AADD(ATMP,CRIAVAR(AHEADER[NPOS][2],.T.)))
	NEXT NPOS 
	AADD(ATMP,.F.  )  							// DELETED
	AADD(ACOLS, ATMP)

	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_ITEM"  })] := "01"
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_OBRA"  })] := COBRA
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_SEQGUI"})] := CSEQGRU
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_PROJET"})] := CPROJET
	ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DTLIM" })] := DDATABASE
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS   ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGCNP := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FQ7_ITEM",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGCNP:OBROWSE:BCHANGE := {|| MUDAZUC()} 

RETURN NIL


/*/{PROTHEUS.DOC} ZA0INICI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00140(CCAMPO , _LINC) 
// ======================================================================= \\
// --> ZA0INICI - INICIALIZADOR PADRÃO DE CAMPOS DA TABELA ZA0

LOCAL   AAREA     := GETAREA() 
LOCAL   CANO      := LEFT( DTOS(DDATABASE), 4 )
LOCAL   CCOD      := CANO + "00000"
LOCAL   _CQUERY   := "" 
LOCAL 	CINIANO	  := "00000"

DEFAULT CCAMPO    := ""
DEFAULT _LINC     := .T.

DO CASE
CASE UPPER(CCAMPO) == "FP0_PROJET"

	// AO VIRAR O ANO, SE JÁ EXISTIR MOVIMENTOS NA FILIAL, CONTINUAR COM A NUMERAÇÃO.
	FP0->(DBSETORDER(1))
	IF FP0->(DBSEEK(XFILIAL("FP0")))
		IF SELECT("TRB") > 0 
			TRB->(DBCLOSEAREA()) 
		ENDIF 
		_CQUERY := " SELECT MAX(FP0_PROJET) CODIGO "
		_CQUERY += " FROM " + RETSQLNAME("FP0") + " ZA0 "
		_CQUERY += " WHERE  FP0_FILIAL = '" + XFILIAL("FP0") + "'"
		_CQUERY += "   AND  ZA0.D_E_L_E_T_ = '' "
		_CQUERY := CHANGEQUERY(_CQUERY) 
		TCQUERY _CQUERY NEW ALIAS "TRB"
		CINIANO := SUBSTR(TRB->CODIGO , 5 , TAMSX3("FP0_PROJET")[1]-4 )
		TRB->(DBCLOSEAREA()) 
	ELSE
		CINIANO	  := "00000"
	ENDIF

	IF EXISTBLOCK("LC001NUM") 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DO NÚMERO DO PROJETO.
		CCOD := EXECBLOCK("LC001NUM",.T.,.T.,{CCOD})
	ELSE
		IF SELECT("TRB") > 0
			TRB->(DBCLOSEAREA())
		ENDIF
		_CQUERY     := " SELECT ISNULL(MAX(SUBSTRING(FP0_PROJET,1,9)),'" + SUBSTR(CANO,1,4) + CINIANO+"') CODIGO"
		_CQUERY     += " FROM " + RETSQLNAME("FP0") + " ZA0"
		_CQUERY     += " WHERE  FP0_FILIAL = '" + XFILIAL("FP0") + "'"
		_CQUERY     += "   AND  SUBSTRING(FP0_PROJET,1,4) = '" + CANO + "'"
		IF !_LINC
			_CQUERY += "   AND  ZA0.R_E_C_N_O_ <> " + CVALTOCHAR(FP0->(RECNO()))
		ENDIF
		_CQUERY     += "   AND  ZA0.D_E_L_E_T_ = ''"
		_CQUERY     := CHANGEQUERY(_CQUERY)  
		TCQUERY _CQUERY NEW ALIAS "TRB" 

		FP0->(DBSETORDER(1))  					// FP0_FILIAL+FP0_PROJET

		IF TRB->(EOF())
			CCOD := SUBSTR(CANO,1,4) + "00000"
		ELSE
			CCOD := STRZERO(VAL(TRB->CODIGO),9)
		ENDIF

		CCOD := SOMA1( CCOD )

		IF _LINC .OR. ALLTRIM(FP0->FP0_PROJET) <> ALLTRIM(CCOD)
			IF FP0->( DBSEEK(XFILIAL("FP0")+CCOD) ) .OR. LEN(CCOD) > 9
				WHILE .T.
					CCOD := SUBSTR(CANO,1,4) + GETSXENUM("FP0","FP0_COD")
					IF ! FP0->( DBSEEK(XFILIAL("FP0")+CCOD) )
						EXIT
					ELSE
						CONFIRMSX8()
					ENDIF
				ENDDO 
				ROLLBACKSXE()
			ENDIF
		ENDIF

		TRB->(DBCLOSEAREA())

	ENDIF

CASE UPPER(CCAMPO) == "FP0_RECEIT"
	IF TYPE("ZA0RECEIT") <> "U"  				// SE A VARIAVEL EXISTE
		CCOD := "L" //ZA0RECEIT
	ELSE
		CCOD := SPACE(LEN(M->FP0_RECEIT))
	ENDIF

CASE UPPER(CCAMPO) == "FP0_TIPOSE"
	IF TYPE("ZA0TIPOSE") <> "U"  				// SE A VARIAVEL EXISTE
		CCOD := "L" //ZA0TIPOSE
	ELSE
		CCOD := SPACE(LEN(M->FP0_TIPOSE))
	ENDIF
ENDCASE

RESTAREA( AAREA )

RETURN CCOD 


/*/{PROTHEUS.DOC} FDISPCON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDISPCON()
// ======================================================================= \\

IF VALTYPE(ODLGCON)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	OCOMPCONC:REFRESH(); OLARGCONC:REFRESH(); OALTUCONC:REFRESH(); OPESOCONC:REFRESH()
	OCOMPCONT:REFRESH(); OLARGCONT:REFRESH(); OALTUCONT:REFRESH(); OPESOCONT:REFRESH()
	OCOMPCONG:REFRESH(); OLARGCONG:REFRESH(); OALTUCONG:REFRESH(); OPESOCONG:REFRESH()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FDISPCAR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDISPCAR()
// ======================================================================= \\

IF VALTYPE(ODLGCON)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	OCOMPCARC:REFRESH(); OLARGCARC:REFRESH(); OALTUCARC:REFRESH(); OPESOCARC:REFRESH()
	OCOMPCART:REFRESH(); OLARGCART:REFRESH(); OALTUCART:REFRESH(); OPESOCART:REFRESH()
	OCOMPCARG:REFRESH(); OLARGCARG:REFRESH(); OALTUCARG:REFRESH(); OPESOCARG:REFRESH()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FDISPTRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDISPTRE()
// ======================================================================= \\

IF VALTYPE(ODLGTRE)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	OKMV:REFRESH()
	OKMC:REFRESH()
	OKMT:REFRESH()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} MUDAZLW
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDAZLW() 
// ======================================================================= \\
// --> MUDA BROWSE

LOCAL LRET      := .T.
LOCAL NPOS
LOCAL CPROJET   := PROJETO()

FOBRA()

IF LEN(ODLGCNJ:ACOLS) == 0
	ATMP := {}
	FOR NPOS := 1 TO LEN(ODLGCNJ:AHEADER)
		(CALIAS)->(AADD(ATMP,CRIAVAR(ODLGCNJ:AHEADER[NPOS,2],.T.)))
	NEXT NPOS 
	AADD(ATMP,.F.  )  							// DELETED
	AADD(ODLGCNJ:ACOLS, ATMP)

	ODLGCNJ:ACOLS[1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_ITEM"  })] := "01"
	ODLGCNJ:ACOLS[1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_OBRA"  })] := COBRA
	ODLGCNJ:ACOLS[1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_SEQGUI"})] := CSEQGUI
	ODLGCNJ:ACOLS[1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_PROJET"})] := CPROJET
	ODLGCNJ:ACOLS[1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_DTLIM" })] := DDATABASE
ENDIF

IF ODLGCNJ:NAT > LEN(ODLGCNJ:ACOLS)
	ODLGCNJ:NAT := LEN(ODLGCNJ:ACOLS)
ENDIF

IF EMPTY(ODLGCNJ:ACOLS[ODLGCNJ:NAT][2]) .AND. ODLGCNJ:NAT > 1
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_OBRA"  })] := COBRA
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_SEQGUI"})] := CSEQGUI
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_PROJET"})] := CPROJET
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCCORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCCORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCLORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCLORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LOCCAR"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LOCCAR" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_ENDORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_ENDORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_BRRORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_BRRORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_MUNORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_MUNORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CIDORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CIDORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_UFORI" })] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_UFORI"  })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CEPORI"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CEPORI" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCCDES"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCCDES" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCLDES"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LCLDES" })]

	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LOCDES"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_LOCDES" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_ENDEST"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_ENDEST" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_BRRDES"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_BRRDES" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_MUNDES"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_MUNDES" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CIDEST"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CIDEST" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_UFDEST"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_UFDEST" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CEPDES"})] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CEPDES" })]
	ODLGCNJ:ACOLS[ODLGCNJ:NAT][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CC"    })] := ODLGCNJ:ACOLS[ODLGCNJ:NAT-1][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_CC"     })]
ENDIF

ODLGCNJ:OBROWSE:REFRESH()

RETURN LRET 


/*/{PROTHEUS.DOC} MUDAZUC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDAZUC() 
// ======================================================================= \\
// --> MUDA BROWSE

LOCAL NPOS
LOCAL ATMP      := {}
LOCAL CPROJET   := PROJETO()

FOBRA()

IF LEN(ODLGCNP:ACOLS) == 0
	FOR NPOS := 1 TO LEN(ODLGCNP:AHEADER)
		(CALIAS)->( AADD( ATMP, CRIAVAR(ODLGCNP:AHEADER[NPOS,2] ,.T.) ) )
	NEXT
	AADD(ATMP, .F. )  							// DELETED

	AADD(ODLGCNP:ACOLS, ATMP)

	ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_ITEM"  })] := "01"
	ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_OBRA"  })] := COBRA
	ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_SEQGUI"})] := CSEQGRU
	ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_PROJET"})] := CPROJET
	ODLGCNP:ACOLS[1][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DTLIM" })] := DDATABASE
ENDIF

IF ODLGCNP:NAT > LEN(ODLGCNP:ACOLS)
	ODLGCNP:NAT := LEN(ODLGCNP:ACOLS)
ENDIF

IF EMPTY(ODLGCNP:ACOLS[ODLGCNP:NAT][2]) .AND. ODLGCNP:NAT > 1
	FOR NPOS := 1 TO LEN(ODLGCNP:AHEADER)
		IF ! ALLTRIM(ODLGCNP:AHEADER[NPOS][2]) $ "FQ7_ITEM;FQ7_X5COD;FQ7_VIAGEM;FQ7_VIAORI;FQ7_NFRET;FQ7_SERRET;FQ7_FORNE;FQ7_LOJF"
			ODLGCNP:ACOLS[ODLGCNP:NAT][NPOS] := ODLGCNP:ACOLS[ODLGCNP:NAT-1][NPOS]
		ENDIF
	NEXT
	//ODLGCNP:ACOLS[ODLGCNP:NAT][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_ITEM"  })] := STRZERO(ODLGCNP:NAT,2)
	ODLGCNP:ACOLS[ODLGCNP:NAT][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DESCRI"})] := POSICIONE("DUT",1,XFILIAL("DUT")+ODLGCNP:ACOLS[ODLGCNP:NAT][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_X5COD"})],"DUT_DESCRI")
ENDIF

ODLGCNP:OBROWSE:REFRESH()

RETURN .T.


/*/{PROTHEUS.DOC} FMONTAKM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FMONTAKM(NFOLDER,NLIN1,NCOL1,NLIN2,NCOL2)
// ======================================================================= \\

LOCAL NLINS1,NCOLS1,NLING1,NCOLG1
LOCAL NLINS2,NCOLS2,NLING2,NCOLG2
LOCAL NLINS3,NCOLS3,NLING3,NCOLG3
LOCAL NLINS4,NCOLS4,NLING4,NCOLG4

NLINS1 := NLIN2 + 008
NCOLS1 := NCOL1 + 004
NLING1 := NLIN2 + 007
NCOLG1 := NCOL1 + 061

NLINS2 := NLINS1
NCOLS2 := NCOLS1 + 118
NLING2 := NLING1
NCOLG2 := NCOLG1 + 118

NLINS3 := NLINS2
NCOLS3 := NCOLS2 + 118
NLING3 := NLING2
NCOLG3 := NCOLG2 + 118

NLINS4 := NLINS3
NCOLS4 := NCOLS3+118
NLING4 := NLING3
NCOLG4 := NCOLG3+118

NLINA  := 010

FCALCTRE()

CLABEL := " KM VAZIO "
@ NLINS1+5, NCOLS1 SAY OEMTOANSI("Km Vazio ===>    ") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLING1+5, NCOLG1 MSGET OKMV       VAR NKMV          SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999,999"
@ NLINS1-05,NCOLS1-002 TO NLINS1+022, NCOLS1+104 LABEL CLABEL   PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CLABEL := " KM CARREGADO "
@ NLINS1+5, NCOLS2 SAY OEMTOANSI("Km Carregado ===>") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLING1+5, NCOLG2 MSGET OKMC       VAR NKMC          SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999,999"
@ NLINS1-05,NCOLS2-002 TO NLINS1+022,NCOLS2+104 LABEL CLABEL    PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

CLABEL := " KM TOTAL "
@ NLINS1+5, NCOLS3 SAY OEMTOANSI("Km Total ===>    ") SIZE 50,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER]
@ NLING1+5, NCOLG3 MSGET OKMT       VAR NKMT          SIZE 45,8 PIXEL OF OFOLDER:ADIALOGS[NFOLDER] WHEN FWHEN(.F.) PICTURE "@E 999,999"
@ NLINS1-05,NCOLS3-002 TO NLINS1+022,NCOLS3+104 LABEL CLABEL    PIXEL COLOR CLR_HBLUE OF OFOLDER:ADIALOGS[NFOLDER]

RETURN NIL


/*/{PROTHEUS.DOC} FTEMVAZIO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTEMVAZIO(CTIPOSE)
// ======================================================================= \\

LOCAL LRET := .T.

DO CASE
CASE CTIPOSE == "T"
	LRET := .T.
CASE CTIPOSE == "E"
	LRET := .F.
CASE CTIPOSE == "L"
	LRET := .F.
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} FTEMIDAVOL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTEMIDAVOL(CTIPOSE)
// ======================================================================= \\

LOCAL LRET := .T.

DO CASE
CASE CTIPOSE == "T"
	LRET := .F.
CASE CTIPOSE == "E"
	LRET := .T.
CASE CTIPOSE == "L"
	LRET := .T.
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} FVALIDATRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FVALIDATRE() 
// ======================================================================= \\

LOCAL NPOS
LOCAL CETAPA
LOCAL CDE
LOCAL CVAZIO
LOCAL CIDAVOL
LOCAL LRET    := .T.

IF VALTYPE(ODLGTRE)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	FOR NPOS := 1 TO LEN(ODLGTRE:ACOLS)
		IF ! ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			CETAPA  := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA"})]
			CDE     := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DE"   })]
			CVAZIO  := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]
			CIDAVOL := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]

			IF !EMPTY(CETAPA) .AND. !EMPTY(CDE)
				IF FTEMVAZIO(FP0->FP0_TIPOSE)
					IF ! CVAZIO $ "VC"
						Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Falta preencher vazio, ou carregado"})
						LRET := .F.
						EXIT
					ENDIF
				ENDIF

				IF FTEMIDAVOL(FP0->FP0_TIPOSE)
					IF ! CIDAVOL $ "IV"
						Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Falta preencher se a direção do trecho é Ida, ou Volta."})
						LRET := .F.
						EXIT
					ENDIF
				ENDIF
			ENDIF
		ENDIF
	NEXT
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} FVERDOCUM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FVERDOCUM(AHEADER,ACOLS,CALIAS,CROTATRB) 
// ======================================================================= \\

IF ! FWHEN()
	RETURN NIL
ENDIF

IF ! MSGYESNO("CONFIRMA CARREGAMENTO DE TODOS OS DOCUMENTOS ??" , "GPO - LOCC001.PRW")
	RETURN NIL
ENDIF

ODLGDOC:ACOLS := {}
ODLGDOC:ACOLS := ACLONE(FCOLSDOCUM(ODLGDOC:AHEADER,ODLGDOC:ACOLS,"FPC"))
ODLGDOC:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FCOLSDOCUM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCOLSDOCUM(AHEADER,ACOLS,CALIAS) 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0
LOCAL NPOSDOC   := 0
LOCAL CALIASANT := ALIAS()
Local _nX

FOBRA()

DBSELECTAREA(CALIAS)

(CALIAS)->(DBGOTOP())
WHILE (CALIAS)->(!EOF())
	ACOLS0:={}
	FOR NPOS:=1 TO LEN(AHEADER)
		(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
	NEXT
	AADD(ACOLS0,.F.  )  						// DELETED
	AADD(ACOLS,ACOLS0)

	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"  })] := COBRA
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_SEQDOC"})] := STRZERO(++NPOSDOC,3)
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_CODIGO"})] := (CALIAS)->FPC_CODIGO
	ACOLS[LEN(ACOLS)][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_DESCRI"})] := (CALIAS)->FPC_DESCRI


	IF EXISTBLOCK("LC001DOC") 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
		ACOLS := EXECBLOCK("LC001DOC",.T.,.T.,{ACOLS, AHEADER})
	ENDIF

	(CALIAS)->(DBSKIP())
ENDDO

IF EMPTY(ACOLS)
	ACOLS0:={}
	FOR NPOS:=1 TO LEN(AHEADER)
		(CALIAS)->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
	NEXT
	AADD(ACOLS0,.F.  )  						// DELETED
	AADD(ACOLS,ACOLS0)
ENDIF

DBSELECTAREA(CALIASANT)

RETURN ACLONE(ACOLS)


/*/{PROTHEUS.DOC} FCALCLSR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCLSR() 
// ======================================================================= \\

NVALLSR := 0
NVL2LSR := 0

IF VALTYPE(ODLGGUI)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	FCALCTRE()
	NVELMEDI :=30 								// FTRAZVELO(ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"})])
	NVALHORA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR"})]

	NMINDIA  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]
	NMINMES  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINMES"})]

	CTIPOCA  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
	DO CASE
	CASE CTIPOCA=="H"

	CASE CTIPOCA=="D"
		NVALHORA /= NMINDIA

	CASE CTIPOCA=="M"
		NVALHORA /= NMINMES

	ENDCASE

	NHORVIAG  := ((NKMV +NKMC )/NVELMEDI)
	NHORVIAG1 := ((NKMV1+NKMC1)/NVELMEDI)
	NHORVIAG2 := ((NKMV2+NKMC2)/NVELMEDI)
	ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_HORVIA"})] := NHORVIAG

	NVALLSR := NHORVIAG*NVALHORA

	NVALAUX := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]
	NVL2AUX := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]
ENDIF

RETURN .T.


/*/{PROTHEUS.DOC} FCALCTRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCTRE() 
// ======================================================================= \\

LOCAL NPOS

NKMVE  := NKMVE1 :=NKMVE2 := 0  				// VAZIO ESTADUAL
NKMVF  := NKMVF1 :=NKMVF2 := 0  				// VAZIO FEDERAL
NKMVSP := NKMVSP1:=NKMVSP2:= 0  				// VAZIO SP
NKMVT  := NKMVT1 :=NKMVT2 := 0  				// VAZIO TOTAL

NKMCE  := NKMCE1 :=NKMCE2 := 0  				// CARREGADO ESTADUAL
NKMCF  := NKMCF1 :=NKMCF2 := 0  				// CARREGADO FEDERAL
NKMCSP := NKMCSP1:=NKMCSP2:= 0  				// CARREGADO SP
NKMCT  := NKMCT1 :=NKMCT2 := 0  				// CARREGADO TOTAL

NVALPEDVE  := NVALPEDVE1  := NVALPEDVE2  := 0
NVALPEDVF  := NVALPEDVF1  := NVALPEDVF2  := 0
NVALPEDVSP := NVALPEDVSP1 := NVALPEDVSP2 := 0
NVALPEDVT  := NVALPEDVT1  := NVALPEDVT2  := 0

NVALPEDCE  := NVALPEDCE1  := NVALPEDCE2  := 0
NVALPEDCF  := NVALPEDCF1  := NVALPEDCF2  := 0
NVALPEDCSP := NVALPEDCSP1 := NVALPEDCSP2 := 0
NVALPEDCT  := NVALPEDCT1  := NVALPEDCT2  := 0

NKMV := NKMV1 := NKMV2 := 0
NKMC := NKMC1 := NKMC2 := 0
NKMT := NKMT1 := NKMT2 := 0

IF VALTYPE(ODLGTRE)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	FOR NPOS := 1 TO LEN(ODLGTRE:ACOLS)
		_CIDAVOL := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]
		IF !ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]=="V"
				IF _CIDAVOL == "V"
					NKMV2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					NKMV1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF
				NKMV += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]

				IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
					IF _CIDAVOL == "V"
						NKMVE2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ELSE
						NKMVE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMVE += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					IF _CIDAVOL == "V"
						NKMVF2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ELSE
						NKMVF1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMVF += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF

				IF _CIDAVOL == "V"
					NKMVT2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					NKMVT1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF
				NKMVT += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
			ELSE
				IF _CIDAVOL == "V"
					NKMC2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					NKMC1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF
				NKMC += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]

				IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
					IF _CIDAVOL == "V"
						NKMCE2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ELSE
						NKMCE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMCE += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					IF _CIDAVOL == "V"
						NKMCF2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ELSE
						NKMCF1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMCF += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF

				IF _CIDAVOL == "V"
					NKMCT2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					NKMCT1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF
				NKMCT += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
			ENDIF
		ENDIF
	NEXT
ENDIF

NKMT  := NKMV  + NKMC
NKMT1 := NKMV1 + NKMC1
NKMT2 := NKMV2 + NKMC2

RETURN NIL


/*/{PROTHEUS.DOC} FCALCTUV
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCTUV() 
// ======================================================================= \\

LOCAL NPOS

NVALTUV := 0
NVL2TUV := 0

IF NKMVF > 0
	IF NPESOCONT > XTUVTON
		FOR NPOS := 1 TO LEN(XTABTUV)
			IF FP0->FP0_TIPOSE $ "E;L"
				IF NKMVF1 >= XTABTUV[NPOS,1] .AND. NKMVF1 <= XTABTUV[NPOS,2]
					NVALTUV += ROUND(INT(NPESOCONT-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI*NKMVF1,2)
				ENDIF
				IF NKMVF2 >= XTABTUV[NPOS,1] .AND. NKMVF2 <= XTABTUV[NPOS,2]
					NVL2TUV += ROUND(INT(NPESOCONT-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI*NKMVF2,2)
				ENDIF
			ELSE
				IF NKMVF  >= XTABTUV[NPOS,1] .AND. NKMVF <= XTABTUV[NPOS,2]
					NVALTUV += ROUND(INT(NPESOCONT-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI*NKMVF,2)
				ENDIF
			ENDIF
		NEXT
	ENDIF
ENDIF

IF NKMCF > 0
	IF NPESOCONG > XTUVTON
		FOR NPOS:=1 TO LEN(XTABTUV)
			IF FP0->FP0_TIPOSE $ "E;L"
				IF NKMCF1 >= XTABTUV[NPOS,1] .AND. NKMCF1 <= XTABTUV[NPOS,2]
					NVALTUV += ROUND(INT(NPESOCONG-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI,2)
				ENDIF
				IF NKMCF2 >= XTABTUV[NPOS,1] .AND. NKMCF2 <= XTABTUV[NPOS,2]
					NVL2TUV += ROUND(INT(NPESOCONG-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI,2)
				ENDIF
			ELSE
				IF NKMCF  >= XTABTUV[NPOS,1] .AND. NKMCF  <= XTABTUV[NPOS,2]
					NVALTUV += ROUND(INT(NPESOCONG-XTUVTON)*XTABTUV[NPOS,3]*XTUVUFI,2)
				ENDIF
			ENDIF
		NEXT
	ENDIF
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCALCTAP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCTAP() 
// ======================================================================= \\

LOCAL NPOS
LOCAL NPOS1
LOCAL CTIPANT
LOCAL XFATTAPAUX
LOCAL NKMVE      := 0
LOCAL NKMCE      := 0
LOCAL NVALPEDVE  := 0
LOCAL NVALPEDCE  := 0
LOCAL NKMVE1     := 0
LOCAL NKMCE1     := 0
LOCAL NVALPEDVE1 := 0
LOCAL NVALPEDCE1 := 0
LOCAL NKMVE2     := 0
LOCAL NKMCE2     := 0
LOCAL NVALPEDVE2 := 0
LOCAL NVALPEDCE2 := 0

NVALTAP:=0

IF VALTYPE(ODLGTRE)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	FOR NPOS:=1 TO LEN(ODLGTRE:ACOLS)
		IF !ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
				LOOP
			ENDIF
			NKMVE     := NKMVE1     := NKMVE2     := 0 
			NKMCE     := NKMCE1     := NKMCE2     := 0 
			NVALPEDVE := NVALPEDVE1 := NVALPEDVE2 := 0 
			NVALPEDCE := NVALPEDCE1 := NVALPEDCE2 := 0 
			CTIPANT   := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]
			FOR NPOS1:=NPOS TO LEN(ODLGTRE:ACOLS)
				_CIDAVOL := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]
				NPOS := NPOS1 

				IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
					LOOP
				ENDIF

				IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]==CTIPANT
					NPOS--
					EXIT
				ENDIF

				CORIGEM := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ORIGEM"})]
				CDESTIN := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DESTIN"})]
				CROTA   := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })]
				CETAPA  := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA" })]

				FP3->(DBSEEK(XFILIAL("FP3")+CORIGEM+CDESTIN+CROTA+CETAPA))
				IF FP3->(FP3_FATTAP==0)
					XFATTAPAUX := XFATTAP
				ELSE
					XFATTAPAUX := FP3->FP3_FATTAP
				ENDIF

				IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]=="V"
					IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
						IF FP0->FP0_TIPOSE $ "E;L"
							IF _CIDAVOL == "V"
								NKMVE2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
							ELSE
								NKMVE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
							ENDIF
						ELSE
							NKMVE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ENDIF
						NKMVE += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
				ELSE
					IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
						IF FP0->FP0_TIPOSE $ "E;L"
							IF _CIDAVOL == "V"
								NKMCE2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
							ELSE
								NKMCE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
							ENDIF
						ELSE
							NKMCE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ENDIF
						NKMCE += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
				ENDIF
			NEXT

			IF NKMCE > 0
				IF NPESOCONG > XTAPTON
					NVALTAP += ROUND(INT(NPESOCONG-XTAPTON)*XFATTAPAUX*NVALPEDCE1,2)
					NVL2TAP += ROUND(INT(NPESOCONG-XTAPTON)*XFATTAPAUX*NVALPEDCE2,2)
				ENDIF
			ENDIF
		ENDIF
	NEXT
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCALCPED
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCPED() 
// ======================================================================= \\

LOCAL NPOS

NVALPED     := 0
NVL2PED     := 0
NVAL1PEDAGI := 0
NVAL2PEDAGI := 0
NQTDEIXOS   := 0

IF VALTYPE(ODLGCON)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	FOR NPOS:=1 TO LEN(ODLGCON:ACOLS)
		IF !ODLGCON:ACOLS[NPOS,LEN(ODLGCON:AHEADER)+1]  //!DELETED()
			NQTDEIXOS += ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_QTEIXO"})]
		ENDIF
	NEXT
ENDIF

IF VALTYPE(ODLGGUI)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	IF !ODLGGUI:ACOLS[ODLGGUI:NAT,LEN(ODLGGUI:AHEADER)+1]  //!DELETED()
		NQTDEIXOS += FTRAZEIXO(ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"})]) 
	ENDIF
ENDIF

NVALPED += ROUND(NVAL1PEDAGI*NQTDEIXOS,2)
NVL2PED += ROUND(NVAL2PEDAGI*NQTDEIXOS,2)

RETURN NIL


/*/{PROTHEUS.DOC} FESCOLTA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FESCOLTA(CDIME, NDIME) 
// ======================================================================= \\

LOCAL NRET1 := 0
LOCAL NRET2 := 0
LOCAL NRET3 := 0
LOCAL NRET4 := 0
LOCAL NRET5 := 0
LOCAL NRET6 := 0

ZAN->(DBSETORDER(1))
ZAN->(DBSEEK(XFILIAL("ZAN")+CDIME))
WHILE ZAN->(!EOF())  .AND.  ZAN->ZAN_DIME==CDIME 
	IF NDIME >= ZAN->ZAN_DE  .AND.  NDIME <= ZAN->ZAN_ATE 
		NRET1 += ZAN->ZAN_CREDE1
		NRET2 += ZAN->ZAN_PRF1
		NRET3 += ZAN->ZAN_VELOC1
		NRET4 += ZAN->ZAN_CREDE2
		NRET5 += ZAN->ZAN_PRF2
		NRET6 += ZAN->ZAN_VELOC2
	ENDIF
	ZAN->(DBSKIP())
ENDDO 

RETURN {NRET1,NRET2,NRET3,NRET4,NRET5,NRET6}


/*/{PROTHEUS.DOC} FESCOLTASP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FESCOLTASP(CDIME, NDIME)
// ======================================================================= \\

LOCAL NRET1 := 0
LOCAL NRET2 := 0
LOCAL NRET3 := 0
LOCAL NRET4 := 0
LOCAL NRET5 := 0
LOCAL NRET6 := 0

ZAO->(DBSETORDER(1))
ZAO->(DBSEEK(XFILIAL("ZAO")+CDIME))
WHILE ZAO->(!EOF())  .AND. ZAO->ZAO_DIME==CDIME 
	IF NDIME >= ZAO->ZAO_DE  .AND.  NDIME <= ZAO->ZAO_ATE 
		NRET1 += ZAO->ZAO_CREDE1
		NRET2 += ZAO->ZAO_PRF1
		NRET3 += ZAO->ZAO_VELOC1
		NRET4 += ZAO->ZAO_CREDE2
		NRET5 += ZAO->ZAO_PRF2
		NRET6 += ZAO->ZAO_VELOC2
	ENDIF
	ZAO->(DBSKIP())
ENDDO 

RETURN {NRET1,NRET2,NRET3,NRET4,NRET5,NRET6}


/*/{PROTHEUS.DOC} FDIASCON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDIASCON() 		
// ======================================================================= \\
// --> ATUALIZA NDIASV,NDIASC,CTIPOCA BASEADO NO CONJUNTO TRANSPORTADOR (ODLGCON)

LOCAL NPOS

IF VALTYPE(ODLGCON)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	CTIPOCA := SPACE(LEN(ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_TIPOCA"})]))
	NDIASV  := 0
	NDIASC  := 0
	FOR NPOS:=1 TO LEN(ODLGCON:ACOLS)
		IF !ODLGCON:ACOLS[NPOS,LEN(ODLGCON:AHEADER)+1]  //!DELETED()
			NDIASV += ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DIASV" })]
			NDIASC += ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DIASC" })]
			IF ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DIASV" })]>0 .OR.;
			   ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DIASC" })]>0
				CTIPOCA := ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_TIPOCA"})] 
			ENDIF
		ENDIF
	NEXT
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCALCPRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCPRE() 
// ======================================================================= \\

LOCAL NPOS
LOCAL NPOS1 
LOCAL NPOSBAT

PRIVATE NDIASV
PRIVATE NDIASC
PRIVATE CTIPOCA

DO CASE
CASE VALTYPE(ODLGCON)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	FDIASCON() 									// ATUALIZA NDIASV,NDIASC,CTIPOCA BASEADO NO CONJUNTO TRANSPORTADOR (ODLGCON)
CASE VALTYPE(ODLGGUI)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	CTIPOCA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
	NDIASV  := 0
	NDIASC  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_HORVIA"})]
OTHERWISE
	RETURN NIL
ENDCASE

NVALESC := 0
NVL2ESC := 0
NVALPRE := 0
NVL2PRE := 0

IF VALTYPE(ODLGTRE)=="O" 						// SE O OBJETO JÁ FOI CRIADO

	FOR NPOS := 1 TO LEN(ODLGTRE:ACOLS)
		_CIDAVOL := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]
		IF !ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
				LOOP
			ENDIF
			NKMVE   := NKMVE1 := NKMVE2 := 0
			NKMCE   := NKMCE1 := NKMCE2 := 0
			CTIPANT := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]

			FOR NPOS1:=NPOS TO LEN(ODLGTRE:ACOLS)
				NPOS := NPOS1 
				IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="E"
					LOOP
				ENDIF
				IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]==CTIPANT
					NPOS--
					EXIT
				ENDIF

				IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]=="V"
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NKMVE2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ELSE
							NKMVE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ENDIF 
					ELSE
						NKMVE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMVE += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NKMCE2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ELSE
							NKMCE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ENDIF
					ELSE
						NKMCE1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMCE += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF
			NEXT

			IF NKMVE > 0
				ABATQTD := {}

				FOR NPOSBAT:=1 TO 6
					AADD(ABATQTD,{0,0,0,0,0,0})
				NEXT
				ABATQTD[1] := FESCOLTASP("1",NLARGCONT/1000)  //1=LARGURA
				ABATQTD[2] := FESCOLTASP("2",NCOMPCONT/1000)  //2=COMPRIMENTO
				ABATQTD[3] := FESCOLTASP("3",NALTUCONT/1000)  //3=ALTURA
				ABATQTD[6] := FESCOLTASP("6",NPESOCONT     )  //6=PESO

				NBATQTD := 0
				NBATPRE := 0
				NVELQTD := 0
				NVELPRE := 0

				FOR NPOSBAT:=1 TO LEN(ABATQTD)
					IF ABATQTD[NPOSBAT,1]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,1]
						NVELQTD := ABATQTD[NPOSBAT,3]
					ENDIF
					IF ABATQTD[NPOSBAT,2]>NBATPRE
						NBATPRE := ABATQTD[NPOSBAT,2]
						NVELPRE := ABATQTD[NPOSBAT,3]
					ENDIF
					IF ABATQTD[NPOSBAT,4]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,4]
						NVELQTD := ABATQTD[NPOSBAT,6]
					ENDIF
					IF ABATQTD[NPOSBAT,5]>NBATPRE
						NBATPRE := ABATQTD[NPOSBAT,5]
						NVELPRE := ABATQTD[NPOSBAT,6]
					ENDIF
				NEXT

				IF NBATPRE > 0
					NVALPRE += NBATPRE * (NKMVE1*XVALPRE)
					NVL2PRE += NBATPRE * (NKMVE2*XVALPRE)
				ENDIF
			ENDIF

			IF NKMCE > 0
				ABATQTD:={}
				FOR NPOSBAT:=1 TO 6
					AADD(ABATQTD,{0,0,0,0,0,0})
				NEXT
				ABATQTD[1] := FESCOLTASP("1",NLARGCONG/1000)  	// 1=LARGURA
				ABATQTD[2] := FESCOLTASP("2",NCOMPCONG/1000)  	// 2=COMPRIMENTO
				ABATQTD[3] := FESCOLTASP("3",NALTUCONG/1000)  	// 3=ALTURA
				ABATQTD[6] := FESCOLTASP("6",NPESOCONG     )  	// 6=PESO

				NBATQTD := 0
				NBATPRE := 0
				NVELQTD := 0
				NVELPRE := 0
				FOR NPOSBAT:=1 TO LEN(ABATQTD)
					IF ABATQTD[NPOSBAT,1]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,1]
						NVELQTD := ABATQTD[NPOSBAT,3]
					ENDIF
					IF ABATQTD[NPOSBAT,2]>NBATPRE
						NBATPRE := ABATQTD[NPOSBAT,2]
						NVELPRE := ABATQTD[NPOSBAT,3]
					ENDIF
					IF ABATQTD[NPOSBAT,4]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,4]
						NVELQTD := ABATQTD[NPOSBAT,6]
					ENDIF
					IF ABATQTD[NPOSBAT,5]>NBATPRE
						NBATPRE := ABATQTD[NPOSBAT,5]
						NVELPRE := ABATQTD[NPOSBAT,6]
					ENDIF
				NEXT

				IF NBATQTD>0
					DO CASE
					CASE CTIPOCA=="K"
						NVALESC:=NBATQTD*(NKMCE1*XVALBAT)
						NVL2ESC:=NBATQTD*(NKMCE2*XVALBAT)
					CASE CTIPOCA=="D"			// NÃO DEVERÁ EXISTIR CTIPOCA == "D" PARA GUINCHO OU GRUA
						NVALESC:=XBATDIA*NDIASC
					ENDCASE
				ENDIF

				IF NBATPRE>0
					NVALPRE+=NBATPRE*(NKMCE1*XVALPRE)
					NVL2PRE+=NBATPRE*(NKMCE2*XVALPRE)
				ENDIF
			ENDIF
		ENDIF
	NEXT

ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCALCPRF
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCPRF() 
// ======================================================================= \\

LOCAL   NPOS
LOCAL   NPOS1 
LOCAL   NPOSBAT

PRIVATE NDIASV
PRIVATE NDIASC
PRIVATE CTIPOCA

DO CASE
CASE VALTYPE(ODLGCON)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	FDIASCON() 									// ATUALIZA NDIASV,NDIASC,CTIPOCA BASEADO NO CONJUNTO TRANSPORTADOR (ODLGCON)
CASE VALTYPE(ODLGGUI)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	CTIPOCA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
	NDIASV  := 0
	NDIASC  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_HORVIA"})]
OTHERWISE
	RETURN NIL
ENDCASE

NVALPRF := 0
NVL2PRF := 0

IF VALTYPE(ODLGTRE)=="O"  						// SE O OBJETO JÁ FOI CRIADO

	FOR NPOS:=1 TO LEN(ODLGTRE:ACOLS)

		_CIDAVOL := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]
		IF !ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="F"
				LOOP
			ENDIF
			NKMVF   := NKMVF1:=NKMVF2:=0
			NKMCF   := NKMCF1:=NKMCF2:=0
			CTIPANT := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]
			FOR NPOS1:=NPOS TO LEN(ODLGTRE:ACOLS)
				NPOS:=NPOS1
				IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]=="F"
					LOOP
				ENDIF
				IF !ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]==CTIPANT
					NPOS--
					EXIT
				ENDIF
				IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]=="V"
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NKMVF2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ELSE
							NKMVF1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ENDIF
					ELSE
						NKMVF1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMVF += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ELSE
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NKMCF2 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ELSE
							NKMCF1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
						ENDIF
					ELSE
						NKMCF1 += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
					ENDIF
					NKMCF += ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
				ENDIF
			NEXT NPOS1 

			IF NKMVF>0
				ABATQTD := {} 
				FOR NPOSBAT:=1 TO 6
					AADD(ABATQTD,{0,0,0,0,0,0})
				NEXT
				ABATQTD[1] := FESCOLTA("1",NLARGCONT/1000)  	// 1=LARGURA
				ABATQTD[2] := FESCOLTA("2",NCOMPCONT/1000)  	// 2=COMPRIMENTO
				ABATQTD[3] := FESCOLTA("3",NALTUCONT/1000)  	// 3=ALTURA
				ABATQTD[6] := FESCOLTA("6",NPESOCONT     )  	// 6=PESO
				NBATQTD    := 0
				NBATPRF    := 0
				NVELQTD    := 0
				NVELPRF    := 0
				FOR NPOSBAT:=1 TO LEN(ABATQTD)
					IF ABATQTD[NPOSBAT,4]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,4]
						IF NVELQTD==0 .OR. NVELQTD>ABATQTD[NPOSBAT,6]
							NVELQTD := ABATQTD[NPOSBAT,6]
						ENDIF
					ENDIF
					IF ABATQTD[NPOSBAT,5]>0
						NBATPRF := ABATQTD[NPOSBAT,5]
						IF NVELPRF==0 .OR. NVELPRF>ABATQTD[NPOSBAT,6]
							NVELPRF := ABATQTD[NPOSBAT,6]
						ENDIF
					ENDIF
				NEXT NPOSBAT 
				IF NBATPRF > 0
					NFATPRF:=0
					FOR NPOSBAT:=1 TO LEN(XFATPRF)
						IF NVELPRF==XFATPRF[NPOSBAT,1]
							NFATPRF:=XFATPRF[NPOSBAT,2]
							EXIT
						ENDIF
					NEXT
					NVL2PRF+=NBATPRF*(NKMVF2*NFATPRF)
					NVALPRF+=NBATPRF*(NKMVF1*NFATPRF)
				ENDIF
			ENDIF

			IF NKMCF > 0
				NFATPRF := 0
				ABATQTD := {}
				FOR NPOSBAT:=1 TO 6
					AADD(ABATQTD,{0,0,0,0,0,0})
				NEXT
				ABATQTD[1] := FESCOLTA("1",NLARGCONG/1000)  //1=LARGURA
				ABATQTD[2] := FESCOLTA("2",NCOMPCONG/1000)  //2=COMPRIMENTO
				ABATQTD[3] := FESCOLTA("3",NALTUCONG/1000)  //3=ALTURA
				ABATQTD[6] := FESCOLTA("6",NPESOCONG     )  //6=PESO
				NBATQTD    := 0
				NBATPRF    := 0
				NVELQTD    := 0
				NVELPRF    := 0
				FOR NPOSBAT:=1 TO LEN(ABATQTD)
					IF ABATQTD[NPOSBAT,1]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,1]
						IF NVELQTD==0 .OR. NVELQTD>ABATQTD[NPOSBAT,3]
							NVELQTD := ABATQTD[NPOSBAT,3]
						ENDIF
					ENDIF
					IF ABATQTD[NPOSBAT,2]>NBATPRF
						NBATPRF := ABATQTD[NPOSBAT,2]
						IF NVELPRF==0 .OR. NVELPRF>ABATQTD[NPOSBAT,3]
							NVELPRF := ABATQTD[NPOSBAT,3]
						ENDIF
					ENDIF
					IF ABATQTD[NPOSBAT,4]>NBATQTD
						NBATQTD := ABATQTD[NPOSBAT,4]
						IF NVELQTD==0 .OR. NVELQTD>ABATQTD[NPOSBAT,6]
							NVELQTD := ABATQTD[NPOSBAT,6]
						ENDIF
					ENDIF
					IF ABATQTD[NPOSBAT,5]>NBATPRF
						NBATPRF := ABATQTD[NPOSBAT,5]
						IF NVELPRF==0 .OR. NVELPRF>ABATQTD[NPOSBAT,6]
							NVELPRF := ABATQTD[NPOSBAT,6]
						ENDIF
					ENDIF
				NEXT
				IF NBATQTD>0
					DO CASE
					CASE CTIPOCA=="K"
						IF FP0->FP0_TIPOSE $ "E;L"
							IF _CIDAVOL == "V"
								NVL2ESC+=NBATQTD*(NKMCF2*XVALBAT)
							ELSE
								NVALESC+=NBATQTD*(NKMCF1*XVALBAT)
							ENDIF
						ELSE
							NVALESC+=NBATQTD*(NKMCF*XVALBAT)
						ENDIF
					CASE CTIPOCA=="H"
						IF FP0->FP0_TIPOSE $ "E;L"
							IF _CIDAVOL == "V"
								NVL2ESC:=NBATQTD*(NKMCF2*XVALBAT)
							ELSE
								NVALESC:=NBATQTD*(NKMCF1*XVALBAT)
							ENDIF
						ELSE
							NVALESC:=NBATQTD*(NKMCF*XVALBAT)
						ENDIF
					CASE CTIPOCA=="D"			// NÃO DEVERÁ EXISTIR CTIPOCA == "D" PARA GUINCHO OU GRUA
						NVALESC:=XBATDIA*NDIASC
					CASE CTIPOCA=="M"
						IF FP0->FP0_TIPOSE $ "E;L"
							IF _CIDAVOL == "V"
								NVL2ESC:=NBATQTD*(NKMCF2*XVALBAT)
							ELSE
								NVALESC:=NBATQTD*(NKMCF1*XVALBAT)
							ENDIF
						ELSE
							NVALESC:=NBATQTD*(NKMCF*XVALBAT)
						ENDIF
					CASE CTIPOCA=="F"
						IF FP0->FP0_TIPOSE $ "E;L"
							IF _CIDAVOL == "V"
								NVL2ESC:=NBATQTD*(NKMCF2*XVALBAT)
							ELSE
								NVALESC:=NBATQTD*(NKMCF1*XVALBAT)
							ENDIF
						ELSE
							NVALESC:=NBATQTD*(NKMCF*XVALBAT)
						ENDIF
					ENDCASE
				ENDIF
				IF NBATPRF>0
					NFATPRF:=0
					FOR NPOSBAT:=1 TO LEN(XFATPRF)
						IF NVELPRF==XFATPRF[NPOSBAT,1]
							NFATPRF:=XFATPRF[NPOSBAT,2]
							EXIT
						ENDIF
					NEXT
					NVL2PRF+=NBATPRF*(NKMCF2*NFATPRF)
					NVALPRF+=NBATPRF*(NKMCF1*NFATPRF)
				ENDIF
			ENDIF
		ENDIF

	NEXT

ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCALCINV
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCINV() 
// ======================================================================= \\

LOCAL NPOS

NVALINV := 0
NVL2INV := 0

IF VALTYPE(ODLGTRE)=="O"  						// SE O OBJETO JÁ FOI CRIADO

	FOR NPOS:=1 TO LEN(ODLGTRE:ACOLS)

		_CIDAVOL :=  ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]

		IF !ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			CORIGEM := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ORIGEM"})]
			CDESTIN := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DESTIN"})]
			CROTA   := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })]
			CETAPA  := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA" })]
			IF ! FP3->(DBSEEK(XFILIAL("FP3")+CORIGEM+CDESTIN+CROTA+CETAPA)) .OR. FP3->FP3_TEMBLO=="S"
				LOOP
			ENDIF

			IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]=="V"
				IF NPESOCONT>XPESOINV .OR. NLARGCONT>XLARGINV .OR. NALTUCONT>XALTUINV .OR. NCOMPCONT>XCOMPINV
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NVL2INV+=XVALINV
						ELSE
							NVALINV+=XVALINV
						ENDIF
					ELSE
						NVALINV+=XVALINV
					ENDIF
				ENDIF
			ELSE
				IF NPESOCONG>XPESOINV .OR. NLARGCONG>XLARGINV .OR. NALTUCONG>XALTUINV .OR. NCOMPCONG>XCOMPINV
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NVL2INV+=XVALINV
						ELSE
							NVALINV+=XVALINV
						ENDIF
					ELSE
						NVALINV+=XVALINV
					ENDIF
				ENDIF
			ENDIF
		ENDIF

	NEXT

ENDIF

IF VALTYPE(ODLGTRA)=="O"  						// VERIFICA A ABA DA VIAGEM
	FOR NPOS:=1 TO LEN(ODLGTRA:ACOLS)
		IF ! ODLGTRA:ACOLS[NPOS,LEN(ODLGTRA:AHEADER)+1]  //!DELETED()
			CORIGEM  := ALLTRIM(ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNORI"})]) + "/" + ;
					    ALLTRIM(ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTORI"})])

			CDESTINO := ALLTRIM(ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNDES"})]) + "/" + ;
					    ALLTRIM(ODLGTRA:ACOLS[NPOS][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDES"})])

			IF CORIGEM == "SANTOS/SP" .AND. CORIGEM != CDESTINO
				IF NPESOCONG > 45 .OR. NLARGCONG > 4000 .OR. NALTUCONG > 5200 .OR. NCOMPCONG > 30000
					NVALINV+=XVALINV + XVALALE
				ENDIF
			ENDIF

			IF CDESTINO == "SANTOS/SP" .AND. CORIGEM != CDESTINO
				IF NPESOCONG > 70 .OR. NLARGCONG > 5500 .OR. NALTUCONG > 5300 .OR. NCOMPCONG > 30000
					NVALINV+=XVALINV + XVALALE
				ENDIF
			ENDIF
		ENDIF
	NEXT
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCALCALE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCALE() 
// ======================================================================= \\

LOCAL NPOS

NVALALE := 0
NVL2ALE := 0

IF VALTYPE(ODLGTRE)=="O"  						// SE O OBJETO JÁ FOI CRIADO

	FOR NPOS:=1 TO LEN(ODLGTRE:ACOLS)

		_CIDAVOL := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_IDAVOL"})]
		IF !ODLGTRE:ACOLS[NPOS,LEN(ODLGTRE:AHEADER)+1]  //!DELETED()
			CORIGEM := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ORIGEM"})]
			CDESTIN := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DESTIN"})]
			CROTA   := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })]
			CETAPA  := ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA" })]
			IF ! FP3->(DBSEEK(XFILIAL("FP3")+CORIGEM+CDESTIN+CROTA+CETAPA)) .OR. FP3_TEMALE !="S"
				LOOP
			ENDIF

			IF ODLGTRE:ACOLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})]=="V"
				IF NPESOCONT>XPESOALE .OR. NLARGCONT>XLARGALE .OR. NALTUCONT>XALTUALE .OR. NCOMPCONT>XCOMPALE
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NVL2ALE+=XVALALE
						ELSE
							NVALALE+=XVALALE
						ENDIF
					ELSE
						NVALALE+=XVALALE
					ENDIF
				ENDIF
			ELSE
				IF NPESOCONG>XPESOALE .OR. NLARGCONG>XLARGALE .OR. NALTUCONG>XALTUALE .OR. NCOMPCONG>XCOMPALE
					IF FP0->FP0_TIPOSE $ "E;L"
						IF _CIDAVOL == "V"
							NVL2ALE+=XVALALE
						ELSE
							NVALALE+=XVALALE
						ENDIF
					ELSE
						NVALALE+=XVALALE
					ENDIF
				ENDIF
			ENDIF
		ENDIF

	NEXT

ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUGUI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUGUI() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS:=1 TO LEN(OGUI_COLS)
	WOBRA := OGUI_COLS[NPOS][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_OBRA"})]
	IF COBRA<>WOBRA
		AADD(ACOLS0,ACLONE(OGUI_COLS[NPOS]))
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGGUI:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGGUI:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OGUI_COLS0[1]))
ENDIF

OGUI_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZGUI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZGUI()  
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0   := {}
LOCAL AIT      := {}
LOCAL ACOLSAUX := {}
LOCAL NCONT    := 0
LOCAL NX       := 0 
LOCAL NY       := 0 

FOBRA()

FOR NPOS := 1 TO LEN(OGUI_COLS)
	WOBRA := OGUI_COLS[NPOS][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_OBRA"})]
	IF COBRA==WOBRA
		AADD(ACOLS0,ACLONE(OGUI_COLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OGUI_COLS0[1]))
ENDIF

ODLGGUI:ACOLS := ACLONE(ACOLS0)
ODLGGUI:OBROWSE:REFRESH()

ACOLS0 := {}
NCONT  := 0
FOR NX := 1 TO LEN(OTURNO_COLS)
	AIT      := OTURNO_COLS[NX]
	ACOLSAUX := {}

	FOR NY := 1 TO LEN(AIT)
		WOBRA := AIT[NY][ASCAN(OGETVT:AHEADER,{|X|ALLTRIM(X[2])=="FPE_OBRA"})]
		IF COBRA==WOBRA
			AADD(ACOLSAUX , ACLONE(AIT[NY]))
		ENDIF
	NEXT NY

	IF LEN(ACOLSAUX) > 0
		NCONT++
		AADD(ACOLS0,{})
		ACOLS0[NCONT] := ACOLSAUX
	ENDIF
NEXT NX

ACOLSTURNO := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUPLA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUPLA() 
// ======================================================================= \\
LOCAL NPOS
LOCAL ACOLS0  := {}

FOBRA()

FOR NPOS:=1 TO LEN(OPLA_COLS)
	WOBRA := OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
	IF COBRA != WOBRA
		AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
	ENDIF
NEXT NPOS 

FOR NPOS := 1 TO LEN(ODLGPLA:ACOLS)
	AADD( ACOLS0, ACLONE(ODLGPLA:ACOLS[NPOS]))
NEXT NPOS 

IF EMPTY(ACOLS0) 
	AADD( ACOLS0, ACLONE( OPLA_COLS0[1] ) ) 
ENDIF 

OPLA_COLS := ACLONE(ACOLS0) 

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZPLA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZPLA() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

LZAGNFRET := SUPERGETMV("MV_LOCX259",.F.,.F.)

FOBRA()

FOR NPOS := 1 TO LEN(OPLA_COLS)
	WOBRA := OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
	IF COBRA == WOBRA
		IF LZAGNFRET 							// VARIÁVEL QUE DEFINE SE É PERMITIDO EXIBIR NA ABA LOCAÇÕES ITENS QUE JÁ FORAM RETORNADOS, PADRÃO EXIBE;
			IF SB1->( MSSEEK( XFILIAL("SB1")+ OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]) )
				IF ALLTRIM(SB1->B1_GRUPO) $ @(ALLTRIM(CGRPAND))
					AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
				ELSE
					DO CASE
					CASE EMPTY( OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET"})] ) .AND. UPPER(CFILTROF12)==UPPER("SEM NF RETORNO")
						AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
					CASE !EMPTY( OPLA_COLS[NPOS][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFRET"})] ) .AND. UPPER(CFILTROF12)==UPPER("COM NF RETORNO")
						AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
					CASE UPPER(CFILTROF12)==UPPER("AMBOS")
						AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
					OTHERWISE
						AADD( OPLACOLRET, ACLONE( OPLA_COLS[NPOS] ) )
					ENDCASE
				ENDIF
			ENDIF
		ELSE
			AADD( ACOLS0, ACLONE( OPLA_COLS[NPOS] ) )
		ENDIF
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD( ACOLS0, ACLONE( OPLA_COLS0[1] ) )
ENDIF

ODLGPLA:ACOLS := ACLONE(ACOLS0)
ODLGPLA:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUTRA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUTRA() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOR NPOS:=1 TO LEN(ODLGTRA:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGTRA:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OTRA_COLS0[1]))
ENDIF

OTRA_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZTRA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZTRA()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOR NPOS:=1 TO LEN(OTRA_COLS)
	AADD(ACOLS0,ACLONE(OTRA_COLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OTRA_COLS0[1]))
ENDIF

ODLGTRA:ACOLS := ACLONE(ACOLS0)
ODLGTRA:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUROT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUROT()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0  := {}
LOCAL WSEQTRA := SPACE(3)
LOCAL WSEQGRU := SPACE(3)

FOBRA()

FOR NPOS:=1 TO LEN(OROT_COLS)
	WOBRA   := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_OBRA"})]
 //	WSEQTRA := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQTRA"})]
	WSEQGUI := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGUI"})]
 //	WSEQGRU := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGRU"})]
	IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU <> WOBRA+WSEQTRA+WSEQGUI+WSEQGRU
		AADD(ACOLS0,ACLONE(OROT_COLS[NPOS]))
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGROT:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGROT:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OROT_COLS0[1]))
ENDIF

OROT_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZROT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZROT()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0  := {}
LOCAL WSEQTRA := SPACE(3)
LOCAL WSEQGRU := SPACE(3)

FOBRA()

FOR NPOS := 1 TO LEN(OROT_COLS)
	WOBRA   := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_OBRA"})]
 //	WSEQTRA := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQTRA"})]
	WSEQGUI := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGUI"})]
 //	WSEQGRU := OROT_COLS[NPOS][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGRU"})]
	IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU == WOBRA+WSEQTRA+WSEQGUI+WSEQGRU
		AADD(ACOLS0,ACLONE(OROT_COLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OROT_COLS0[1]))
ENDIF

ODLGROT:ACOLS := ACLONE(ACOLS0)
ODLGROT:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUTRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUTRE()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0  := {}
LOCAL WSEQTRA := SPACE(3)
LOCAL WSEQGUI := SPACE(3)
LOCAL WSEQGRU := SPACE(3)
LOCAL WSEQCAR := SPACE(3)

FOBRA()

IF EMPTY(ODLGTRE:ACOLS[1][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })])
	FTRAZTRE()
ENDIF

FOR NPOS:=1 TO LEN(OTRE_COLS)
	WOBRA  := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"})]

	IF GDFIELDPOS("FPD_SEQTRA", ODLGTRE:AHEADER) > 0
		WSEQTRA := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})]
	ENDIF
	IF GDFIELDPOS("FPD_SEQGUI", ODLGTRE:AHEADER) > 0
		WSEQGUI := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})]
	ENDIF
	IF GDFIELDPOS("FPD_SEQGRU", ODLGTRE:AHEADER) > 0
		WSEQGRU := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})]
	ENDIF
	IF GDFIELDPOS("FPD_SEQCAR", ODLGTRE:AHEADER) > 0
		WSEQCAR := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})]
	ENDIF

	IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR != WOBRA+WSEQTRA+WSEQGUI+WSEQGRU+WSEQCAR
		AADD(ACOLS0,ACLONE(OTRE_COLS[NPOS]))
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGTRE:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGTRE:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OTRE_COLS0[1]))
ENDIF

OTRE_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZTRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZTRE() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0  := {}
LOCAL WSEQTRA := SPACE(3)
LOCAL WSEQGUI := SPACE(3)
LOCAL WSEQGRU := SPACE(3)
LOCAL WSEQCAR := SPACE(3)

FOBRA()

FOR NPOS:=1 TO LEN(OTRE_COLS)
	WOBRA := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"})]

	IF GDFIELDPOS("FPD_SEQTRA", ODLGTRE:AHEADER) > 0
		WSEQTRA := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})]
	ENDIF
	IF GDFIELDPOS("FPD_SEQGUI", ODLGTRE:AHEADER) > 0
		WSEQGUI := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})]
	ENDIF
	IF GDFIELDPOS("FPD_SEQGRU", ODLGTRE:AHEADER) > 0
		WSEQGRU := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})]
	ENDIF
	IF GDFIELDPOS("FPD_SEQCAR", ODLGTRE:AHEADER) > 0
		WSEQCAR := OTRE_COLS[NPOS][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})]
	ENDIF

	IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR == WOBRA+WSEQTRA+WSEQGUI+WSEQGRU+WSEQCAR
		AADD(ACOLS0,ACLONE(OTRE_COLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OTRE_COLS0[1]))
ENDIF

ODLGTRE:ACOLS := ACLONE(ACOLS0)
ODLGTRE:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUCON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUCON()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS:=1 TO LEN(OCON_COLS)
	WOBRA   := OCON_COLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"  })]
	WSEQTRA := OCON_COLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})]
	WSEQCAR := OCON_COLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})]
	IF COBRA+CSEQTRA+CSEQCAR <> WOBRA+WSEQTRA+WSEQCAR 
		AADD(ACOLS0,ACLONE(OCON_COLS[NPOS])) 
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGCON:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGCON:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OCON_COLS0[1]))
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"  })] := COBRA
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] := CSEQTRA
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})] := CSEQCAR
ENDIF

OCON_COLS := ACLONE(ACOLS0) 

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZCON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZCON() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

IF VALTYPE(ODLGCON) == "O" 						// SE O OBJETO ESTIVER CRIADO
	FOR NPOS:=1 TO LEN(OCON_COLS)
		WOBRA   := OCON_COLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"  })]
		WSEQTRA := OCON_COLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})]
		WSEQCAR := OCON_COLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})]
		IF COBRA+CSEQTRA+CSEQCAR == WOBRA+WSEQTRA+WSEQCAR 
			AADD(ACOLS0,ACLONE(OCON_COLS[NPOS]))
		ENDIF
	NEXT

	IF EMPTY(ACOLS0)
		AADD(ACOLS0,ACLONE(OCON_COLS0[1]))
		ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"  })] := COBRA
		ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] := CSEQTRA
		ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})] := CSEQCAR
	ENDIF

	ODLGCON:ACOLS := ACLONE(ACOLS0)
	ODLGCON:OBROWSE:REFRESH()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FACUMUCAR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMUCAR()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0   := {}
LOCAL COBRACAR
LOCAL CTRACAR  := ""

COBRACAR := ODLGCAR:ACOLS[1][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"})]
CTRACAR  := ODLGCAR:ACOLS[1][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})]

FOBRA()

FOR NPOS:=1 TO LEN(OCAR_COLS)
	WOBRA   := OCAR_COLS[NPOS][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"})]
	WSEQTRA := OCAR_COLS[NPOS][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})]
	IF (COBRA+CSEQTRA<>WOBRA+WSEQTRA .AND. !EMPTY(WOBRA)) .OR. (COBRA+CSEQTRA<>COBRACAR+CTRACAR)
		AADD(ACOLS0,ACLONE(OCAR_COLS[NPOS]))
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGCAR:ACOLS)
	IF COBRA+CSEQTRA==COBRACAR+CTRACAR
		AADD(ACOLS0,ACLONE(ODLGCAR:ACOLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OCAR_COLS0[1]))
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"  })] := COBRA
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] := CSEQTRA
ENDIF

OCAR_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZCAR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZCAR() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS := 1 TO LEN(OCAR_COLS)
	WOBRA   := OCAR_COLS[NPOS][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"})]
	WSEQTRA := OCAR_COLS[NPOS][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})]
	IF COBRA+CSEQTRA == WOBRA+WSEQTRA
		AADD(ACOLS0,ACLONE(OCAR_COLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OCAR_COLS0[1]))
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"  })] := COBRA
	ACOLS0[LEN(ACOLS0)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] := CSEQTRA
ENDIF

ODLGCAR:ACOLS := ACLONE(ACOLS0)
ODLGCAR:OBROWSE:REFRESH()

RETURN NIL

/*/{PROTHEUS.DOC} FACUMUCUS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


// ======================================================================= \\
STATIC FUNCTION FACUMUCUS() 
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS:=1 TO LEN(OCUS_COLS)
	WOBRA   := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]
	WSEQTRA := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
	WSEQGUI := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})]
	WSEQGRU := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})]
	WSEQCAR := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})]
	IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR <> WOBRA+WSEQTRA+WSEQGUI+WSEQGRU+WSEQCAR
		AADD(ACOLS0,ACLONE(OCUS_COLS[NPOS]))
	ENDIF
NEXT

FOR NPOS := 1 TO LEN(ODLGCUS:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGCUS:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OCUS_COLS0[1]))
ENDIF

OCUS_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZCUS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZCUS()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS:=1 TO LEN(OCUS_COLS)
	WOBRA   := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]
	WSEQTRA := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
	WSEQGUI := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGUI"})]
	WSEQGRU := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQGRU"})]
	WSEQCAR := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQCAR"})]
	IF COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR == WOBRA+WSEQTRA+WSEQGUI+WSEQGRU+WSEQCAR 
		AADD(ACOLS0,ACLONE(OCUS_COLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(OCUS_COLS0[1]))
ENDIF

ODLGCUS:ACOLS := ACLONE(ACOLS0)
ODLGCUS:OBROWSE:REFRESH()

RETURN NIL

/*/{PROTHEUS.DOC} FACUMUDOC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


// ======================================================================= \\
STATIC FUNCTION FACUMUDOC()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS:=1 TO LEN(ODOC_COLS)
	WOBRA := ODOC_COLS[NPOS][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})]
	IF COBRA<>WOBRA
		AADD(ACOLS0,ACLONE(ODOC_COLS[NPOS]))
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGDOC:ACOLS)
	AADD(ACOLS0,ACLONE(ODLGDOC:ACOLS[NPOS]))
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(ODOC_COLS0[1]))
ENDIF

ODOC_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZDOC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZDOC()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}

FOBRA()

FOR NPOS:=1 TO LEN(ODOC_COLS)
	WOBRA := ODOC_COLS[NPOS][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})]
	IF COBRA==WOBRA
		AADD(ACOLS0,ACLONE(ODOC_COLS[NPOS])) 
	ENDIF 
NEXT 

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(ODOC_COLS0[1]))
ENDIF

ODLGDOC:ACOLS := ACLONE(ACOLS0)
ODLGDOC:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FACUMURES
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FACUMURES()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}
LOCAL CBECH  := SPACE(3)

FOBRA()

DO CASE
CASE FP0->FP0_TIPOSE == "E"						// EQUIPAMENTO
	CBECH := CSEQGUI
CASE FP0->FP0_TIPOSE == "T"						// TRANSPORTE
	CBECH := CSEQTRA
CASE FP0->FP0_TIPOSE == "L"						// LOCAÇÃO
	CBECH := CSEQGRU
ENDCASE

FOR NPOS:=1 TO LEN(ORES_COLS)
	WOBRA    := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"  })]
	WLOCACAO := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})]
	IF !EMPTY(WOBRA) .AND. !EMPTY(WLOCACAO)
		IF COBRA != WOBRA .OR. WLOCACAO != CBECH
			AADD(ACOLS0,ACLONE(ORES_COLS[NPOS]))
		ENDIF
	ELSE
		ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"  })] := "001"        
		ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := "001"
	ENDIF
NEXT

FOR NPOS:=1 TO LEN(ODLGRES:ACOLS)
	IF ! ATAIL( ODLGRES:ACOLS[NPOS] )			// DELETADO?
		AADD(ACOLS0,ACLONE(ODLGRES:ACOLS[NPOS]))
	ELSE
		AADD(ACOLS0,ACLONE(ODLGRES:ACOLS[NPOS])) // FRANK Z FUGA EM 28/09/2020
		AADD(ARESDEL,ACLONE(ODLGRES:ACOLS[NPOS]))
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(ORES_COLS0[1]))
ENDIF

ORES_COLS := ACLONE(ACOLS0)

RETURN NIL


/*/{PROTHEUS.DOC} FTRAZRES
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZRES()
// ======================================================================= \\

LOCAL NPOS
LOCAL ACOLS0 := {}
LOCAL CBECH  := SPACE(3)

FOBRA()

DO CASE
CASE FP0->FP0_TIPOSE == "E"						// EQUIPAMENTO
	CBECH := CSEQGUI
CASE FP0->FP0_TIPOSE == "T"						// TRANSPORTE
	CBECH := CSEQTRA
CASE FP0->FP0_TIPOSE == "L"						// LOCAÇÃO
	CBECH := CSEQGRU
ENDCASE

FOR NPOS := 1 TO LEN(ORES_COLS)
	WOBRA    := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"   })]
	WLOCACAO := ORES_COLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI" })]
	IF COBRA == WOBRA .AND. WLOCACAO == CBECH
		AADD( ACOLS0, ACLONE(ORES_COLS[NPOS]) )
	ENDIF
NEXT

IF EMPTY(ACOLS0)
	AADD(ACOLS0,ACLONE(ORES_COLS0[1]))
ENDIF

ODLGRES:ACOLS := ACLONE(ACOLS0)
ODLGRES:OBROWSE:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FCALCITEM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCITEM() 
// ======================================================================= \\

IF ! FWHEN()
	RETURN NIL
ENDIF

IF ! MSGYESNO("CONFIRMA A EXECUÇÃO DO CÁLCULO ?" , "GPO - LOCC001.PRW") 
	RETURN NIL
ENDIF

IF VALTYPE(ODLGCON)=="O"
	FCALCCON()
ENDIF
FCALCPED()
FCALCLSR()
FCALCTUV()
FCALCTAP()
FCALCPRE()
FCALCPRF()
FCALCINV()
FCALCALE()

NVALINV += NVALALE  							// JUNTA BLOQ.SERRA COM ALEMOA
NVL2INV += NVL2ALE  							// JUNTA BLOQ.SERRA COM ALEMOA

FCALCCUS()
FCALCGUI(.T.)
FCALCPLA(.T.)
FCALCTRA(.T.)

FCALCTXADM()

RETURN NIL


/*/{PROTHEUS.DOC} FCALCTXADM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCTXADM()
// ======================================================================= \\

LOCAL AAREA	   := GETAREA()
LOCAL AAREAZAB := FP7->(GETAREA())
LOCAL NVALCOB  := 0
LOCAL NTXADM   := 0
LOCAL NRESULT  := 0
LOCAL NX       := 0 

NVALCOB := 0
IF VALTYPE(ODLGTRA) == "O" 						// SE O OBJETO JÁ FOI CRIADO
	NTXADM	:= ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_TXADM"})]
ENDIF 

FOR NX := 1 TO LEN(ODLGRES:ACOLS)
	DBSELECTAREA("FP7")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP7")+ODLGRES:ACOLS[NX, GDFIELDPOS("FP6_CODIGO",ODLGRES:AHEADER)])
	IF FP7->FP7_ID <> "12"  .AND. !ODLGRES:ACOLS[NX,LEN(ODLGRES:AHEADER)+1]
		NVALCOB += ODLGRES:ACOLS[NX, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
	ENDIF
NEXT NX
NRESULT := (NVALCOB * NTXADM) / 100

ADDRESP("12" , NRESULT , "") 

AADD(ORES_COLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))//ADD NO ACOLSGERAL

N3COMP := NCOMPCONG
N3LARG := NLARGCONG
N3ALTU := NALTUCONG
N3PESO := NPESOCONG

RESTAREA(AAREAZAB)
RESTAREA(AAREA)

RETURN NIL 


/*/{PROTHEUS.DOC} FCALCCUS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCCUS()
// ======================================================================= \\

NVALCUS := NVALLSR+NVALPRE+NVALPRF+NVALTAP+NVALTUV+NVALTUR+NVALESC+NVALPED+NVALINV+NVALIPT+NVALACO+NVALCET
NVALCUS += NVALSEM+NVALTVA+NVALTEL+NVALOUT+NVALCON+NVALADI+NVALAUX

NVALCUS += NINSTRU + NBALSA + NDESDTA + NMONDES + NAPOGUI + NCAVEXT	// ADICIONA OS VALORES INSTRUMENTAÇÃO, BALSA, DESPACHANTE DTA,
NVALCUS += NMOBENC + NDMOENC										// MONTAGEM/DESMONTAGEM, CARRO APOIO/GUINDAUTO E CAVALO EXTRA NO TOTAL DAS TARIFAS

NVL2CUS := NVL2LSR+NVL2PRE+NVL2PRF+NVL2TAP+NVL2TUV+NVL2TUR+NVL2ESC+NVL2PED+NVL2INV+NVL2IPT+NVL2ACO+NVL2CET
NVL2CUS += NVL2SEM+NVL2TVA+NVL2TEL+NVL2OUT+NVL2CON+NVL2ADI+NVL2AUX

NVALCUG := NVALCUS+NVL2CUS
NVALCUT := NVALCUS+NVL2CUS

RETURN NIL


/*/{PROTHEUS.DOC} FCALCTRA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCTRA(LCALCITEM)
// ======================================================================= \\

LOCAL CTIPOCA
LOCAL NPOS     := 0 
LOCAL NX       := 0 

IF !VALTYPE(ODLGCON)=="O" 						// SE O OBJETO JÁ FOI CRIADO
	RETURN
ENDIF

NVALDIASV := 0
NVALDIASC := 0
NVALBASE  := 0
NVALBASET := 0

NVADDIASV := 0
NVADDIASC := 0
NVADBASE  := 0
NVADBASET := 0

NVAKDIASV := 0
NVAKDIASC := 0
NVAKBASE  := 0
NVAKBASET := 0

NVALKMV   := NKMV
NVALKMC   := NKMC

FOR NPOS:=1 TO LEN(ODLGCON:ACOLS)
	IF !ODLGCON:ACOLS[NPOS,LEN(ODLGCON:AHEADER)+1]  //!DELETED()
		NPOSICAO  := 0
		NPOSICAO  := NPOS
		NVALDIASV += ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DIASV"})]
		NVALDIASC += ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DIASC"})]

		CTIPOCA   := ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_TIPOCA"})]
		CTIPOCAT  := FTRAZCBOX("FP8_TIPOCA",ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_TIPOCA"})])

		NVALBASE  += ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_VRDIA"})]
		NVAKBASE  += FTRAZVRKM(ODLGCON:ACOLS[NPOS][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_TRANSP"})])
		NVADBASE  += FTRAZVRDIA(ODLGCON:ACOLS[NPOSICAO][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_TRANSP"})])
	ENDIF
NEXT

IF LCALCITEM
	NVADBASEI := 0
	NVAKBASEI := 0
ENDIF

NVADBASET  := (NVALDIASV+NVALDIASC)*NVADBASEI
NVADFRETES := NVADBASET+NVALCUS

NVAKBASET  := (NVALKMV+NVALKMC)*NVAKBASEI
NVAKFRETES := NVAKBASET+NVALCUS

IF CTIPOCA=="K"
	NVALBASET  := (NVALKMV+NVALKMC)*NVALBASE
	NVALFRETES := NVALBASET+NVALCUS
ELSE
	NVALBASET  := (NVALDIASV+NVALDIASC)*NVALBASE
	NVALFRETES := NVALBASET+NVALCUS
ENDIF

FACUMUCUS()
SUMVALRES()
LOCA00176(.T.)
SUMVALRES()

NVALRENTG := NVALVIAGEM-NVALCUSTG

// VALOR A COBRAR 'RESPONSABILIDADES'
NVALCUT := 0
FOR NX := 1 TO LEN(ODLGRES:ACOLS)
	NVALCUT += ODLGRES:ACOLS[NX, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
NEXT NX
OVALCUT:REFRESH()

NVALPRET := NVALCUT+NVALFECHT
OVALPRET:REFRESH()

RETURN NIL 


/*/{PROTHEUS.DOC} FCALCGUI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCGUI(LCALCITEM)
// ======================================================================= \\

LOCAL   CTIPOCA
LOCAL   NPREDIA
LOCAL   NVRHOR
LOCAL   NQTMES
LOCAL   NQTDIA
LOCAL   NDIATURNO
LOCAL   NHRSTURNO
LOCAL   NX        := 0 

PRIVATE ODLGVT

IF ! VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

IF ! VALTYPE(OGETVT)=="O"
	TURVAL(10 , ODLGGUI) 
ENDIF

NVALMOB  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
NVALDES  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
NVALSEG  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})]

CTIPOISS := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPISS" })]
CTIPOSEG := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPSEGU"})]
CTIPOCA  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
NPREDIA  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
NVRHOR   := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR" })]
NMINDIA  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})] 
NMINMES  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINMES"})] 
NQTMES   := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTMES" })] 
NQTDIA   := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTDIA" })] 

NDIATURNO := 0
NHRSTURNO := 0

// VALORES DE TURNOS
IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 .AND. COBRA==OGETVT:ACOLS[1, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI==OGETVT:ACOLS[1, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
	NDIATURNO := 0
	NHRSTURNO := 0
ENDIF
NVALTUR1 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR1)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 .AND. COBRA==OGETVT:ACOLS[2, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI==OGETVT:ACOLS[2, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
	NDIATURNO := 0
	NHRSTURNO := 0
ENDIF
NVALTUR2 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR2)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 .AND. COBRA==OGETVT:ACOLS[3, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI==OGETVT:ACOLS[3, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
	NDIATURNO := 0
	NHRSTURNO := 0
ENDIF
NVALTUR3 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR3)

CNUMACT  := IIF( VALTYPE(OGETVT)=="O" , LEN(OGETVT:ACOLS) , 1) 

IF NQTMES==0 .AND. NQTDIA==0
	DO CASE
	CASE CTIPOCA=="H"
		NVALEQU := (NPREDIA*NVRHOR)				// * NMINDIA
	CASE CTIPOCA=="D"
		NVALEQU := (NPREDIA*NVRHOR)				// * NMINDIA
	CASE CTIPOCA=="M"
		NVALEQU := (NPREDIA*NVRHOR) 			// * NMINMES
	CASE CTIPOCA=="F"
		NVALEQU := NVRHOR
	OTHERWISE
		NVALEQU := 0
	ENDCASE
ELSE
	DO CASE
	CASE CTIPOCA=="H"
		NVALEQU := (NQTMES*NMINMES*NVRHOR)+(NQTDIA*NMINDIA*NVRHOR)
	CASE CTIPOCA=="D"
		NVALEQU := (NQTMES*NMINMES*NVRHOR)+(NQTDIA*NMINDIA*NVRHOR)
	CASE CTIPOCA=="M"
		NVALEQU := (NQTMES*NMINMES*NVRHOR)+(NQTDIA*NMINDIA*NVRHOR)
	CASE CTIPOCA=="F"
		NVALEQU := NVRHOR
	OTHERWISE
		NVALEQU := 0
	ENDCASE
ENDIF

NVALEQU += NVALTUR1+NVALTUR2+NVALTUR3

NVALBASGT := NVALEQU  							// VR.BASE TOTAL (GUINDASTE)

// VALOR A COBRAR 'RESPONSABILIDADES'
NVALCOBR := 0
FOR NX := 1 TO LEN(ODLGRES:ACOLS)
	NVALCOBR += ODLGRES:ACOLS[NX, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
NEXT NX
OVALCOBR:REFRESH()

NVALTCP := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]
NVALGUI := (NVALEQU+NVALMOB+NVALDES)+NVALCUS+NVALTCP+NVALVIS

NPERISS := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERISS"})]
IF OFOLDER:NOPTION == NFOLDERGUI
	IF VALTYPE(M->FP4_PERISS) == "N" .AND. ALLTRIM(SX3->X3_CAMPO) == "FP4_PERISS"
		NPERISS := M->FP4_PERISS
	ENDIF
ENDIF

NBASISS  := NVALEQU+NVALMOB+NVALDES+NVALTCP+NVALSEG+NVALCOBR
NVALISS  := LOCA00158(NBASISS,NPERISS,CTIPOISS)  //CALCULA O ISS DOS GUINDASTES

NPREDIAG := NPREDIA
NVALBASG := NVRHOR

NVALMOBG := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
NVALDESG := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
NVALTACG := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})] 

NVALISSG := NVALISS
NVALSEGG := NVALSEG

IF CTIPOISS == "I"  							// I=INCLUSO, N=N/A, C=CLIENTE
	NVALTOTG := NVALMOBG+NVALDESG+NVALSEGG+NVALBASGT+NVALTACG+NVALCOBR
ELSE
	NVALTOTG := NVALMOBG+NVALDESG+NVALISSG+NVALSEGG+NVALBASGT+NVALTACG+NVALCOBR
ENDIF

SUMVALRES()
NVALRENTG := NVALTOTG - NVALCUSTG
NVALCUSIG := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_CUSIND" })]
OVALRENTG:REFRESH()
OVALCUSIG:REFRESH()

IF LCALCITEM
	NVAMMOBG := NVALMOBG
	NVAMDESG := NVALDESG
	NVAMISSG := NVALISSG
	NVAMSEGG := NVALSEGG
	NVAMTACG := NVALTACG

	DO CASE
	CASE CTIPOISS=="I"
		NVAMISSG := 0
	CASE CTIPOISS=="N"
		NVAMISSG := NVALISSG
	CASE CTIPOISS=="C"
		NVAMISSG := NVALISSG
	CASE CTIPOISS=="X"
		NVAMISSG := 0
	ENDCASE

	DO CASE
	CASE CTIPOSEG=="I"
		NVAMSEGG :=0
	CASE CTIPOSEG=="N"
		NVAMSEGG :=NVALSEGG
	CASE CTIPOSEG=="C"
		NVAMSEGG :=NVALSEGG
	CASE CTIPOSEG=="X"
		NVAMSEGG :=0
	ENDCASE
ENDIF

NVAMTOTG := NVAMMOBG+NVAMDESG+NVAMISSG+NVAMSEGG+NVALBASGT+NVALTACG

ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VALAS" })] := NVALTOTG

RETURN NIL


/*/{PROTHEUS.DOC} FCALCPLA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCPLA(LCALCITEM)
// ======================================================================= \\

IF !VALTYPE(ODLGPLA)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

IF FP0->FP0_TIPOSE == "L"
	LCALCITEM := .F.
ENDIF

DO CASE
CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"}) > 0
	NPREDIAU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]  	// QTD.BASE
CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"}) > 0
	NPREDIAU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"})]  	// QTD.BASE
OTHERWISE
	NPREDIAU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"})]-ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]+1  //QTD.BASE
ENDCASE

NVALBASU  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR" })]  		// VR.BASE
NVALBASUT := NPREDIAU * NVALBASU 

IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLEST"}) > 0
	NVLEST   := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLEST"})]
ENDIF

IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OPERAD"}) >0
	NOPERADU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OPERAD"})]
ENDIF

NOPERADUT := NOPERADU * NPREDIAU

IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"}) >0
	CDISISSU := FTRAZCBOX("FPA_TPISS",ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"})])
ENDIF

IF FP0->FP0_TIPOSE <> "L"
	CTIPISSU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS"})]
	NBASISSU := NBASEU := 0
	NPERISSU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERISS"})]
	NVALISSU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })]
	CTIPSEGU := FTRAZCBOX("FPA_TPSEGU",ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPSEGU"})])
	NBASSEGU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRCARG"})]
	NPERSEGU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERSEG"})]
	NVALSEGU := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})]
ENDIF

NVALTOTU := 0
NVALTOTU += NVALBASUT
NVALTOTU += NOPERADU
NBASEU	 := NVALTOTU
NVALTOTU += NVALISSU + NVALSEGU

IF LCALCITEM
	NVALISSU := LOCA00158(NBASEU,NPERISSU,CTIPISSU)  //CALCULA O ISS DAS PLATAFORMAS
	ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })] := NVALISSU

	NVALSEGU := FCALCSEGG(NBASSEGU,NPERSEGU)  	// CALCULA O SEGURO DAS PLATAFORMAS
	ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})] := NVALSEGU

	NVALTOTU := 0
	NVALTOTU += NVALBASUT
	NVALTOTU += NOPERADU
	NVALTOTU += NVALISSU + NVALSEGU
ENDIF

// INCLUIDO PARA CALCULAR OS VALORES DE TURNOS
NVALTUR1 := IIF(VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 , (NPREDIAU * GDFIELDGET( "FPE_VALTUR", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
NVALTUR2 := IIF(VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 , (NPREDIAU * GDFIELDGET( "FPE_VALTUR", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
NVALTUR3 := IIF(VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 , (NPREDIAU * GDFIELDGET( "FPE_VALTUR", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
CNUMACT  := IIF(VALTYPE(OGETVT)=="O" , LEN(OGETVT:ACOLS) , 1)

DO CASE
CASE CTIPISSU == "I"
	NBASISSU := NVALTOTU - NVALISSU
CASE CTIPISSU == "N"
	NBASISSU := NVALTOTU
CASE CTIPISSU == "X"

CASE CTIPISSU == "M"
	NBASISSU := NOPERADU * NPREDIAU
ENDCASE

NVALISSU1 := NVALISSU
NVALSEGU1 := NVALSEGU

RETURN NIL 


/*/{PROTHEUS.DOC} FTRAZCBOX
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZCBOX(CCAMPO,CCOD) 
// ======================================================================= \\
// TRAZ SOMENTE O TEXTO DO X3_CBOX DO CAMPO INFORMADO

LOCAL NPOS
LOCAL CCOMBO
LOCAL CRET := CCOD

CCOMBO := ALLTRIM(GETSX3CACHE(CCAMPO,"X3_CBOX"))
NPOS   := AT(CRET+"=" , CCOMBO)
IF NPOS > 0
	CRET := SUBSTR(CCOMBO,NPOS+2,LEN(CCOMBO))
	NPOS := AT(";" , CRET) 
	IF NPOS>0
		CRET := SUBSTR(CRET,1,NPOS-1)
	ENDIF
ENDIF

RETURN CRET


/*/{PROTHEUS.DOC} FDISPGRUA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDISPGRUA()
// ======================================================================= \\

IF !VALTYPE(OPREDIAU)=="O"  					// SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

OPREDIAU:REFRESH()
OVALBASU:REFRESH()
OVALBASUT:REFRESH()
OVALMOBU:REFRESH()
OVALDESU:REFRESH()

OOPERADUT:REFRESH()

IF FP0->FP0_TIPOSE <> "L"
	OACESSOU:REFRESH()
ENDIF

ODISISSU:REFRESH()
OPERISSU:REFRESH()
OBASISSU:REFRESH()
OVALISSU:REFRESH()
OTIPSEGU:REFRESH()
OPERSEGU:REFRESH()
OBASSEGU:REFRESH()
OVALSEGU:REFRESH()
OVALTOTU:REFRESH()

OVALISSU1:REFRESH()
OVALSEGU1:REFRESH()

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERPRO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERPRO(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER DADOS DA PROPOSTA

LOCAL CALIAS     := "FP0"
LOCAL ACAMPOS    := {} 
LOCAL ACAMPOSGET := {} 
LOCAL POPC		 := NOPC 

DBSELECTAREA("FQ5")
DBSETORDER(8) // PROJETO
IF ! DBSEEK(XFILIAL("FQ5")+SUBSTR(FP0->FP0_PROJET,1,9))
	CCAMPOSGET := "" //UPPER(ALLTRIM(GETMV("MV_LOCX098")))
	//CCAMPOSGET += "|" + UPPER(ALLTRIM(GETMV("MV_LOCX099")))
ELSE
	CCAMPOSGET := ""
ENDIF

SX3->(DBSETORDER(1))
SX3->(DBSEEK(CALIAS))
WHILE SX3->(!EOF() .AND. X3_ARQUIVO==CALIAS)
	IF X3USO(SX3->X3_USADO) .AND. CNIVEL >= SX3->X3_NIVEL
		AADD(ACAMPOS,SX3->X3_CAMPO)
		IF SX3->X3_CONTEXT <> "V"
			M->&(SX3->X3_CAMPO) := (CALIAS)->&(SX3->X3_CAMPO)
			IF SX3->(UPPER(ALLTRIM(X3_CAMPO))$CCAMPOSGET)
				AADD(ACAMPOSGET,SX3->X3_CAMPO)
				AADD(ACAMPOZA0 ,SX3->X3_CAMPO)
			ENDIF
		ELSE
			M->&(SX3->X3_CAMPO) := CRIAVAR(SX3->X3_CAMPO)
		ENDIF
	ENDIF
	SX3->(DBSKIP())
ENDDO 

//           MSMGET():NEW(CALIAS , NREG                , NOPC , [UPAR1] , [UPAR2] , [UPAR3] , [AACHO] , [APOS]                    , [ACPOS]    , [UPAR4 ] , [UPAR5] , [UPAR6] , [UPAR7] , [OWND]                    , [UPAR8] , [LMEMORIA] , [LCOLUNA] , [UPAR9] , [LSEMPASTAS] ) 
OENCHOICE := MSMGET():NEW(CALIAS , (CALIAS)->(RECNO()) , POPC ,         ,         ,         , ACAMPOS , {NLIN1,NCOL1,NLIN2,NCOL2} , ACAMPOSGET , 3        , 1       ,         ,         , OFOLDER:ADIALOGS[NFOLDER] ,         ,            ,           ,         ,              ) 

RETURN NIL 


/*/{PROTHEUS.DOC} FFOLDERTRA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERTRA(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER TRANSPORTES

LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 				  		// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"ZA6",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "ZA6"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'ZA6_FILIAL+ZA6_PROJET=="'+CCHAVE+'"'
NINDICE   := 1 									// ZA6_FILIAL+ZA6_PROJET+ZA6_OBRA+ZA6_SEQTRA
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("ZA6")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "ZA6_SEQTRA"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO    })] := STRZERO(1,LEN(CCAMPOGET))
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_OBRA"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

CCAMPO    := "ZA6_SEQTRA"
CCAMPOGET := OTRA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	OTRA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO    })] := STRZERO(1,LEN(CCAMPOGET))
	OTRA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_OBRA"})] := STRZERO(1,LEN(CCAMPOGET))
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK       ,CTUDOOK		  ,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGTRA := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,"ALLWAYSTRUE()","ALLWAYSTRUE()","+ZA6_SEQTRA",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGTRA:OBROWSE:BCHANGE := {|| MUDATRAB()} 
ODLGTRA:OBROWSE:BADD	:= {|| IIF(LOCA00172(FP0->FP0_CLI,FP0->FP0_LOJA) , ODLGTRA:ADDLINE() , NIL)} 
FACUMUTRA()
FTRAZTRA()

RETURN NIL


/*/{PROTHEUS.DOC} MUDATRAB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDATRAB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER TRANSPORTES

LOCAL LRET      := .T.

FOBRA()

IF ODLGTRA:NAT > LEN(ODLGTRA:ACOLS)
	ODLGTRA:NAT := LEN(ODLGTRA:ACOLS)
ENDIF

ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_OBRA"})] := COBRA
ODLGTRA:OBROWSE:REFRESH()

RETURN LRET 


/*/{PROTHEUS.DOC} FSALVARTRA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARTRA(CALIAS,AHEADER,ACOLS) 
// ======================================================================= \\
// --> TRANSPORTES - FOLDER TRANSPORTES

LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL AVISTORIA := {}
LOCAL I         := 1
LOCAL LMODO
LOCAL NCOMPL    := 0
LOCAL NREVIS    := 0
LOCAL NAUXC     := 0
LOCAL NAUXR     := 0
LOCAL CPROJET   := PROJETO()

FACUMUTRA() 									// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
ACOLS := ACLONE(OTRA_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5									// 5=EXCLUI
	FOR NPOS := 1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_OBRA"  })]
		CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_SEQTRA"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA)  //!DELETED()

			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF

			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS]) 					// GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->ZA6_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->ZA6_PROJET := CPROJET
			(CALIAS)->ZA6_OBRA   := COBRA
			(CALIAS)->ZA6_SEQTRA := CSEQTRA
			(CALIAS)->ZA6_RESPON := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_RESPON"})]
			AADD(AGRAVADOS,RECNO()) 								// GRAVADOS
			(CALIAS)->(MSUNLOCK())

			// SE TEM VISTORIA, CRIA UM REGISTRO NO ZA8 (RAT)
			IF ZA6->(ZA6_TEMVIS=="S")
	            CENVMAIL := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_EMARAT"})]
	            IF CENVMAIL == "S"
			        AADD(AVISTORIA,{ZA6->(RECNO()),ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_RESPON"  })]})
				ENDIF

				CTIPORAT := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA6_TIPRAT"})]
				CTIPORAT := IIF(CTIPORAT==NIL , "" , CTIPORAT)		// O SISTEMA NÃO TINHA O ACOLS[1][8] (SÓ TEM ATÉ 7) E ESTAVA SE PERDENDO. 

				IF FP5->(DBSEEK(XFILIAL("FP5")+CPROJET+COBRA))
					IF CTIPORAT $ "R/C"
						WHILE !EOF() .AND. FP5->FP5_PROJET + FP5->FP5_OBRA == CPROJET + COBRA
						   	NAUXC := IIF(!EMPTY(FP5->FP5_COMPLE),VAL(FP5->FP5_COMPLE)+1,1)
						   	IF NAUXC > NCOMPL
						      	NCOMPL := NAUXC
						   	ENDIF

						   	NAUXR := IIF(!EMPTY(FP5->FP5_REVISA),VAL(FP5->FP5_REVISA)+1,1)
						   	IF NAUXR > NREVIS
						      	NREVIS := NAUXR
						   	ENDIF
						 	FP5->(DBSKIP())
						ENDDO
				  	  	LMODO := .T.
					ELSE
					  	LMODO := .F.
					ENDIF
				ELSE
					LMODO := .T.
				ENDIF

				IF     FP0->FP0_TIPOSE == "T" 
					CTIPOSE:= "TRANSPORTE"
				ELSEIF FP0->FP0_TIPOSE == "L" 
					CTIPOSE:= "LOCAÇÃO" 
				ELSE
					CTIPOSE:= "EQUIPAMENTOS"
				ENDIF

				FOR I := 1 TO LEN(ODLGCAR:ACOLS)
					FP5->(RECLOCK("FP5",LMODO))
					FP5->FP5_FILIAL := XFILIAL("FP5")
					FP5->FP5_PROJET := CPROJET
					FP5->FP5_OBRA   := COBRA
					FP5->FP5_TPSERV := CTIPOSE 		// FP0->FP0_TIPOSE
					FP5->FP5_OBSERV := ZA6->ZA6_OBSVIA 
					FP5->FP5_GESTOR := FP0->FP0_VENDED 
					FP5->FP5_ITEM   := STRZERO(I,3) 
					FP5->FP5_DESC   := ODLGCAR:ACOLS[I][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2]) == "ZA7_CARGA"}) ]
					FP5->FP5_COMP   := ODLGCAR:ACOLS[I][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2]) == "ZA7_COMP" }) ]
					FP5->FP5_LARG   := ODLGCAR:ACOLS[I][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2]) == "ZA7_LARG" }) ]
					FP5->FP5_ALTU   := ODLGCAR:ACOLS[I][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2]) == "ZA7_ALTU" }) ]
					FP5->FP5_PESO   := ODLGCAR:ACOLS[I][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2]) == "ZA7_PESO" }) ]
					IF     CTIPORAT == "R" 
						FP5->FP5_REVISA	:= STRZERO(NREVIS,3)
					ELSEIF CTIPORAT == "C" 
						FP5->FP5_COMPLE := STRZERO(NCOMPL,3)
					ENDIF
					FP5->(MSUNLOCK())
				NEXT
			ENDIF
		ENDIF
	NEXT
ENDIF

ADELVIAG := {}	// EXCLUI OS REGISTROS ALTERADOS

DBSELECTAREA(CALIAS)
DBSETORDER(1)
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. ZA6_FILIAL+ZA6_PROJET==XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS, RECNO()) == 0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(calias)->(MSUNLOCK())
		AADD( ADELVIAG, {ZA6_PROJET,ZA6_OBRA,ZA6_SEQTRA} )
	ENDIF
	DBSKIP()
ENDDO 

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERCON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERCON(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER CONJ.TRANSPORTADOR

LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP8",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "FP8"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FP8_FILIAL+FP8_PROJET=="'+CCHAVE+'"'
NINDICE   := 1 									// FP8_FILIAL+FP8_PROJET+FP8_OBRA+FP8_SEQTRA+FP8_SEQCAR+FP8_SEQCON
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FP8")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "FP8_SEQCON"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO      })] := STRZERO(1,LEN(CCAMPOGET))
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] := STRZERO(1,LEN(CCAMPOGET))
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

CCAMPO    := "FP8_SEQCON"
CCAMPOGET := OCON_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	OCON_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO      })] := STRZERO(1,LEN(CCAMPOGET))
	OCON_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] := STRZERO(1,LEN(CCAMPOGET))
	OCON_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})] := STRZERO(1,LEN(CCAMPOGET))
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGCON := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP8_SEQCON",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGCON:OBROWSE:BCHANGE := {|| MUDACONB()}

IF VALTYPE(ODLGCON)=="O"
	FACUMUCON()
	FTRAZCON()
	FMONTACON(NFOLDER,NLIN1,NCOL1,NLIN2,NCOL2)
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} MUDACONB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDACONB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER CONJ.TRANSPORTADOR

FOBRA()

IF VALTYPE(ODLGCON) == "O"
	IF ODLGCON:NAT > LEN(ODLGCON:ACOLS)
		ODLGCON:NAT := LEN(ODLGCON:ACOLS)
	ENDIF

	ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"  })] := COBRA
	ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] := CSEQTRA
	ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})] := CSEQCAR
	ODLGCON:OBROWSE:REFRESH()

	FCALCCON()
	FDISPCON()
ENDIF

RETURN .T.


/*/{PROTHEUS.DOC} FSALVARCON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARCON(CALIAS,AHEADER,ACOLS) 
// ======================================================================= \\
// --> FOLDER CONJ.TRANSPORTADOR

LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()

IF OFOLDER:NOPTION==NFOLDERCON					// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
	FACUMUCON()
ENDIF
ACOLS := ACLONE(OCON_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  									// 5=EXCLUI
	FOR NPOS := 1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"  })]
		CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})]
		CSEQCAR := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCAR"})]
		CSEQCON := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQCON"})]
		CTRANSP := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP8_TRANSP"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA) .AND. !EMPTY(CSEQCAR) .AND. !EMPTY(CSEQCON) .AND. !EMPTY(CTRANSP) //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA+CSEQCAR+CSEQCON)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS]) 		// GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FP8_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FP8_PROJET := CPROJET
			(CALIAS)->FP8_OBRA   := COBRA
			(CALIAS)->FP8_SEQTRA := CSEQTRA
			(CALIAS)->FP8_SEQCAR := CSEQCAR
			(CALIAS)->FP8_SEQCON := CSEQCON
			AADD(AGRAVADOS,RECNO())  			// GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
ENDIF

FP8->(DBSEEK(XFILIAL("FP8")+CPROJET))					// EXCLUI OS REGISTROS ALTERADOS
WHILE !FP8->(EOF()) .AND. FP8->FP8_FILIAL+FP8->FP8_PROJET==XFILIAL("FP8")+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK("FP8",.F.)
		FP8->(DBDELETE())
		FP8->(MSUNLOCK())
	ENDIF
	FP8->(DBSKIP())
ENDDO
 

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERCAR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERCAR(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER CARGAS

LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO() 

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"ZA7",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "ZA7"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'ZA7_FILIAL+ZA7_PROJET=="'+CCHAVE+'"'
NINDICE   := 1  								// ZA7_FILIAL+ZA7_PROJET+ZA7_OBRA+ZA7_SEQTRA+ZA7_SEQCAR
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("ZA7")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "ZA7_SEQCAR"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO      })] := STRZERO(1,LEN(CCAMPOGET))
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

CCAMPO    := "ZA7_SEQCAR"
CCAMPOGET := OCAR_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	OCAR_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO      })] := STRZERO(1,LEN(CCAMPOGET))
	OCAR_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] := STRZERO(1,LEN(CCAMPOGET))
ENDIF

//	                           NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGCAR := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+ZA7_SEQCAR",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGCAR:OBROWSE:BCHANGE := {|| MUDACARB()}

FACUMUCAR()
FTRAZCAR()

FMONTACAR(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 

RETURN NIL


/*/{PROTHEUS.DOC} MUDACARB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDACARB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER CARGAS 

LOCAL LRET      := .T.

FOBRA()

ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"  })] := COBRA
ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] := CSEQTRA
ODLGCAR:OBROWSE:REFRESH()

// COMO A CARGA MUDOU, TEM QUE MUDAR O FOLDER ODLGCON PARA ATUALIZAR O ODLGCON:ACOLS COM A NOVA CARGA
IF VALTYPE(ODLGCON) == "O"
	FTRAZCON()
	MUDACONB()
	ODLGCON:OBROWSE:REFRESH()
	FCALCCON()
ENDIF
FDISPCAR()

RETURN LRET


/*/{PROTHEUS.DOC} FSALVARCAR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARCAR(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> FOLDER CARGAS

LOCAL NPOS
LOCAL AGRAVADOS := {} 							// GRAVADOS
LOCAL CPROJET   := PROJETO()

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMUCAR()
ACOLS := ACLONE(OCAR_COLS) 

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  									// 5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"  })]
		CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})]
		CSEQCAR := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQCAR"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA) .AND. !EMPTY(CSEQCAR)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA+CSEQCAR)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  // GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->ZA7_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->ZA7_PROJET := CPROJET
			(CALIAS)->ZA7_OBRA   := COBRA
			(CALIAS)->ZA7_SEQTRA := CSEQTRA
			(CALIAS)->ZA7_SEQCAR := CSEQCAR
			AADD(AGRAVADOS,RECNO()) 			// GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
ENDIF

DBSEEK(XFILIAL(CALIAS)+CPROJET)					// EXCLUI OS REGISTROS ALTERADOS
WHILE !EOF() .AND. ZA7_FILIAL+ZA7_PROJET==XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO 

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERGUI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERGUI(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER GUINDASTES

LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP4",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "FP4"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FP4_FILIAL+FP4_PROJET=="'+CCHAVE+'"'
NINDICE   := 1 									// FP4_FILIAL+FP4_PROJET+FP4_OBRA+FP4_SEQGUI
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FP4")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "FP4_SEQGUI"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

CCAMPO    := "FP4_SEQGUI"
CCAMPOGET := OGUI_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	OGUI_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK                                  ,CTUDOOK                                  ,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL ,CDELOK     ,OWND                     ,AHEADER,ACOLS}
ODLGGUI := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,"LOCA00172(FP0->FP0_CLI, FP0->FP0_LOJA)" ,"LOCA00172(FP0->FP0_CLI, FP0->FP0_LOJA)","+FP4_SEQGUI",      ,       ,MAXGETDAD,        , MAXGETDAD,{||DELAS()},OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGGUI:OBROWSE:BCHANGE := {|| MUDAGUIB()}
ODLGGUI:OBROWSE:BADD	:= {|| IIF(LOCA00172(FP0->FP0_CLI,FP0->FP0_LOJA) , ODLGGUI:ADDLINE() , NIL)} 
FACUMUGUI()
FTRAZGUI()

RETURN NIL


/*/{PROTHEUS.DOC} MUDAGUIB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDAGUIB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER GUINDASTES 

LOCAL LRET      := .T.
LOCAL _CCPONAO  := ""
LOCAL NDIATURNO := 0
LOCAL NHRSTURNO := 0
LOCAL _NZ       := 0 

FOBRA()

IF ODLGGUI:NAT > LEN(ODLGGUI:ACOLS)
	ODLGGUI:NAT := LEN(ODLGGUI:ACOLS)
ENDIF

ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_OBRA"  })] := COBRA

NPREDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]

IIF( VALTYPE(OGETVT)=="O" .AND. LEN(ACOLSTURNO) >= ODLGGUI:NAT,OGETVT:ACOLS:= ACLONE(ACOLSTURNO[ODLGGUI:NAT]) ,0)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 .AND. COBRA==OGETVT:ACOLS[1, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI==OGETVT:ACOLS[1, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
	NDIATURNO := 0		// GDFIELDGET ( "FPE_MINDIT", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )
	NHRSTURNO := 0		// GETHORASTURNO(GDFIELDGET("FPE_HRINIT",1,.F.,OGETVT:AHEADER,OGETVT:ACOLS),GDFIELDGET("FPE_HOFIMT",1,.F.,OGETVT:AHEADER,OGETVT:ACOLS))
ENDIF
NVALTUR1 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR1)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 .AND. COBRA==OGETVT:ACOLS[2, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI==OGETVT:ACOLS[2, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
	NDIATURNO := 0		// GDFIELDGET ( "FPE_MINDIT", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )
	NHRSTURNO := 0		// GETHORASTURNO(GDFIELDGET("FPE_HRINIT",2,.F.,OGETVT:AHEADER,OGETVT:ACOLS),GDFIELDGET("FPE_HOFIMT",2,.F.,OGETVT:AHEADER,OGETVT:ACOLS))
ENDIF
NVALTUR2 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR2)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 .AND. COBRA==OGETVT:ACOLS[3, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI==OGETVT:ACOLS[3, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
	NDIATURNO := 0		// GDFIELDGET ( "FPE_MINDIT", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )
	NHRSTURNO := 0		// GETHORASTURNO(GDFIELDGET("FPE_HRINIT",3,.F.,OGETVT:AHEADER,OGETVT:ACOLS),GDFIELDGET("FPE_HOFIMT",3,.F.,OGETVT:AHEADER,OGETVT:ACOLS))
ENDIF
NVALTUR3 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR3)

ODLGGUI:OBROWSE:REFRESH()
PROCESSMESSAGES()

IF VALTYPE(ODLGCON)=="O"
	FCALCCON()  								// CALCULA AS DIMENSÕES
ENDIF

// A CADA LINHA NOVA (SETA PRA BAIXO NO ACOLS), COPIA CAMPOS DA LINHA DE CIMA
IF ODLGGUI:LNEWLINE .AND. LEN(ODLGGUI:ACOLS) > 1
	_CCPONAO := "FP4_PRODUT;FP4_SEQGUI;FP4_GUINDA;FP4_DESGUI;FP4_VRMOB;FP4_VRDES;FP4_VRHOR;FP4_VIAGEM;FP4_AS;FP4_DTAS;FP4_VALAS;FP4_CARACT;FP4_DESPRO"
	IF EXISTBLOCK("LC001CPN") 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CAMPOS QUE SÃO OU NÃO COPIADOS PARA A PRÓXIMA LINHA DE LOCAÇÃO.
		_CCPONAO := EXECBLOCK("LC001CPN",.T.,.T.,{_CCPONAO})
	ENDIF
	FOR _NZ := 1 TO LEN( ODLGGUI:AHEADER )
		// CAMPOS NÃO 
		IF ! ALLTRIM(ODLGGUI:AHEADER[_NZ][2]) $ _CCPONAO
			ODLGGUI:ACOLS[ODLGGUI:NAT][_NZ] := ODLGGUI:ACOLS[ODLGGUI:NAT-1][_NZ]
		ENDIF
	NEXT _NZ 
	ODLGGUI:OBROWSE:REFRESH()
ENDIF

RETURN LRET 


/*/{PROTHEUS.DOC} FSALVARCNJ
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARCNJ(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> SALVAR OS ELEMENTOS DE CONJUNTO DE TRANSPORTE 

LOCAL ACPOS    := {}
LOCAL CPROJET  := PROJETO()
LOCAL NPOSOBRA := GDFIELDPOS("FPS_OBRA"  , AHEADER)
LOCAL NPOSSEQG := GDFIELDPOS("FPS_SEQGUI", AHEADER)
LOCAL NPOSITEM := GDFIELDPOS("FPS_ITEM"  , AHEADER)
LOCAL NPOS
LOCAL NK       := 0 
LOCAL NZ       := 0 

IF NPOSOBRA == 0
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Verificar o campo FPS_OBRA na aba conjunto transportador."})
	RETURN .F.
ENDIF
IF NPOSSEQG == 0
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Verificar o campo FPS_SEQGUI na aba conjunto transportador."})
	RETURN .F.
ENDIF
IF NPOSITEM == 0
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Verificar o campo FPS_ITEM na aba conjunto transportador."})
	RETURN .F.
ENDIF

FPS->(DBSETORDER(2))							// FPS_FILIAL+FPS_PROJET+FPS_OBRA+FPS_SEQGUI+FPS_ITEM
FQ5->(DBSETORDER(1))							// FQ5_FILIAL + FQ5_VIAGEM
FP6->(DBSETORDER(2))							// FP6_FILIAL + FP6_PROJET + FP6_OBRA + FP6_SEQUI + FP6_SEQRES

IF NOPC != 5  									// 5=EXCLUI

	// TRATATIVA PARA ZERAR OS CUSTOS DOS FRETES ANTES DE ACUMULÁ-LOS 
	CQUERY := " UPDATE " + RETSQLNAME("FP6") + " "
	CQUERY += " SET    FP6_VALOR  = 0 "
	CQUERY += " WHERE  D_E_L_E_T_ = ''"
	CQUERY +=   " AND  FP6_FILIAL = '"+XFILIAL('FP6')+"'"
	CQUERY +=   " AND  FP6_PROJET = '"+CPROJET       +"'"
	CQUERY +=   " AND  FP6_CODIGO = '"+XCOD          +"'"
	TCSQLEXEC(CQUERY)

	FOR NPOS:=1 TO LEN(ACOLS)

		ACPOS:= {}
		IF FPS->(DBSEEK( XFILIAL("FPS") + CPROJET + ACOLS[NPOS, NPOSOBRA] + ACOLS[NPOS, NPOSSEQG] + ACOLS[NPOS, NPOSITEM]))
			// TRATATIVA PARA ESTORNAR O STATUS DE ACEITE DA ASF. 
			IF !EMPTY(FPS->FPS_VIAGEM)			// EXISTE DTQ, OU SEJA, HOUVE GERAÇÃO DE CONTRATO ANTERIOR.
				FQ5->(DBSETORDER(1))			// FQ5_FILIAL + FQ5_VIAGEM
				IF FQ5->(DBSEEK( XFILIAL("FQ5") + FPS->FPS_VIAGEM))		// LOCALIZA A ASF
					AZLW := {}
					FOR NK := 1 TO LEN(AHEADER)
						AADD(AZLW, {AHEADER[NK][2], ACOLS[NPOS][NK]} )
					NEXT NK 

					IF LOCA01310(AZLW, FPS->FPS_VIAGEM, "FPS")			// EXISTE DIFERENÇA
						RECLOCK("FPS",.F.)
						FPS->FPS_ALTERR := ""
						FPS->(MSUNLOCK()) 

						RECLOCK("FQ5",.F.)
				   		FQ5->FQ5_STATUS := "1"							// VOLTAMOS O STATUS
						FQ5->(MSUNLOCK()) 
					ENDIF
				ENDIF
			ENDIF
			FPS->(RECLOCK(CALIAS,.F.))
		ELSE
			IF ACOLS[NPOS,LEN(AHEADER)+1]
				LOOP
			ENDIF
			FPS->(RECLOCK(CALIAS,.T.))
			FPS->FPS_ALTERR := DTOS(DDATABASE)
		ENDIF

		IF ACOLS[NPOS,LEN(AHEADER)+1]
			LEXCLUI := .T.
			IF ! EMPTY(FPS->FPS_VIAGEM)			// TRATAR A EXCLUSÃO DA ASF
				IF FQ5->(DBSEEK(XFILIAL("FQ5")+FPS->FPS_VIAGEM))
					IF ! EMPTY(FQ5->FQ5_NUMCTC) .OR. ! EMPTY(FQ5->FQ5_IMPCTB)	// SERÁ TRATADO POSTERIORMENTE NA ET OPERACIONAL. SOLICITAÇÃO LUI.
						LEXCLUI := .F.
						CMSG := "A ASF Nº: " + FQ5->FQ5_AS + " Não pode ser excluída, pois a viagem tem "
						IF     !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "S" 
							CMSG += "CTRB gerada"
						ELSEIF !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "A" 
							CMSG += "Adiantamento" 
						ELSE
							CMSG += "Saldo"
						ENDIF
						MSGALERT("Operação cancelada: "+CMSG , "RENTAL: "+alltrim(upper(procname()))) 
					ELSEIF FQ5->FQ5_STATUS == "6" 		// NÃO DEIXAR EXCLUIR CASO NÃO ESTEJA LIBERADO O FRETE.
						LEXCLUI := .F.
						CMSG := "Não poderá ser excluído, pois a ASF já foi aceita."
						MSGALERT("Operação cancelada: "+CMSG , "RENTAL: "+alltrim(upper(procname()))) 
					ENDIF
				ENDIF
			ENDIF

			IF LEXCLUI
				IF FQ5->( DBSEEK(XFILIAL("FQ5")+FPS->FPS_VIAGEM) )
					FQ5->(RECLOCK("FQ5",.F.)) 
					FQ5->(DBDELETE())
					FQ5->(MSUNLOCK())
				ENDIF
				FPS->(DBDELETE())
			ENDIF
		ELSE
			FOR NZ := 1 TO LEN(AHEADER) 
				FPS->( FIELDPUT( FIELDPOS( AHEADER[NZ,2] ), ACOLS[NPOS, NZ] ) )
			NEXT NZ 
			FPS->FPS_FILIAL := XFILIAL("FPS")
		    FPS->FPS_PROJET := CPROJET
		ENDIF

		FPS->(MSUNLOCK())

	NEXT

ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FSALVARCNP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARCNP(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> SALVAR OS ELEMENTOS DE CONJUNTO DE LOCACAO

LOCAL ACPOS    := {} 
LOCAL NPOS     := 0 
LOCAL CPROJET  := PROJETO()
LOCAL NK       := 0
LOCAL _NX 

LOCAL NPOSITEM := GDFIELDPOS("FQ7_ITEM")
LOCAL NPOSOBRA := GDFIELDPOS("FQ7_OBRA")
LOCAL NPOSSEQ  := GDFIELDPOS("FQ7_SEQGUI")
LOCAL _aArea   := GetArea()

FQ7->(DBSETORDER(2))
FQ5->(DBSETORDER(1))							// FQ5_FILIAL + FQ5_VIAGEM
FP6->(DBSETORDER(2))							// FP6_FILIAL + FP6_PROJET + FP6_OBRA + FP6_SEQUI + FP6_SEQRES


IF NOPC != 5  							   		// 5=EXCLUI

	FP6->(dbSetOrder(1))
	FP6->(dbSeek(Xfilial("FP6")+cProjet))
	While !FP6->(Eof()) .and. FP6->(FP6_FILIAL+FP6_PROJET) == xFilial("FP6")+cProjet
		If FP6->FP6_CODIGO == xCod
			FP6->(RecLock("FP6"))
			FP6->FP6_VALOR := 0
			FP6->(MsUnlock())
		EndIF
		FP6->(dbSkip())
	EndDo


	// FRANK EM 23/09/2020
	// TRATAMENTO PARA A DELECAO DA ZA1
	IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
		FOR _NX := 1 TO LEN(ACOLS)
			IF ACOLS[_NX, NPOSOBRA] == ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
				ACOLS[_NX,LEN(AHEADER)+1] := .T.
			ENDIF
		NEXT
	ENDIF

	FOR NPOS := 1 TO LEN(ACOLS)
		
		LEXCLUI := .F.
		ACPOS   := {}
		IF ! EMPTY( ALLTRIM( ACOLS[NPOS, NPOSOBRA] + ACOLS[NPOS, NPOSSEQ] ) )
			IF FQ7->(DBSEEK( XFILIAL("FQ7") + CPROJET + ACOLS[NPOS, NPOSOBRA] + ACOLS[NPOS, NPOSSEQ] + ACOLS[NPOS, NPOSITEM]))
				// TRATATIVA PARA ESTORNAR O STATUS DE ACEITE DA ASF. 
				IF !EMPTY(FQ7->FQ7_VIAGEM)		// EXISTE DTQ, OU SEJA, HOUVE GERAÇÃO DE CONTRATO ANTERIOR.
					FQ5->(DBSETORDER(1))		// FQ5_FILIAL + FQ5_VIAGEM
					IF FQ5->(DBSEEK( XFILIAL("FQ5") + FQ7->FQ7_VIAGEM))		// LOCALIZA A ASF
						AZUC := {}
						FOR NK := 1 TO LEN(AHEADER)
							AADD(AZUC, {AHEADER[NK][2], ACOLS[NPOS][NK]} )
						NEXT
						IF LOCA01311(AZUC, FQ7->FQ7_VIAGEM, "FQ7")			// EXISTE DIFERENÇA
							FQ7->(RECLOCK("FQ7",.F.))
							FQ7->FQ7_ALTERR := ""
							FQ7->(MSUNLOCK())

							FQ5->(RECLOCK("FQ5",.F.))
					   		FQ5->FQ5_STATUS := "1"							// VOLTAMOS O STATUS
							FQ5->(MSUNLOCK())
						ENDIF
					ENDIF
				ENDIF
				FQ7->(RECLOCK("FQ7",.F.))
			ELSE
				IF ACOLS[NPOS,LEN(AHEADER)+1]								// DELETADA
					LOOP
				ENDIF
				RECLOCK("FQ7",.T.)
				FQ7->FQ7_ALTERR := DTOS(DDATABASE)
			ENDIF

			IF ACOLS[NPOS,LEN(AHEADER)+1]									// EXCLUSAO
				LEXCLUI := .T.
				IF ! EMPTY(FQ7->FQ7_VIAGEM)									// TRATAR A EXCLUSÃO DA ASF
					IF FQ5->(DBSEEK(XFILIAL("FQ5")+FQ7->FQ7_VIAGEM))
						IF ! EMPTY(FQ5->FQ5_NUMCTC) .OR. ! EMPTY(FQ5->FQ5_IMPCTB)	// SERÁ TRATADO POSTERIORMENTE NA ET OPERACIONAL. SOLICITAÇÃO LUI.
							LEXCLUI := .F.
							CMSG := "A ASF Nº: " + FQ5->FQ5_AS + " não pode ser excluída, pois a viagem tem "
							IF !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "S"
								CMSG += "CTRB gerada"
							ELSEIF !EMPTY(FQ5->FQ5_NUMCTC) .AND. FQ5->FQ5_IMPCTB == "A"
								CMSG += "Adiantamento"
							ELSE
								CMSG += "Saldo"
							ENDIF
							MSGALERT("Operação cancelada: "+CMSG , "RENTAL: "+alltrim(upper(procname()))) 
						ELSEIF FQ5->FQ5_STATUS == "6" 						// NÃO DEIXAR EXCLUIR CASO NÃO ESTEJA LIBERADO O FRETE.
							LEXCLUI := .F.
							CMSG := "Não poderá ser excluído, pois a ASF já foi aceita."
							MSGALERT("OPERAÇÃO CANCELADA: "+CMSG , "RENTAL: "+alltrim(upper(procname()))) 
						ENDIF
					ENDIF
				ENDIF
				IF LEXCLUI
					IF !LEXCLZUC
					   IF FQ5->( DBSEEK(XFILIAL("FQ5")+FQ7->FQ7_VIAGEM) )
						   FQ5->(RECLOCK("FQ5",.F.)) 
						   FQ5->(DBDELETE()) 
						   FQ5->(MSUNLOCK()) 
					   ENDIF
					ENDIF
					FQ7->(DBDELETE())
				ENDIF
			ELSE
				FQ7->FQ7_FILIAL := XFILIAL("FQ7")
				FQ7->FQ7_FILIAL := XFILIAL("FQ7")
				FQ7->FQ7_PROJET := CPROJET
				FOR NK := 1 TO LEN(AHEADER)
					If aHeader[nK][10] == "R"
						&("FQ7->"+alltrim(aHeader[nK][2])) := ACOLS[NPOS][NK]
					EndIF
				NEXT NK 
			ENDIF

			FQ7->(MSUNLOCK())
		ENDIF
		
	NEXT NPOS 
ENDIF

restarea(_aArea)
RETURN NIL


/*/{PROTHEUS.DOC} FSALVARGUI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARGUI(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> FOLDER GUINDASTES

LOCAL NPOS
LOCAL AGRAVADOS := {} 							// GRAVADOS
LOCAL CPROJET   := PROJETO()

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMUGUI()
ACOLS := ACLONE(OGUI_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  									// 5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_OBRA"  })]
		CSEQGUI := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_SEQGUI"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQGUI)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQGUI)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  	// GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FP4_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FP4_PROJET := CPROJET
			(CALIAS)->FP4_OBRA   := COBRA
			(CALIAS)->FP4_SEQGUI := CSEQGUI
			(CALIAS)->FP4_PERMAO := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERMAO"})]//M->FP4_PERMAO
			(CALIAS)->FP4_VALAS  := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_VALAS"})]
			AADD(AGRAVADOS,RECNO())  			// GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
ENDIF

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. FP4_FILIAL+FP4_PROJET == XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
		DELETZBB(FP4_PROJET+FP4_OBRA+FP4_SEQGUI)
	ENDIF
	DBSKIP()
ENDDO 

RETURN NIL


/*/{PROTHEUS.DOC} MUDAPLAB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00141(LFORCA) 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER PLATAFORMAS

LOCAL _CCPONAO := ""
LOCAL _NZ      := 0 
LOCAL LRET     := .T.

DEFAULT LFORCA 	:= .F. // FORCAR O PREENCHIMENTO
DEFAULT NFIXA	:= 0   // INDICAR DE QUAL LINHA SERA COPIADO

IF VALTYPE(ODLGPLA)=="O"
	M->FPA_TIPOSE := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TIPOSE"})]
	M->FPA_PRODUT := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]
ENDIF

FOBRA()

IF ODLGPLA:NAT > LEN(ODLGPLA:ACOLS)
	ODLGPLA:NAT := LEN(ODLGPLA:ACOLS)
ENDIF


// A CADA LINHA NOVA (SETA PRA BAIXO NO ACOLS), COPIA CAMPOS DA LINHA DE CIMA
IF (ODLGPLA:LNEWLINE .AND. LEN(ODLGPLA:ACOLS) > 1) .OR. LFORCA
	_CCPONAO := "FPA_PRODUT;FPA_GRUA;FPA_DESGRU;FPA_TIPOSE;FPA_VRMOB;FPA_VRHOR;FPA_VRDES;FPA_VIAGEM;FPA_AS;FPA_GUIMON;FPA_GUIDES;FPA_DTPREN;FPA_DTINI;FPA_HRINI;FPA_HRFIM;FPA_DTFIM;FPA_DTENRE;FPA_FILREM;FPA_NFREM;FPA_DNFREM;FPA_SERREM;FPA_ITEREM;FPA_NFRET;FPA_DNFRET;FPA_SERRET;FPA_ITERET;FPA_PARIDA;FPA_PARVOL;FPA_SEQSUB;FPA_ULTFAT;FPA_PRCUNI;FPA_VLBRUT;FPA_ACRESC;FPA_PDESC;FPA_SEQEST;"
	_CCPONAO += "FPA_DTPRRT"

	IF EXISTBLOCK("LC001CPN") 					// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CAMPOS QUE SÃO OU NÃO COPIADOS PARA A PRÓXIMA LINHA DE LOCAÇÃO.
		_CCPONAO := EXECBLOCK("LC001CPN",.T.,.T.,{_CCPONAO})
	ENDIF

	FOR _NZ := 1 TO LEN( ODLGPLA:AHEADER )
		IF ALLTRIM(ODLGPLA:AHEADER[_NZ][2]) $ "FPA_ULTFAT;FPA_DTPRRT;FPA_DTINI;FPA_DTFIM;FPA_DTENRE;FPA_DTPREN;FPA_DNFENT;FPA_DTSCRT;FPA_XRETRE"
			ODLGPLA:ACOLS[ODLGPLA:NAT][_NZ] := STOD("")
		ENDIF
		// CAMPOS NÃO
		IF ! ALLTRIM(ODLGPLA:AHEADER[_NZ][2]) $ _CCPONAO
			// SÓ INCLUI, SE O CAMPO ESTIVER VAZIO - NA LINHA NOVA, DEVE ESTAR VAZIO
			// PROBLEMA QUE OCORRIA, QUANDO INSERIMOS UMA NOVA LINHA, PREENCHEMOS OS CAMPOS, E INSERIMOS UMA SEGUNDA NOVA LINHA, E SEM PREENCHER ESTA 
			// LINHA, CLICAMOS A SETA PARA BAIXO, PARA INSERÇÃO DE UMA OUTRA NOVA LINHA, A LINHA QUE ESTAVA COM OS ITENS  PREENCHIDOS, ERAM SOBRESCRITOS
			IF EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][_NZ])
				ODLGPLA:ACOLS[ODLGPLA:NAT][_NZ] := ODLGPLA:ACOLS[ODLGPLA:NAT-1][_NZ]
			ENDIF
		ENDIF
	NEXT
ENDIF

ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"  })] := COBRA
ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})] := CSEQGRU

IF EMPTY(M->FPA_TIPOSE)
	ODLGPLA:ACOLS[C][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TIPOSE"})] := "L"		// INICIALIZADOR PADRÃO PARA A LOCAÇÃO
ENDIF

IF EMPTY( M->FPA_PRODUT )
	GDFIELDPUT("FPA_TPGUIM",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
	GDFIELDPUT("FPA_TPGUID",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
	GDFIELDPUT("FPA_DESPRO",SPACE(1), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
	GDFIELDPUT("FPA_DTSCRT",CTOD(""), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
	GDFIELDPUT("FPA_DNFRET",CTOD(""), ODLGPLA:NAT, ODLGPLA:AHEADER , ODLGPLA:ACOLS )
ENDIF

ODLGPLA:OBROWSE:REFRESH()

// MERGE - ORGUEL 94 - INICIO
//atualiza rodape
If ExistBlock("LC001LOC")
	ExecBlock("LC001LOC",.F.,.T.,{ "ATUALIZA"})
EndIf
// MERGE - ORGUEL 94 - FIM

RETURN LRET 


/*/{PROTHEUS.DOC} FSALVARPLA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARPLA(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> FOLDER PLATAFORMAS 

LOCAL NPOS
LOCAL AGRAVADOS := {}  //GRAVADOS
LOCAL _AREMESSA := {}
LOCAL _ARETORNO := {}
LOCAL CPROJET   := PROJETO()
LOCAL _CAS      := ""
LOCAL _NXX
LOCAL _aArea    := GetArea()

/*	// --> P.E. DESCONTINUADO !!! 
IF EXISTBLOCK("LOCC001_")
	U_LOCC001_("GRV_PROJETO", {FP0->FP0_FILIAL, FP0->FP0_PROJET} )		// TRATATIVA GRAVAÇAO LOG: ZA0, ZA1 E ZAG.
ENDIF
*/	// --> P.E. DESCONTINUADO !!! 

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMUPLA()
ACOLS := ACLONE(OPLA_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  //5=EXCLUI

	// FRANK EM 23/09/2020
	// TRATAMENTO PARA A DELECAO DA ZA1
	IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
		FOR _NXX := 1 TO LEN(ACOLS)
			IF ACOLS[_NXX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"  })] == ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
				ACOLS[_NXX,LEN(AHEADER)+1] := .T.
			ENDIF
		NEXT
	ENDIF


	IF LEN(OPLACOLRET) > 0
		FOR NPOS:=1 TO LEN(OPLACOLRET)
			AADD( ACOLS, OPLACOLRET[NPOS] )
		NEXT NPOS 
	ENDIF
	FOR NPOS := 1 TO LEN(ACOLS)
		COBRA     := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"  })]
		CSEQGRU   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
		_CAS      := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    })]
		
		_AREMESSA := {}
		_ARETORNO := {}

		IF !EMPTY(_CAS)
			_AREMESSA := GETNFREM( _CAS , , .T. ) 
			IF LEN(_AREMESSA) > 0
				_ARETORNO := GETNFREM( _CAS , _AREMESSA , .F. ) 
			ENDIF
		ENDIF

		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQGRU)
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQGRU)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FPA_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FPA_PROJET := CPROJET
			(CALIAS)->FPA_OBRA   := COBRA
			(CALIAS)->FPA_SEQGRU := CSEQGRU
		 //	(CALIAS)->FPA_QUANT  := 1 
			IF !EMPTY((CALIAS)->FPA_AS)
				IF LEN(_AREMESSA) > 0
					(CALIAS)->FPA_NFREM  := _AREMESSA[01]
					(CALIAS)->FPA_SERREM := _AREMESSA[02]
					(CALIAS)->FPA_ITEREM := _AREMESSA[03]
					(CALIAS)->FPA_DNFREM := _AREMESSA[04]
				ENDIF
				
				IF !EMPTY((CALIAS)->FPA_NFREM)
					IF LEN(_ARETORNO) > 0
						/* FRANK 02/11/20
						(CALIAS)->FPA_NFRET  := _ARETORNO[01]
						(CALIAS)->FPA_SERRET := _ARETORNO[02]
						(CALIAS)->FPA_ITERET := _ARETORNO[03]
						(CALIAS)->FPA_DNFRET := _ARETORNO[04]
						*/
					ENDIF
				ENDIF
			ENDIF

			AADD(AGRAVADOS,RECNO())  //GRAVADOS
			(CALIAS)->(MSUNLOCK() )
		ENDIF 
	NEXT NPOS 
ENDIF 

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. FPA_FILIAL+FPA_PROJET == XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS, RECNO() ) == 0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO 

RestArea(_aArea)
RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERPLA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERPLA(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER PLATAFORMAS

LOCAL NSTYLE   := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET  := PROJETO()
LOCAL _LBLQEDI := SUPERGETMV("MV_LOCX228",.F.,.F.)
LOCAL CFIELDOK := NIL							// FIELDOK DA MSNEWGETDADOS.
LOCAL NZ       := 0 

FOBRA()

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FPA",NOPCMANU, NSTYLE})
ENDIF 

CALIAS    := "FPA"
CCHAVE    := XFILIAL(CALIAS) + CPROJET
CCONDICAO := 'FPA_FILIAL+FPA_PROJET=="' + CCHAVE + '"'
NINDICE   := 1  								// FPA_FILIAL+FPA_PROJET+FPA_OBRA+FPA_SEQGRU
CFILTRO   := CCONDICAO
AHEADER	  := FHEADER("FPA")
ACOLS	  := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "FPA_OBRA"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]      := COBRA
		OPLA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := COBRA
	ENDIF
	CCAMPO    := "FPA_SEQGRU"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]      := STRZERO(1,LEN(CCAMPOGET))
		OPLA_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

IF _LBLQEDI
	FOR NZ := 1 TO LEN(AHEADER)					// PARA BLOQUEAR A EDIÇÃO DOS CAMPOS.
		IF AHEADER[NZ][14] != "V" .AND. ( ! ALLTRIM(AHEADER[NZ][2]) $ "FPA_MOTENT;FPA_CARAC;FPA_CONPAG;FPA_VRHOR;FPA_OBS" )
			AHEADER[NZ][13] := "LOCA00142()" + IIF(EMPTY(AHEADER[NZ][13]) , "" , ".AND.") + ALLTRIM(AHEADER[NZ][13]) 
		ENDIF
	NEXT NZ 
ENDIF

/*	// --> P.E. DESCONTINUADO !!! 
IF EXISTBLOCK("LOCC001_")  .AND.  ASCAN( AHEADER, {|IT| IT[2] == "FPA_ALTERA"} ) > 0		// CONTROLE DE LINHA ALTERADA.
	CFIELDOK := "U_LOCC001_('FPA_ALTERA')"
ENDIF
*/	// --> P.E. DESCONTINUADO !!! 

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK       ,CTUDOOK		  ,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK        ,OWND                     ,AHEADER,ACOLS}
ODLGPLA := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,"ALLWAYSTRUE()","ALLWAYSTRUE()","+FPA_SEQGRU",      ,       ,MAXGETDAD,CFIELDOK,         ,"LOCA00143()",OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGPLA:OBROWSE:BCHANGE := {|| LOCA00141()}
ODLGPLA:OBROWSE:BADD	:= {|| IIF(LOCA00172(FP0->FP0_CLI, FP0->FP0_LOJA),ODLGPLA:ADDLINE(),)}

IF EXISTBLOCK("LC01DPLA") 						// --> PONTO DE ENTRADA PARA TRATAMENTO DA DELECAO DA LINHA - FRANK ZWARG FUGA - 22/05/17
	ODLGPLA:OBROWSE:BDELETE := {|| EXECBLOCK("LC01DPLA",.T.,.T.,{ODLGPLA:NAT, ODLGPLA:ACOLS, ODLGPLA:AHEADER  }) }
ENDIF

FACUMUPLA()
FTRAZPLA()

// MERGE - ORGUEL 94 - INICIO
//rodape
If ExistBlock("LC001LOC")
	ExecBlock("LC001LOC",.F.,.T.,{ "TELA"})
EndIf
// MERGE - ORGUEL 94 - FIM

RETURN NIL


/*/{PROTHEUS.DOC} LC1CANEDT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00142()						// PODE EDITAR LINHA/CÉLULA? 
// ======================================================================= \\

LOCAL LRET := .T.

PRIVATE N  := ODLGPLA:NAT

IF __CUSERID != "000000"						// NÃO É ADMINISTRADOR
	LRET := EMPTY( GDFIELDGET("FPA_AS") )
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} LCDELZAG
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00143() 
// ======================================================================= \\
// NAO PERMITE EXCLUIR LINHA QUE EXISTA NF DE REMESSA.

LOCAL LRET := .T.

IF EMPTY( GDFIELDGET("FPA_NFREM") )
	IF !EMPTY( GDFIELDGET("FPA_AS") )
		IF ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+GDFIELDGET("FPA_AS"),9,"")) <> "9"
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Cancele a AS para poder excluir a linha."})
			LRET := .F.
		ENDIF
	ENDIF
ELSE
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   			Nil,"Este registro não pode ser excluído.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 			{"Existem notas de remessa emitidas, cancele as notas."})
	LRET := .F.
ENDIF

//IF EXISTBLOCK("LC01DPLA") .AND. LRET 			// --> PONTO DE ENTRADA PARA TRATAMENTO DA DELECAO DA LINHA 
//	LRET := EXECBLOCK("LC01DPLA",.T.,.T.,{ODLGPLA:NAT, ODLGPLA:ACOLS, ODLGPLA:AHEADER  })
//ENDIF

// TRATAMENTO PARA OS ITENS FILHOS
IF LRET
	// TODAS AS REGRAS QUE EVITAM A EXCLUSÃO DE UM ITEM DEVEM SER REPLICADAS PARA A FUNÇAO ABAIXO
	// NESTA FUNÇÃO TRATAMOS A EXCLUSÃO DOS ITENS FILHOS DA ESTRUTURA DO PRODUTO.
	LRET := LOCA00198()
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} FFOLDEROBR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDEROBR(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER LOCALIDADES

LOCAL   NSTYLE    := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL   CALIAS
LOCAL   CCHAVE
LOCAL   CCONDICAO
LOCAL   NINDICE
LOCAL   CFILTRO
LOCAL   CPROJET   := PROJETO()
LOCAL   LMULTOBR	:= SUPERGETMV("MV_LOCX280",.F.,.T.) 

PRIVATE NINSS     := 0

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE) 		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP1",NOPCMANU, NSTYLE})
ENDIF 

CALIAS    := "FP1"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FP1_FILIAL+FP1_PROJET=="'+CCHAVE+'"'
NINDICE   := 1  								// FP1_FILIAL+FP1_PROJET+FP1_OBRA
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FP1")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "FP1_OBRA"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS   ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
IF LMULTOBR
	ODLGOBR := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP1_OBRA",      ,       ,MAXGETDAD,        ,         ,{|| ITDELZA1()}   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ELSE
	ODLGOBR := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP1_OBRA",      ,       ,1			 ,        ,         ,{|| ITDELZA1()}   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ENDIF

ODLGOBR:OBROWSE:BCHANGE := {|| LOCA00144()} 

RETURN NIL


/*/{PROTHEUS.DOC} MUDAOBRB 
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00144()
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER LOCALIDADES

FOBRA()
OOBRA:REFRESH()

RETURN .T.


/*/{PROTHEUS.DOC} FSALVAROBR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVAROBR(CALIAS , AHEADER ,ACOLS) 
// ======================================================================= \\
// --> FOLDER LOCALIDADES

LOCAL NPOS,AGRAVADOS	:= {} 	// GRAVADOS
LOCAL AVISTORIA			:= {}
LOCAL NCOMPL   			:= 0
LOCAL NREVIS            := 0
LOCAL NAUXC             := 0
LOCAL NAUXR             := 0
LOCAL CTIPORAT 			:= ""
LOCAL CENVMAIL          := ""
LOCAL CPROJET           := PROJETO()
LOCAL _aArea            := GetArea()

DBSELECTAREA(CALIAS)  							// OBRAS
DBSETORDER(1)  									// FP1_FILIAL+FP1_PROJET+FP1_OBRA

IF NOPC != 5  									// 5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  // GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FP1_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FP1_PROJET := CPROJET
			(CALIAS)->FP1_OBRA   := COBRA
			(CALIAS)->FP1_RESPON := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_RESPON"})]
			AADD(AGRAVADOS,RECNO())  			// GRAVADOS
			(CALIAS)->(MSUNLOCK())

			// SE TEM VISTORIA, CRIA UM REGISTRO NO ZA8 (RAT)
			IF FP1->(FP1_TEMVIS=="S")
				CENVMAIL := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMARAT"})]
				IF CENVMAIL == "S"
					AADD(AVISTORIA,{ZA6->(RECNO()),ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_RESPON"  })]})
				ENDIF

				CTIPORAT := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP1_TIPRAT"})]
				CTIPORAT := IIF(CTIPORAT==NIL , "" , CTIPORAT)		// O SISTEMA NÃO TINHA O ACOLS[1][8] (SÓ TEM ATÉ 7) E ESTAVA SE PERDENDO. 

				// --> GRAVAÇÃO DOS DADOS DA R.A.T. ----------- (*INICIO*) --
				IF FP5->(DBSEEK(XFILIAL("FP5")+CPROJET+COBRA))
					IF CTIPORAT $ "R/C"
						WHILE !EOF() .AND. FP5->FP5_PROJET + FP5->FP5_OBRA == CPROJET + COBRA
						   	NAUXC := IIF(!EMPTY(FP5->FP5_COMPLE) , VAL(FP5->FP5_COMPLE)+1 , 1) 
						   	IF NAUXC > NCOMPL
						      	NCOMPL := NAUXC
						   	ENDIF
						   	NAUXR := IIF(!EMPTY(FP5->FP5_REVISA) , VAL(FP5->FP5_REVISA)+1 , 1) 
						   	IF NAUXR > NREVIS 
						      	NREVIS := NAUXR 
						   	ENDIF 
						 	FP5->(DBSKIP()) 
						ENDDO 
				  	  	FP5->(RECLOCK("FP5",.T.)) 
					ELSE 
					  	FP5->(RECLOCK("FP5",.F.)) 
					ENDIF 
				ELSE 
					FP5->(RECLOCK("FP5",.T.)) 
				ENDIF 

				FP5->FP5_FILIAL := XFILIAL("FP5") 
				FP5->FP5_PROJET := CPROJET 
				FP5->FP5_OBRA   := COBRA 
			 //	FP5->FP5_COD    := GETSXENUM("FP5","FP5_COD")
				FP5->FP5_CODCLI := FP1->FP1_CLIORI
				FP5->FP5_LOJA   := FP1->FP1_LOJORI
				FP5->FP5_NOMCLI := FP1->FP1_NOMORI
				FP5->FP5_RESPON := FP1->FP1_NOMRES
				FP5->FP5_OBSERV := FP1->FP1_ESCOPO
	            FP5->FP5_GESTOR := FP0->FP0_VENDED
				FP5->FP5_ITEM   := "001"
				IF     FP0->FP0_TIPOSE == "T"
					 CTIPOSE := "TRANSPORTE"
				ELSEIF FP0->FP0_TIPOSE == "L"
					 CTIPOSE := "LOCAÇÃO"
				ELSE
					 CTIPOSE := "EQUIPAMENTOS"
				ENDIF
				FP5->FP5_TPSERV := CTIPOSE 	// FP0->FP0_TIPOSE
				IF     CTIPORAT == "R"
                    FP5->FP5_REVISA	:= STRZERO(NREVIS,3)
				ELSEIF CTIPORAT == "C"
				    FP5->FP5_COMPLE := STRZERO(NCOMPL,3)
				ENDIF
				FP5->FP5_PRAZO := FP1->FP1_DTVIS 
				FP5->(MSUNLOCK()) 
				// --> GRAVAÇÃO DOS DADOS DA R.A.T. ----------- (*FINAL* ) --

			ENDIF 
		ENDIF 
	NEXT NPOS 
ENDIF 

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. FP1_FILIAL+FP1_PROJET==XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO 

RestArea(_aArea)

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERROT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERROT(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER ROTAS

LOCAL NSTYLE  := GD_UPDATE 						// GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"ZA4",NOPCMANU, NSTYLE})
ENDIF  

CALIAS    := "ZA4"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'ZA4_FILIAL+ZA4_PROJET=="'+CCHAVE+'"'
NINDICE   := 1  								// ZA4_FILIAL+ZA4_PROJET+ZA4_OBRA+ZA4_SEQTRA+ZA4_SEQGUI+ZA4_SEQGRU+ZA4_ORIGEM+ZA4_DESTIN+ZA4_ROTA+ZA4_ETAPA
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("ZA4")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

//	                           NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGROT := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,        ,      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGROT:OBROWSE:BCHANGE := {|| MUDAROTB()}

FACUMUROT()
FTRAZROT()

RETURN NIL 


/*/{PROTHEUS.DOC} MUDAROTB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDAROTB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER ROTAS

FOBRA()

IF ODLGROT:NAT > LEN(ODLGROT:ACOLS)
	ODLGROT:NAT := LEN(ODLGROT:ACOLS)
ENDIF

ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_OBRA"  })] := COBRA
ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGUI"})] := CSEQGUI
ODLGROT:OBROWSE:REFRESH()

RETURN .T. 


/*/{PROTHEUS.DOC} FSALVARROT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARROT(CALIAS,AHEADER,ACOLS)		// FOLDER ROTAS
// ======================================================================= \\

LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL CSEQTRA   := SPACE(3)
LOCAL CSEQGRU   := SPACE(3)

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMUROT()
ACOLS := ACLONE(OROT_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  									// 5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA4_OBRA"  })]
	 //	CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQTRA"})]
		CSEQGUI := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGUI"})]
	 //	CSEQGRU := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="ZA4_SEQGRU"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA+CSEQGUI+CSEQGRU)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA+CSEQGUI+CSEQGRU)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->ZA4_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->ZA4_PROJET := CPROJET
			(CALIAS)->ZA4_OBRA   := COBRA
			(CALIAS)->ZA4_SEQTRA := CSEQTRA
			(CALIAS)->ZA4_SEQGUI := CSEQGUI
			(CALIAS)->ZA4_SEQGRU := CSEQGRU
			AADD(AGRAVADOS,RECNO())  			// GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT NPOS 
ENDIF

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. ZA4_FILIAL+ZA4_PROJET==XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO

RETURN NIL

/*/{PROTHEUS.DOC} FFOLDERTRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


// ======================================================================= \\
STATIC FUNCTION FFOLDERTRE(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER TRECHOS

LOCAL NSTYLE     := GD_UPDATE					// GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CCAMPO
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET    := PROJETO()
LOCAL CCAMPOSNAO := ""

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FPD",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "FPD"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FPD_FILIAL+FPD_PROJET=="'+CCHAVE+'"'
NINDICE   := 1  								// FPD_FILIAL+FPD_PROJET+FPD_OBRA+FPD_SEQTRA+FPD_SEQGUI+FPD_SEQGRU+FPD_SEQCAR+FPD_ORIGEM+FPD_DESTIN+FPD_ROTA+FPD_ETAPA
CFILTRO   := CCONDICAO

IF FP0->FP0_TIPOSE == "T"
	CCAMPOSNAO := "FPD_SEQGUI;FPD_SEQGRU"

ELSEIF FP0->FP0_TIPOSE == "E"
	CCAMPOSNAO := "FPD_SEQGRU;FPD_SEQTRA;FPD_SEQCAR"

ELSEIF FP0->FP0_TIPOSE == "L"
	CCAMPOSNAO := "FPD_SEQGUI;FPD_SEQTRA;FPD_SEQCAR"
ENDIF

AHEADER := FHEADER("FPD", , CCAMPOSNAO)
ACOLS   := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS) == 1
	CCAMPO    := "FPD_ETAPA"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO      })] := STRZERO(1,LEN(CCAMPOGET))
		IF GDFIELDPOS("FPD_SEQTRA", AHEADER) > 0
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
		IF GDFIELDPOS("FPD_SEQGUI", AHEADER) > 0
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
		IF GDFIELDPOS("FPD_SEQGRU", AHEADER) > 0
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
		IF GDFIELDPOS("FPD_SEQCAR", AHEADER) > 0
			ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})] := STRZERO(1,LEN(CCAMPOGET))
		ENDIF
	ENDIF
ENDIF

CCAMPO    := "FPD_ETAPA"
CCAMPOGET := OTRE_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	OTRE_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO      })] := STRZERO(1,LEN(CCAMPOGET))
	IF GDFIELDPOS("FPD_SEQTRA", AHEADER) > 0
		OTRE_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
	IF GDFIELDPOS("FPD_SEQGUI", AHEADER) > 0
		OTRE_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
	IF GDFIELDPOS("FPD_SEQGRU", AHEADER) > 0
		OTRE_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
	IF GDFIELDPOS("FPD_SEQCAR", AHEADER) > 0
		OTRE_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS    ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGTRE := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FPD_ETAPA",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGTRE:OBROWSE:BCHANGE := {|| MUDATREB()}

FACUMUTRE()
FTRAZTRE()

@ NLIN2+005,NCOL2-100 BUTTON OBUTTROTAS PROMPT "Rotas" SIZE 60,10 ACTION FVERROTAS() OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 

FMONTAKM(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 

RETURN NIL


/*/{PROTHEUS.DOC} MUDATREB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDATREB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER TRECHOS

FOBRA()

IF ODLGTRE:NAT > LEN(ODLGTRE:ACOLS)
	ODLGTRE:NAT := LEN(ODLGTRE:ACOLS)
ENDIF

ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"})]       := COBRA 

IF GDFIELDPOS("FPD_SEQTRA", ODLGTRE:AHEADER) > 0
	ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})] := CSEQTRA 
ENDIF
IF GDFIELDPOS("FPD_SEQGUI", ODLGTRE:AHEADER) > 0
	ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})] := CSEQGUI 
ENDIF
IF GDFIELDPOS("FPD_SEQGRU", ODLGTRE:AHEADER) > 0
	ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})] := CSEQGRU 
ENDIF
IF GDFIELDPOS("FPD_SEQCAR", ODLGTRE:AHEADER) > 0
	ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})] := CSEQCAR 
ENDIF

ODLGTRE:OBROWSE:REFRESH()

RETURN .T. 


/*/{PROTHEUS.DOC} FSALVARTRE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARTRE(CALIAS,AHEADER,ACOLS)		// FOLDER TRECHOS
// ======================================================================= \\

LOCAL NPOS
LOCAL AGRAVADOS := {}  //GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL CSEQTRA   := SPACE(3)
LOCAL CSEQGUI   := SPACE(3)
LOCAL CSEQGRU   := SPACE(3)
LOCAL CSEQCAR   := SPACE(3)

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMUTRE()
ACOLS := ACLONE(OTRE_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  //5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"  })]
		IF GDFIELDPOS("FPD_SEQTRA", ODLGTRE:AHEADER) > 0
			CSEQTRA := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})]
		ENDIF
		IF GDFIELDPOS("FPD_SEQGUI", ODLGTRE:AHEADER) > 0
			CSEQGUI := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGUI"})]
		ENDIF
		IF GDFIELDPOS("FPD_SEQGRU", ODLGTRE:AHEADER) > 0
			CSEQGRU := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQGRU"})]
		ENDIF
		IF GDFIELDPOS("FPD_SEQCAR", ODLGTRE:AHEADER) > 0
			CSEQCAR := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQCAR"})]
		ENDIF

		CORIGEM := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ORIGEM"})]
		CDESTIN := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DESTIN"})]
		CROTA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })]
		CETAPA  := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA" })]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR);
		                               .AND. !EMPTY(CORIGEM) .AND. !EMPTY(CDESTIN) .AND. !EMPTY(CROTA) .AND. !EMPTY(CETAPA)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQTRA+CSEQGUI+CSEQGRU+CSEQCAR+CORIGEM+CDESTIN+CROTA+CETAPA)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FPD_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FPD_PROJET := CPROJET
			(CALIAS)->FPD_OBRA   := COBRA
			(CALIAS)->FPD_SEQTRA := CSEQTRA
			(CALIAS)->FPD_SEQGUI := CSEQGUI
			(CALIAS)->FPD_SEQGRU := CSEQGRU
			(CALIAS)->FPD_SEQCAR := CSEQCAR
			(CALIAS)->FPD_ORIGEM := CORIGEM
			(CALIAS)->FPD_DESTIN := CDESTIN
			(CALIAS)->FPD_ROTA   := CROTA
			(CALIAS)->FPD_ETAPA  := CETAPA
			AADD(AGRAVADOS,RECNO())  //GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
ENDIF

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. FPD_FILIAL+FPD_PROJET==XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO

RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERFOL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERFOL(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER FOLLOW-UP
// MSDOCUMENT

LOCAL   NSTYLE	   := GD_INSERT + GD_UPDATE + GD_DELETE //0						// GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL   ASTATUS
LOCAL   ARET       := {}
LOCAL   CPROJET    := PROJETO()

PRIVATE AHEADER    := {}
PRIVATE ACOLS      := {}

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP9",NOPCMANU, NSTYLE})
ENDIF

IF FP0->FP0_STATUS == "1"
	AADD(ARET,"1=EM ELABORAÇÃO")
ENDIF
IF FP0->FP0_STATUS == "2"
	AADD(ARET,"2=EM APROVAÇÃO" )
ENDIF
IF FP0->FP0_STATUS == "3"
	AADD(ARET,"3=APROVADO"     )
ENDIF
IF FP0->FP0_STATUS == "4"
	AADD(ARET,"4=NÃO APROVADO" )
ENDIF
IF FP0->FP0_STATUS == "5"
	AADD(ARET,"5=FECHADO"      )
ENDIF
IF FP0->FP0_STATUS $  "3|6"
	AADD(ARET,"6=INDISPONÍVEL" )
ENDIF
IF FP0->FP0_STATUS $  "3|7"
	AADD(ARET,"7=REJEITADO"    )
ENDIF
IF FP0->FP0_STATUS $  "5|8"
	AADD(ARET,"8=FATURADO"     )
ENDIF
IF FP0->FP0_STATUS == "A"
	AADD(ARET,"A=REVISADO"     )
ENDIF
IF FP0->FP0_STATUS $  "1|B"
	AADD(ARET,"B=EXCLUIDO"     )
ENDIF
IF FP0->FP0_STATUS $  "3|C"
	AADD(ARET,"C=PERDIDO"      )
ENDIF

IF EXISTBLOCK("LC001FST") 						// --> PONTO DE ENTRADA ALTERAÇÃO DOS STATUS DISPONÍVEIS NA ABA FOLLOW UP.
	ARET := EXECBLOCK("LC001FST",.T.,.T.,{ARET})
ENDIF

ASTATUS := ACLONE(ARET)  						// TRAZ OS STATUS DAS PROPOSTAS PERMITIDAS NO PROCESSO DE APROVAÇÃO

FP9->(DBSEEK(XFILIAL("FP9")+CPROJET))
CFOLLOW0 := FP9->FP9_FOLLOW

@ NLIN1+20+00                       ,NCOL1 GET OFOLLOW  VAR CFOLLOW  SIZE INT((NCOL2-NCOL1)/2),INT((NLIN2-22)*.25)    OF OFOLDER:ADIALOGS[NFOLDER] PIXEL MEMO
@ NLIN1+20+00+INT((NLIN2-22)*.25)+05,NCOL1 GET OFOLLOW0 VAR CFOLLOW0 SIZE INT((NCOL2-NCOL1)/2),INT((NLIN2-22)*.75)-05 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL MEMO

OFOLLOW0:LREADONLY :=.T.
OFOLLOW:LREADONLY  := ! FWHEN()

@ NLIN1,NCOL1 TO NLIN1+18,NCOL2 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 
@ NLIN1+06,NCOL1+005 SAY   OEMTOANSI("Data para o retorno:")  SIZE 060,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL
@ NLIN1+05,NCOL1+060 MSGET ODATARET VAR DDATARET PICTURE "@D" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() //WHEN UPPER(ALLTRIM(SUBS(CUSUARIO,7,05)))==UPPER("ADMIN")

@ NLIN1+06,NCOL2-275 SAY   OEMTOANSI("Validade:")             SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL
@ NLIN1+05,NCOL2-240 MSGET ODATAVAL VAR DDATAVAL PICTURE "@D" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() //WHEN UPPER(ALLTRIM(SUBS(CUSUARIO,7,05)))==UPPER("ADMIN")

FMONTAFOL()  									// MONTA AHEADER E ACOLS DO FOLDER FOLLOW-UP

NCOL2B:=INT((NCOL2-NCOL1)/2)+10
@ NLIN1+18,INT((NCOL2-NCOL1)/2)+10 TO NLIN1+20+00+INT((NLIN2-22)*.25),NCOL2 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 

@ NLIN1+23,NCOL2B+002 SAY OEMTOANSI("Status:")                     SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL
@ NLIN1+22,NCOL2B+035 COMBOBOX OSTATUS  VAR CSTATUS ITEMS ASTATUS  SIZE 065,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN()		//WHEN UPPER(ALLTRIM(SUBS(CUSUARIO,7,05)))==UPPER("ADMIN")

@ NLIN1+35,NCOL2B+002 SAY   OEMTOANSI("Ganhador:")                 SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL
@ NLIN1+34,NCOL2B+035 MSGET OCODCONCO  VAR CCODCONCO  PICTURE "@!" SIZE 030,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() .AND. CSTATUS=="7" F3 "ZAH" VALID FTRAZCONCO(CCODCONCO)
@ NLIN1+34,NCOL2B+070 MSGET ONOMCONCO  VAR CNOMCONCO  PICTURE "@!" SIZE 150,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN(.F.)

@ NLIN1+46,NCOL2B+002 SAY   OEMTOANSI("Vr.Transp.:")               SIZE 040,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL
@ NLIN1+45,NCOL2B+035 MSGET OVALCONCO  VAR NVALCONCO  PICTURE "@E 999,999,999.99" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() .AND. CSTATUS=="7"

@ NLIN1+46,NCOL2B+93 SAY   OEMTOANSI("Vr.Locação:")               SIZE 040,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL
@ NLIN1+45,NCOL2B+133 MSGET OVALCONCOL VAR NVALCONCOL PICTURE "@E 999,999,999.99" SIZE 045,008 OF OFOLDER:ADIALOGS[NFOLDER] PIXEL WHEN FWHEN() .AND. CSTATUS=="7"

//                             NTOP                              ,NLEFT                  ,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS} 
//ODLGFOL := MSNEWGETDADOS():NEW(NLIN1+20+00+INT((NLIN2-22)*.25)+05,INT((NCOL2-NCOL1)/2)+10,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,        ,      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS) 
//ODLGFOL:OBROWSE:BLDBLCLICK:= {|| LOCA00145("OPEN",CDIRPROJ+"\"+ALLTRIM(ODLGFOL:ACOLS[ODLGFOL:NAT][ASCAN(ODLGFOL:AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMAORI"})]),"","",.T.)}  //.T.=MOSTRA MENSAGEM DE ERRO

RETURN NIL 


/*/{PROTHEUS.DOC} FTRAZCONCO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FTRAZCONCO(CCOD) 
// ======================================================================= \\
// --> FOLDER FOLLOW-UP

CNOMCONCO := POSICIONE("ZAH" , 1 , XFILIAL("ZAH")+CCOD , "ZAH_NOME") 

RETURN .T.


/*/{PROTHEUS.DOC} FSALVARFOL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARFOL(CALIAS)		// FOLDER FOLLOW-UP
// ======================================================================= \\

LOCAL CALIASZA0 := "FP0"
LOCAL CPROJET   := PROJETO()
LOCAL _aArea    := GetArea()

// --> GRAVA A DATA DE RETORNO NO ZA0
DBSELECTAREA(CALIASZA0)
DBSETORDER(1) 								// FP0_FILIAL+FP0_PROJET+FP0_NUM

IF NOPC == 3  								// 3=INCLUI
	M->FP0_DTRETO := DDATARET
ELSE
	RECLOCK(CALIASZA0,.F.)
	(CALIASZA0)->FP0_DTRETO := DDATARET 	// DATA DE RETORNO
	(CALIASZA0)->FP0_STATUS := CSTATUS 		// GRAVO O STATUS NO CASO DE SER ABERTO APENAS PELO BOTÃO FOLLOW-UP
	(CALIASZA0)->(MSUNLOCK())
ENDIF

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF DBSEEK( XFILIAL(CALIAS) + CPROJET) .AND. NOPC == 5  //5=EXCLUI
	RECLOCK(CALIAS,.F.)
	(CALIAS)->(DBDELETE())
	(CALIAS)->(MSUNLOCK())
    BLOQCLASS(CPROJET)
	RETURN NIL
ENDIF

IF  ! EMPTY(DDATARET) .OR. ! EMPTY(CFOLLOW) 
	DBSELECTAREA(CALIAS)
	DBSETORDER(1)

	IF ! DBSEEK( XFILIAL(CALIAS) + CPROJET)
		RECLOCK(CALIAS,.T.)
		(CALIAS)->FP9_FILIAL := XFILIAL(CALIAS)
		(CALIAS)->FP9_PROJET := CPROJET  //NRO.PROJETO
		(CALIAS)->FP9_DATA   := DDATARET
		(CALIAS)->FP9_ITEM   := "001"
		(CALIAS)->FP9_DDIA   := DDATABASE
		(CALIAS)->FP9_USER   := USRRETNAME(RETCODUSR())
		(CALIAS)->FP9_MAIL   := USRRETMAIL(RETCODUSR())
	ELSE
		IF SELECT("TRBZAF") > 0		//TRAZ ULTIMO REGISTRO
			TRBFP9->(DBCLOSEAREA())
		ENDIF
		CSQL := " SELECT TOP 1 FP9_ITEM "
		CSQL += " FROM "+RETSQLNAME("FP9")
		CSQL += " WHERE  FP9_PROJET = '"+CPROJET+"'"
		CSQL +=   " AND  D_E_L_E_T_ = '' "
		CSQL += " ORDER BY FP9_ITEM DESC "
		DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRBZAF" , .F. , .T.) 
		CSEQ := SOMA1( ALLTRIM(TRBFP9->FP9_ITEM) , 3 , .T. ) 
		IF SELECT("TRBZAF") > 0
			TRBFP9->(DBCLOSEAREA())
		ENDIF
		RECLOCK(CALIAS,.F.)
		(CALIAS)->FP9_FILIAL := XFILIAL(CALIAS)
		(CALIAS)->FP9_PROJET := CPROJET  //NRO.PROJETO
		(CALIAS)->FP9_DATA   := DDATARET
		(CALIAS)->FP9_USER   := USRRETNAME(RETCODUSR())
		(CALIAS)->FP9_MAIL   := USRRETMAIL(RETCODUSR())
		(CALIAS)->FP9_DDIA   := DDATABASE
		(CALIAS)->FP9_ITEM   := CSEQ
	ENDIF

	// A CADA INCLUSÃO O SISTEMA DEVERÁ IDENTIFICAR A DATA, HORA E USUÁRIO QUE EXECUTOU A TAREFA
	IF !EMPTY(CFOLLOW)
		CFOLLOW := "==> " + DTOC(DDATABASE) + " AS " + TIME() + " POR " + SUBSTR(CUSUARIO,7,15) + CRLF + ALLTRIM(CFOLLOW)
		(CALIAS)->FP9_FOLLOW :=	CFOLLOW + CRLF + REPLICATE("_",100) + CRLF + ALLTRIM(CFOLLOW0)
	ENDIF
	(CALIAS)->(MSUNLOCK())
ENDIF
restarea(_aArea)
RETURN NIL 


/*/{PROTHEUS.DOC} FMONTAFOL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FMONTAFOL() 
// ======================================================================= \\
// --> MONTA AHEADER E ACOLS DO FOLDER FOLLOW-UP

LOCAL NPOS
LOCAL ADIR
LOCAL ACOLS0
LOCAL CCAMPOSSIM := "AC9_DESCRI"

/*
LOCAL CCAMPOSSIM := "FP1_OBRA;FP1_EMAORI"

AHEADER := FHEADER("FP1", CCAMPOSSIM)
AHEADER[1,1] := "SEQ"
AHEADER[2,1] := "NOME DO ARQUIVO"

ADIR  := DIRECTORY(CDIRPROJ+"\*.*")
ACOLS := {}

FOR NPOS:=1 TO LEN(ADIR)
	ACOLS0 := {}
	AADD(ACOLS0,STRZERO(NPOS,3))
	AADD(ACOLS0,ADIR[NPOS,1])
	AADD(ACOLS0,.F.  )  						// DELETED
	AADD(ACOLS,ACOLS0)
NEXT

IF VALTYPE(ODLGFOL)=="O"  						// SE O OBJETO JÁ FOI CRIADO
	ODLGFOL:AHEADER := ACLONE(AHEADER)
	ODLGFOL:ACOLS   := ACLONE(ACOLS)
	ODLGFOL:OBROWSE:REFRESH()
ENDIF
*/

AHEADER := FHEADER("AC9", CCAMPOSSIM)
ACOLS := {}
CALIAS    := "AC9"
CCHAVE    := XFILIAL(CALIAS)+"FP0"+CFILANT+CFILANT+FP0->FP0_PROJET
CCONDICAO := "ALLTRIM(AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT)=='"+ALLTRIM(CCHAVE)+"'"
NINDICE   := 2  								
CFILTRO   := CCONDICAO
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)


RETURN .T.


/*/{PROTHEUS.DOC} ABREDOCS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00145(COPER,CFILENAME,CPARAM,CDIR,LMSG)		// FOLDER FOLLOW-UP
// ======================================================================= \\

LOCAL NRET := 0

/*
IF !EMPTY(CFILENAME) 		//ALTERADO PARA QUE SEJA COPIADO PARA A MAQUINA DO USUÁRIO O DOCUMENTO ANTES DE ABRIR.
	NRET := SHELLEXECUTE(COPER,CFILENAME,CPARAM,CDIR,1)
	IF NRET <= 32
		IF LMSG
			MSGSTOP("ATENÇÃO: NÃO FOI POSSÍVEL ABRIR O ARQUIVO "+CFILENAME , "GPO - LOCC001.PRW") 
		ENDIF
		RETURN .F.
	ENDIF
ENDIF
*/

RETURN .T.


/*/{PROTHEUS.DOC} FFOLDERRES
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERRES(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER RESPONSABILIDADES

LOCAL NSTYLE     := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET    := PROJETO()
LOCAL CCAMPOSNAO := ""

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FP6",NOPCMANU, NSTYLE})
ENDIF 

CALIAS    := "FP6"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FP6_FILIAL+FP6_PROJET=="'+CCHAVE+'"'
NINDICE   := 2  								// FP6_FILIAL+FP6_PROJET+FP6_OBRA+FP6_SEQGUI+FP6_SEQRES
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FP6",, CCAMPOSNAO)
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "FP6_SEQRES"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

CCAMPO    := "FP6_SEQRES"
CCAMPOGET := ORES_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	ORES_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGRES := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FP6_SEQRES",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGRES:OBROWSE:BCHANGE := {|| MUDARESB()}

IF FP0->FP0_TIPOSE == "T"
	@ NLIN2+005,INT((NCOL2-NCOL1)/2)-30 BUTTON OBUTTPROJ PROMPT "Calcular" SIZE 60,10 ACTION CALCSISTEM(ODLGTRE:AHEADER,ODLGTRE:ACOLS) OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 
ENDIF

FACUMURES()
FTRAZRES()

RETURN NIL


/*/{PROTHEUS.DOC} MUDARESB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MUDARESB() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER RESPONSABILIDADES

LOCAL LRET   :=.T.
LOCAL CBECH  := SPACE(3)

FOBRA()

IF ODLGRES:NAT > LEN(ODLGRES:ACOLS)
	ODLGRES:NAT := LEN(ODLGRES:ACOLS)
ENDIF

IF EMPTY( ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] )
	DO CASE
	CASE FP0->FP0_TIPOSE == "E"					// EQUIPAMENTO
		CBECH := CSEQGUI
	CASE FP0->FP0_TIPOSE == "T"					// TRANSPORTE
		CBECH := CSEQTRA
	CASE FP0->FP0_TIPOSE == "L"					// PLATAFORMA
		CBECH := CSEQGRU
	ENDCASE

	ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]   := COBRA
	ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := CBECH
	ODLGRES:OBROWSE:REFRESH()
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} FSALVARRES
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARRES(CALIAS , AHEADER , ACOLS) 
// ======================================================================= \\
// --> FOLDER RESPONSABILIDADES 

LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL _NXX
LOCAL _aArea    := GetArea()

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMURES()
ACOLS := ACLONE(ORES_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(2)									// FP6_FILIAL+FP6_PROJET+FP6_OBRA+FP6_SEQGUI+FP6_SEQRES

IF NOPC !=5  									// 5=EXCLUI

	// FRANK EM 23/09/2020
	// TRATAMENTO PARA A DELECAO DA ZA1
	IF ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
		FOR _NXX := 1 TO LEN(ACOLS)
			IF ACOLS[_NXX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
				ACOLS[_NXX,LEN(AHEADER)+1] := .T.
				AADD(ARESDEL,ACLONE(ACOLS[_NXX]))
			ENDIF
		NEXT
	ENDIF

	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA  	 := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]
		CLOCACAO := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})]
		CSEQRES	 := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQRES"})]
		CCODRES  := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY( CLOCACAO ) .AND. !EMPTY(CSEQRES) .AND. !EMPTY(CCODRES)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CLOCACAO+CSEQRES)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FP6_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FP6_PROJET := CPROJET
			(CALIAS)->FP6_OBRA   := COBRA
			(CALIAS)->FP6_SEQGUI := CLOCACAO
			(CALIAS)->FP6_SEQRES := CSEQRES
			AADD(AGRAVADOS,RECNO())  			// GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
ENDIF

// EXCLUI OS REGISTROS ALTERADOS
DBSELECTAREA("FP6")
DBSETORDER(2)
FOR NPOS:=1 TO LEN(ARESDEL)
	IF DBSEEK(XFILIAL(CALIAS)+CPROJET+ARESDEL[NPOS][1]+ARESDEL[NPOS][2]+ARESDEL[NPOS][3])
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
NEXT
restarea(_aArea)
RETURN NIL


/*/{PROTHEUS.DOC} FFOLDERDOC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FFOLDERDOC(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> FOLDER DOCUMENTOS

LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET := PROJETO()

NSTYLE := IIF(NOPCMANU==2 , 0 , NSTYLE)  		// 2=VISUALIZAR

IF EXISTBLOCK("LC001EDT") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DA EDIÇÃO DA ABA 
	NSTYLE := EXECBLOCK("LC001EDT",.T.,.T.,{"FPB",NOPCMANU, NSTYLE})
ENDIF

CALIAS    := "FPB"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'FPB_FILIAL+FPB_PROJET=="'+CCHAVE+'"'
NINDICE   := 1  								// FPB_FILIAL+FPB_PROJET+FPB_OBRA+FPB_SEQDOC
CFILTRO   := CCONDICAO
AHEADER   := FHEADER("FPB")
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLS)==1
	CCAMPO    := "FPB_SEQDOC"
	CCAMPOGET := ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLS[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

CCAMPO    := "FPB_SEQDOC"
CCAMPOGET := ODOC_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
IF EMPTY(CCAMPOGET)
	ODOC_COLS0[1][ASCAN(AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
ENDIF

//                             NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS     ,AALTER,NFREEZE,NMAX     ,CFIELDOK,CSUPERDEL,CDELOK,OWND                     ,AHEADER,ACOLS}
ODLGDOC := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,"+FPB_SEQDOC",      ,       ,MAXGETDAD,        ,         ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADER,ACOLS)
ODLGDOC:OBROWSE:BCHANGE := {|| LOCA00146()}

FACUMUDOC()
FTRAZDOC()

@ NLIN2+005,INT((NCOL2-NCOL1)/2)-30 BUTTON OBUTTDOC PROMPT "Documentos" SIZE 60,10 ACTION FVERDOCUM() OF OFOLDER:ADIALOGS[NFOLDER] PIXEL 

RETURN NIL


/*/{PROTHEUS.DOC} MUDADOCB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00146() 
// ======================================================================= \\
// --> MUDA BROWSE - FOLDER DOCUMENTOS

FOBRA()

IF ODLGDOC:NAT > LEN(ODLGDOC:ACOLS)
	ODLGDOC:NAT := LEN(ODLGDOC:ACOLS)
ENDIF

ODLGDOC:ACOLS[ODLGDOC:NAT][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})] := COBRA
ODLGDOC:OBROWSE:REFRESH()

RETURN .T.


/*/{PROTHEUS.DOC} FSALVARDOC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARDOC(CALIAS,AHEADER,ACOLS) 
// ======================================================================= \\
// --> FOLDER DOCUMENTOS

LOCAL NPOS
LOCAL AGRAVADOS := {}  							// GRAVADOS
LOCAL CPROJET   := PROJETO()
LOCAL _aArea    := GetArea()

// ACUMULA O ACOLS CORRENTE NO ACOLS COM TODOS OS REGISTROS
FACUMUDOC()
ACOLS := ACLONE(ODOC_COLS)

DBSELECTAREA(CALIAS)
DBSETORDER(1)

IF NOPC != 5  //5=EXCLUI
	FOR NPOS:=1 TO LEN(ACOLS)
		COBRA   := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_OBRA"})]
		CSEQDOC := ACOLS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPB_SEQDOC"})]
		IF !ACOLS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(COBRA) .AND. !EMPTY(CSEQDOC)  //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQDOC)
				RECLOCK(CALIAS,.T.)
			ELSE
				RECLOCK(CALIAS,.F.)
			ENDIF
			FGRAVATUDO(CALIAS,AHEADER,ACOLS[NPOS])  //GRAVA TODOS OS CAMPOS DO ACOLS
			(CALIAS)->FPB_FILIAL := XFILIAL(CALIAS)
			(CALIAS)->FPB_PROJET := CPROJET
			(CALIAS)->FPB_OBRA   := COBRA
			(CALIAS)->FPB_SEQDOC := CSEQDOC
			AADD(AGRAVADOS,RECNO())  			// GRAVADOS
			(CALIAS)->(MSUNLOCK())
		ENDIF
	NEXT
ENDIF

// EXCLUI OS REGISTROS ALTERADOS
DBSEEK(XFILIAL(CALIAS)+CPROJET)
WHILE !EOF() .AND. FPB_FILIAL+FPB_PROJET==XFILIAL(CALIAS)+CPROJET
	IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
		RECLOCK(CALIAS,.F.)
		(CALIAS)->(DBDELETE())
		(CALIAS)->(MSUNLOCK())
	ENDIF
	DBSKIP()
ENDDO 
restarea(_aArea)
RETURN NIL


/*/{PROTHEUS.DOC} ZA0VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00147(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET   := .T.
LOCAL CCOD 
LOCAL CLOJA 

DO CASE
CASE UPPER(CCAMPO) == "FP0_PROSPE"
	IF TYPE("FP0_PROSPE")<>"U" 					// SE A VARIÁVEL EXISTE
		CCOD  := M->FP0_PROSPE
		CLOJA := M->FP0_LOJAP
		SUS->(DBSEEK(XFILIAL("SUS")+CCOD+CLOJA))
		SA1->(DBSEEK(XFILIAL("SA1")+SUS->US_CODCLI+SUS->US_LOJACLI))
		M->FP0_CLINOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_NOME)
		M->FP0_PRONOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_NOME   , SA1->A1_NOME)
		M->FP0_CLICGC := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CGC    , SA1->A1_CGC)
		M->FP0_CLIEND := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_END    , SA1->A1_END)
		M->FP0_CLIINS := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_INSCR  , SA1->A1_INSCR)
		M->FP0_CLIMUN := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_MUN    , SA1->A1_MUN)
		M->FP0_CLIBAI := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_BAIRRO , SA1->A1_BAIRRO)
		M->FP0_CLIEST := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EST    , SA1->A1_EST)
		M->FP0_CLICEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CEP    , SA1->A1_CEP)
		M->FP0_CLIEMA := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EMAIL  , SA1->A1_EMAIL)
		M->FP0_CLIDDD := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_DDD    , SA1->A1_DDD)
		M->FP0_CLITEL := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_TEL    , SA1->A1_TEL)
		M->FP0_CLIFAX := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_FAX    , SA1->A1_FAX)
		M->FP0_CLI    := SUS->US_CODCLI
		M->FP0_LOJA   := SUS->US_LOJACLI
		M->FP0_NOMECO := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , M->FP0_NOMECO  , SA1->A1_CONTATO)
		//M->FP0_CLIDEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_DEPTCON)
		M->FP0_VENDED := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI),SUS->US_VEND     , SA1->A1_VEND) 
		M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME") 
	ENDIF

CASE UPPER(CCAMPO) == "FP0_LOJAP"
	IF TYPE("FP0_LOJAP")<>"U"  					// SE A VARIÁVEL EXISTE
		CCOD  := M->FP0_PROSPE
		CLOJA := M->FP0_LOJAP
		SUS->(DBSEEK(XFILIAL("SUS")+CCOD+CLOJA))
		SA1->(DBSEEK(XFILIAL("SA1")+SUS->US_CODCLI+SUS->US_LOJACLI))
		M->FP0_CLINOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_NOME)
		M->FP0_PRONOM := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_NOME   , SA1->A1_NOME)
		M->FP0_CLICGC := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CGC    , SA1->A1_CGC)
		M->FP0_CLIEND := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_END    , SA1->A1_END)
		M->FP0_CLIINS := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_INSCR  , SA1->A1_INSCR)
		M->FP0_CLIMUN := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_MUN    , SA1->A1_MUN)
		M->FP0_CLIBAI := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_BAIRRO , SA1->A1_BAIRRO)
		M->FP0_CLIEST := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EST    , SA1->A1_EST)
		M->FP0_CLICEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_CEP    , SA1->A1_CEP)
		M->FP0_CLIEMA := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_EMAIL	 , SA1->A1_EMAIL)
		M->FP0_CLIDDD := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_DDD    , SA1->A1_DDD)
		M->FP0_CLITEL := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_TEL    , SA1->A1_TEL)
		M->FP0_CLIFAX := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , SUS->US_FAX    , SA1->A1_FAX)
		M->FP0_CLI    := SUS->US_CODCLI
		M->FP0_LOJA   := SUS->US_LOJACLI
		M->FP0_NOMECO := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , M->FP0_NOMECO  , SA1->A1_CONTATO)
		//M->FP0_CLIDEP := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI) , ""		     , SA1->A1_DEPTCON)
		M->FP0_VENDED := IIF(EMPTY(SUS->US_CODCLI) .AND. EMPTY(SUS->US_LOJACLI),SUS->US_VEND     , SA1->A1_VEND) 
		M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME")
	ENDIF

CASE UPPER(CCAMPO) == "FP0_CLI"
	IF TYPE("FP0_CLI")<>"U"  					// SE A VARIÁVEL EXISTE
    	CCOD  := M->FP0_CLI
		CLOJA := M->FP0_LOJA
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		M->FP0_CLINOM := SA1->A1_NOME
		M->FP0_CLICGC := SA1->A1_CGC
		M->FP0_CLIEND := SA1->A1_END
		M->FP0_CLIINS := SA1->A1_INSCR
		M->FP0_CLIMUN := SA1->A1_MUN
		M->FP0_CLIBAI := SA1->A1_BAIRRO
		M->FP0_CLIEST := SA1->A1_EST
		M->FP0_CLICEP := SA1->A1_CEP
		M->FP0_CLIEMA := SA1->A1_EMAIL
		M->FP0_CLIDDD := SA1->A1_DDD
		M->FP0_CLITEL := SA1->A1_TEL
		M->FP0_CLIFAX := SA1->A1_FAX
	 //	M->FP0_CLICON := SA1->A1_CONTATO
		M->FP0_NOMECO := SA1->A1_CONTATO
		//M->FP0_CLIDEP := SA1->A1_DEPTCON
		M->FP0_VENDED := SA1->A1_VEND
		M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME") 
		IF EMPTY(M->FP0_CLI)  					// SE CÓDIGO DO CLIENTE NÃO FOR PREENCHIDO, MARCA FALSE NO CAMPO FP0_CLIENTE
			M->FP0_CLIENTE :=.F.  				// CLIENTE S/N? (CRIARÁ O CLIENTE NO SA1 NA GERAÇÃO DO CONTRATO)
		ELSE
			M->FP0_CLIENTE :=.T.  				// CLIENTE S/N? (UTILIZARÁ OS DADOS DO CLIENTE DO SA1 NA GERAÇÃO DO CONTRATO)
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP0_LOJA"
	IF TYPE("FP0_LOJA")<>"U" 					// SE A VARIÁVEL EXISTE
		CCOD  := M->FP0_CLI
		CLOJA := M->FP0_LOJA
		// VERIFICO SE EXISTE ALGUM RECLAMAÇÃO NO CALL CENTER 
		IF SELECT("TRBSUC") > 0
			TRBSUC->(DBCLOSEAREA())
		ENDIF
        CCLIENTE:=CCOD+CLOJA
		CSQL     := " SELECT SUC.R_E_C_N_O_ AS SUCRECNO " 
		CSQL     += " FROM "+RETSQLNAME("SUC")+ " SUC"
		CSQL     += " WHERE  UC_CHAVE ='"+CCLIENTE+"' "
		IF SUC->(FIELDPOS("UC_XRECLAM")) > 0			// SE EXISTIR CONSIDERA NA QUERY - 31/08/2016
			CSQL +=   " AND  ISNULL(CONVERT(VARCHAR(2047),CONVERT(VARBINARY(2047), UC_XRECLAM)),'')<> '' "
		ENDIF
		CSQL     +=   " AND  SUC.D_E_L_E_T_ ='' "
		CSQL     += " ORDER BY SUCRECNO DESC"
		DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRBSUC" , .F. , .T.) 

		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME")
		M->FP0_CLINOM := SA1->A1_NOME
		M->FP0_CLICGC := SA1->A1_CGC
		M->FP0_CLIEND := SA1->A1_END
		M->FP0_CLIINS := SA1->A1_INSCR
		M->FP0_CLIMUN := SA1->A1_MUN
		M->FP0_CLIBAI := SA1->A1_BAIRRO
		M->FP0_CLIEST := SA1->A1_EST
		M->FP0_CLICEP := SA1->A1_CEP
		M->FP0_CLIEMA := SA1->A1_EMAIL
		M->FP0_CLIDDD := SA1->A1_DDD
		M->FP0_CLITEL := SA1->A1_TEL
		M->FP0_CLIFAX := SA1->A1_FAX
		M->FP0_NOMECO := SA1->A1_CONTATO
		//M->FP0_CLIDEP := SA1->A1_DEPTCON
		M->FP0_VENDED := SA1->A1_VEND
		M->FP0_NOMVEN := POSICIONE("SA3" , 1 , XFILIAL("SA3")+M->FP0_VENDED , "A3_NOME")
	ENDIF

CASE UPPER(CCAMPO) == "FP0_VENDED"
	IF TYPE("FP0_VENDED")<>"U" 					// SE A VARIÁVEL EXISTE
		CCOD := M->FP0_VENDED
		POSICIONE("SA3" , 1 , XFILIAL("SA3")+CCOD , "A3_NOME") 
		M->FP0_NOMVEN := SA3->A3_NOME
	ENDIF

CASE UPPER(CCAMPO) == "FP0_RECEIT"
	M->FP0_TIPOSE := LOCA00148(M->FP0_RECEIT,M->FP0_TIPOSE)
	M->FP0_MODPRO := LOCA00149(M->FP0_RECEIT,M->FP0_MODPRO)

CASE UPPER(CCAMPO) == "FP0_TIPOSE" .AND. M->FP0_TIPOSE <> M->FP0_RECEIT
	IF M->FP0_RECEIT $ "TO"
		IF ! M->FP0_TIPOSE $ "E;L"
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Tipo de serviço para receita de transportes só poderá ser E-Equipamento, L-Locação."})
			LRET := .F.
		ENDIF
	ELSE
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Só pode ser alterado o tipo de serviço para receita igual a T-Transportes."})
		LRET := .F.
	ENDIF

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "ZA4"
	LRET := LOCA00151(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FPD"
	LRET := LOCA00160(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP4"
	LRET := LOCA00152(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP1"
	LRET := LOCA00150(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "ZA6"
	LRET := LOCA00153(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "ZA7"
	LRET := LOCA00154(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP8"
	LRET := LOCA00156(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FP6"
	LRET := LOCA00155(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FPB"
	LRET := LOCA00159(CCAMPO)

CASE UPPER(SUBSTR(CCAMPO,1,3)) == "FPA"
	LRET := LOCA00157(CCAMPO)

ENDCASE

// PESQUISA NO CADASTRO DE CONTATOS E PREENCHE OS CAMPOS DEVIDOS.
IF UPPER(CCAMPO) $ "FP0_LOJA;FP0_CLI" .AND. SUPERGETMV("MV_LOCX238",.F.,.T.) // PARAMETRO PARA INFORMAR SE DEVE GATILHAR O CONTATO
	SU5->( DBSETORDER(1) )
	AC8->( DBSETORDER(2) )
	AC8->( DBSEEK( XFILIAL("AC8") + "SA1" + SA1->( A1_FILIAL + A1_COD + A1_LOJA ), .T. ))	// VÍNCULO CONTATOS X CLIENTES
	WHILE ! AC8->( EOF() ) .AND. XFILIAL("AC8") + "SA1" + SA1->( A1_FILIAL + A1_COD + A1_LOJA ) == AC8->( AC8_FILIAL+AC8_ENTIDA+AC8_FILENT+ LEFT(AC8_CODENT, LEN(SA1->A1_COD)+LEN(SA1->A1_LOJA) ) )
		IF SU5->( DBSEEK( XFILIAL("SU5") + AC8->AC8_CODCON, .T. ) ) .AND. SU5->U5_ATIVO != "2" 
			M->FP0_CLICON := SU5->U5_CODCONT
			M->FP0_NOMECO := SU5->U5_CONTAT
			M->FP0_CLIEMA := SU5->U5_EMAIL

			IF ! EMPTY( SU5->U5_DEPTO )
				SQB->( DBSETORDER(1) )
				IF SQB->( DBSEEK( XFILIAL("SQB") + SU5->U5_DEPTO ) )
					M->FP0_CLIDEP := SQB->QB_DESCRIC
				ENDIF
			ENDIF
			EXIT
		ENDIF
		AC8->(DBSKIP())
	ENDDO 
ENDIF

RETURN LRET 


/*/{PROTHEUS.DOC} FTIPOSE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00148(CRECEITA,CTIPOSE) 		// VALIDAÇÕES
// ======================================================================= \\

LOCAL CRET := CTIPOSE

IF CRECEITA $ " TEL"
	CRET := CRECEITA
ENDIF

RETURN CRET


/*/{PROTHEUS.DOC} FMODPRO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00149(CRECEITA,CMODPRO) 		// VALIDAÇÕES
// ======================================================================= \\

LOCAL CRET := CMODPRO

IF CRECEITA $ " TEL"
	CRET := "P"
ENDIF

RETURN CRET


/*/{PROTHEUS.DOC} ZA1VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00150(CCAMPO) 					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET := .T.
LOCAL CCOD
LOCAL CDESC
LOCAL CESTADO

DO CASE
CASE UPPER(CCAMPO) == "FP1_CLIORI"
	IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->FP1_CLIORI
		CLOJA := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_LOJORI"})]
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := SA1->A1_NOME
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CGCORI"})] := SA1->A1_CGC
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ENDORI"})] := SA1->A1_END
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_INSORI"})] := SA1->A1_INSCR
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := SA1->A1_MUN
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_BAIORI"})] := SA1->A1_BAIRRO
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := SA1->A1_EST
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CEPORI"})] := SA1->A1_CEP
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMAORI"})] := SA1->A1_EMAIL
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_DDDORI"})] := SA1->A1_DDD
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_TELORI"})] := SA1->A1_TEL
		IF ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"}) > 0
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"})] := SA1->A1_FAX
		ENDIF
/*	// --> P.E. DESCONTINUADO !!! 
		IF EXISTBLOCK("LOCC001_")
			XRET := U_LOCC001_( "END_OBRA", {} )
			IF TYPE("XRET") == "L" .AND. XRET
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ENDORI"})] := SA1->A1_ENDENT
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := SA1->A1_MUNE
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_BAIORI"})] := SA1->A1_BAIRROE
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := SA1->A1_ESTE
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CEPORI"})] := SA1->A1_CEPE
			ENDIF
		ENDIF
*/	// --> P.E. DESCONTINUADO !!! 
	ENDIF

CASE UPPER(CCAMPO) == "FP1_LOJORI"
	IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CLIORI"})]
		CLOJA := M->FP1_LOJORI
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := SA1->A1_NOME
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CGCORI"})] := SA1->A1_CGC
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ENDORI"})] := SA1->A1_END
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_INSORI"})] := SA1->A1_INSCR
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := SA1->A1_MUN
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_BAIORI"})] := SA1->A1_BAIRRO
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := SA1->A1_EST
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CEPORI"})] := SA1->A1_CEP
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_EMAORI"})] := SA1->A1_EMAIL
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_DDDORI"})] := SA1->A1_DDD
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_TELORI"})] := SA1->A1_TEL
		IF ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"}) > 0
			ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_FAXORI"})] := SA1->A1_FAX
		ENDIF
/*	// --> P.E. DESCONTINUADO !!! 
		IF EXISTBLOCK("LOCC001_")
			XRET := U_LOCC001_( "END_OBRA", {} )
			IF TYPE("XRET") == "L" .AND. XRET
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ENDORI"})] := SA1->A1_ENDENT
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := SA1->A1_MUNE
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_BAIORI"})] := SA1->A1_BAIRROE
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := SA1->A1_ESTE
				ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CEPORI"})] := SA1->A1_CEPE
			ENDIF
		ENDIF
*/	// --> P.E. DESCONTINUADO !!! 
	ENDIF

CASE UPPER(CCAMPO) == "FP1_ORIGEM"
	IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->FP1_ORIGEM
		CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNORI"})] := CDESC
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTORI"})] := CESTADO
	ENDIF

CASE UPPER(CCAMPO) == "FP1_DESTIN"
	IF VALTYPE(ODLGOBR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->FP1_DESTIN
		CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_MUNDES"})] := CDESC
		ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_ESTDES"})] := CESTADO
	ENDIF

ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} ZA4VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00151(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET    := .T.
LOCAL CCOD
LOCAL CDESC
LOCAL CESTADO

DO CASE
CASE UPPER(CCAMPO) == "ZA4_ORIGEM"
	IF VALTYPE(ODLGROT)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->ZA4_ORIGEM
		CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI")
		CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO")
		ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_MUNORI"})] := CDESC 
		ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_ESTORI"})] := CESTADO 
	ENDIF
CASE UPPER(CCAMPO) == "ZA4_DESTIN"
	IF VALTYPE(ODLGROT)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->ZA4_DESTIN
		CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
		ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_MUNDES"})] := CDESC 
		ODLGROT:ACOLS[ODLGROT:NAT][ASCAN(ODLGROT:AHEADER,{|X|ALLTRIM(X[2])=="ZA4_ESTDES"})] := CESTADO 
	ENDIF
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} ZA5VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00152(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET    := .T.
LOCAL CCOD
LOCAL NVALCAR
LOCAL NPERSEG
LOCAL NVALSEG
LOCAL DDTFIM
LOCAL NVALOR  := 0
LOCAL NA      := 0 
//LOCAL CDESC

DO CASE
CASE UPPER(CCAMPO) == "FP4_PRODUT"
	NVALOR := 0 // removido na 94 POSICIONE("SB1" , 1 , XFILIAL("SB1")+M->FP4_PRODUT , "B1_XVALMO") 
	NVALOR := NVALOR/ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR"})]
	NVALOR := NVALOR/0.01
	IF !EMPTY(NVALOR)
		ODLGGUI:ACOLS[N, GDFIELDPOS("FP4_PERMAO", AHEADER)] := NVALOR 
	ENDIF

CASE UPPER(CCAMPO) == "FP4_GUINDA"
	IF VALTYPE(ODLGGUI)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		/*
		CCOD    := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"})]
		CCODMAO := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_CODMAO"})]
		COBRA   := "001"
		DBSELECTAREA("FP1")
		DBSETORDER(1)
		DBSEEK(XFILIAL("FP1")+FP0->FP0_PROJET+COBRA)
        IF FIELDPOS("CC2_XISS") > 0
			ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERISS"})] := POSICIONE("CC2",2,XFILIAL("CC2")+FP1->FP1_MUNORI,"CC2_XISS")
		ENDIF
		IF !EMPTY(CCOD) .AND. !EMPTY(CCODMAO)
			ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_CODMAO"})] := SPACE(LEN(CCODMAO))
		ENDIF
		IF !EMPTY(CCOD) .OR. (EMPTY(CCOD) .AND. EMPTY(CCODMAO))
			CDESC := POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_NOME")
			ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DESGUI"})] := CDESC
		ENDIF
		IF !(EMPTY( ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_AS"  })] ))
			ASG    := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_AS"  })]
			CFROTA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"  })]
			FPO->(DBSETORDER(5))
			FPO->(DBSEEK(XFILIAL("FPO")+ASG+CFROTA))
			WHILE FPO->(!EOF()) .AND. FPO->FPO_NRAS == ASG .AND. FPO->FPO_FROTA == CFROTA
				IF FPO->FPO_STATUS == "S"
					MSGINFO("FROTA "+FPO->FPO_FROTA+" NÃO PODERÁ SER ALTERADA POIS EXISTE NOTA FISCAL DE SAIDA" , "GPO - LOCC001.PRW")
					LRET := .F.
				ENDIF
				FPO->(DBSKIP())
			ENDDO
		ENDIF
		*/
		CPRD := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PRODUT"})]
		CCOD := M->FP4_GUINDA
		
		IF !EMPTY(CCOD)
		   ST9->(DBSETORDER(1))
		   IF ST9->(DBSEEK(XFILIAL("ST9") + CCOD))
		      IF ALLTRIM(ST9->T9_CODESTO) <> ALLTRIM(CPRD)
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A frota informada (" + ALLTRIM(CCOD) + ") não possuí o produto (" + ALLTRIM(CPRD) + ") vinculado"})
		         	LRET := .F.
		      ELSEIF ST9->T9_SITBEM <> "A"
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O campo Situação do Bem está diferente de A=Ativo."})
				 
		         LRET := .F.				   
		      ELSEIF ST9->T9_SITMAN <> "A"
				 Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O campo Situação Manutenção está diferente de A=ATIVO."})
		         LRET := .F.				   
		      ELSEIF ST9->T9_TIPOSE <> "E" 
				 Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O campo Tipo Serviço está diferente de E=EQUIPAMENTO."})
		         LRET := .F.				   
		      ENDIF
		   ELSE
			  Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A frota informada (" + ALLTRIM(CCOD) + ") não está cadastrada."})
		      LRET := .F.
		   ENDIF
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP4_CODMAO"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->FP4_CODMAO
		CCODGUI := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"})]
		IF !EMPTY(CCOD) .AND. !EMPTY(CCODGUI)
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Informar equipamento, ou mão de obra."})
			M->FP4_CODMAO := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_CODMAO"})] 
			CCOD := SPACE(LEN(CCOD))
			LRET := .F.
		ENDIF
		IF !EMPTY(CCOD) .OR. (EMPTY(CCOD) .AND. EMPTY(CCODGUI))
			POSICIONE("SRJ",1,XFILIAL("SRJ")+CCOD,"RJ_FUNCAO") 
			ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DESGUI"})] := SRJ->RJ_DESC 
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP4_PERISS"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		FCALCCUS()
		FCALCGUI()
		ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRISS"})] := NVALISS
	ENDIF

CASE UPPER(CCAMPO) == "FP4_VRCARG"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NVALCAR := M->FP4_VRCARG
		NPERSEG := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERSEG"})]
		NVALSEG := ROUND(NVALCAR*NPERSEG/100,2)
		ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})] := NVALSEG 
	ENDIF

CASE UPPER(CCAMPO) == "FP4_PERSEG"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NVALCAR := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRCARG"})]
		NPERSEG := M->FP4_PERSEG
		NVALSEG := ROUND(NVALCAR*NPERSEG/100,2)
		ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})] := NVALSEG 
	ENDIF

CASE UPPER(CCAMPO) == "FP4_TIPOCA"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CTIPOCA := M->FP4_TIPOCA
		DDTINI  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DTINI"})]
		NPREDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
		NMINDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]

		IF     CTIPOCA == "H"
			FOR NA:=1 TO NRES 					// 10
				DDTVALID:= DATAVALIDA(DDTPAR,.T.)
				IF DDTVALID <> DDTPAR
					DDTPAR := DDTVALID
					DDTFIM := DDTPAR
					NA --
					LOOP
				ENDIF
				DDTFIM := DDTPAR
				DDTPAR++
			NEXT
		ELSEIF CTIPOCA == "M"
			DDTFIM := DDTINI + NPREDIA * 30
		ELSE	// É DIAS OU FECHADO
			DDTFIM := DDTINI + NPREDIA
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP4_PREDIA"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NPREDIA := M->FP4_PREDIA
		DDTINI  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DTINI"})]
		CTIPOCA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
		NMINDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]

		IF  CTIPOCA == "H"
			NRES   := INT(NPREDIA / NMINDIA)
			DDTPAR := DDTINI
			FOR NA:=1 TO NRES 					// 10
				DDTVALID:= DATAVALIDA(DDTPAR,.T.)
				IF DDTVALID <> DDTPAR
					DDTPAR := DDTVALID
					DDTFIM := DDTPAR
					NA --
					LOOP
				ENDIF
				DDTFIM := DDTPAR
				DDTPAR++
			NEXT
			IF NRES = 0 
			    DDTFIM := DDTINI 
			ENDIF 
		ELSEIF CTIPOCA == "M"
			DDTFIM := DDTINI + NPREDIA * 30
		ELSE									// É DIAS OU FECHADO
			DDTFIM := DDTINI + NPREDIA
		ENDIF

	ENDIF

CASE UPPER(CCAMPO) == "FP4_DTINI"
	IF VALTYPE(ODLGGUI)=="O" 					// SE O OBJETO JÁ FOI CRIADO

		NPREDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
		CTIPOCA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
		NMINDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]

		DDTINI  := M->FP4_DTINI
		DDTFIM  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DTFIM"})]

		IF !EMPTY( ALLTRIM( DTOS(DDTINI) ) ) .AND. !EMPTY( ALLTRIM( DTOS(DDTFIM) ) )
			IF DDTINI > DDTFIM
			   Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"A data inicial não pode ser maior que a data final."})
			   RETURN .F.
			ENDIF
		ENDIF
		/*
		// --> COMENTADO - SEM UTILIDADE.
		IF  CTIPOCA == "H"
			NRES := INT(NPREDIA / NMINDIA)
			DDTPAR:= DDTINI
			FOR NA:=1 TO NRES 				// 10
				DDTVALID:= DATAVALIDA(DDTPAR,.T.)
				IF DDTVALID <> DDTPAR
					DDTPAR := DDTVALID
					DDTFIM := DDTPAR
					NA --
					LOOP
				ENDIF
				DDTFIM := DDTPAR
				DDTPAR++
			NEXT
		    IF NRES = 0
			    DDTFIM := DDTINI
		    ENDIF
		ELSEIF CTIPOCA == "M"
			DDTFIM := DDTINI + NPREDIA * 30
		ELSE	// É DIAS OU FECHADO
			DDTFIM := DDTINI + NPREDIA
		ENDIF
		*/
	ENDIF

CASE UPPER(CCAMPO) == "FP4_DTFIM"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		DDTINI := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DTINI"})]
		DDTFIM := M->FP4_DTFIM
		IF !EMPTY( ALLTRIM( DTOS(DDTINI) ) ) .AND. !EMPTY( ALLTRIM( DTOS(DDTFIM) ) )
			IF DDTINI > DDTFIM
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"A data inicial não pode ser maior que a data final."})
				RETURN .F.
			ENDIF
		ENDIF 
	ENDIF

CASE UPPER(CCAMPO) == "FP4_HRINI"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CHRINI :=M->FP4_HRINI
        IF SUBSTR(CHRINI,1,2) == "24"
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"O horário inicial não pode ser 24:00 tem que ser 00:00"})
			RETURN .F.
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP4_HRFIM"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CHRFIM :=M->FP4_HRFIM
		IF SUBSTR(CHRFIM,1,2) == "00"
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O horário inicial não pode ser 00:00 tem que ser 24:00."})
			RETURN .F.
		ENDIF
	ENDIF						

CASE UPPER(CCAMPO) == "FP4_MINDIA"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NPREDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
		CTIPOCA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
		DDTINI  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DTINI"})]
		IF CTIPOCA == "H"
			NRES := NPREDIA / M->FP4_MINDIA
			IF NRES != INT(NRES)
				NRES := INT(++NRES)				// ARREDONDO, CONSIDERANDO AS HORAS EXCEDENTES COMO NOVO DIA DE TRABALHO
			ENDIF
			NRES--								// CONSIDERA A DTINI COMO DIA ÚTIL, ENTÃO TIRAMOS ELE DO ACRÉSCIMO AO DTFIM
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP4_MINMES"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NPREDIA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
		CTIPOCA := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
		DDTINI  := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_DTINI"})]

		IF CTIPOCA == "H"
			NRES := NPREDIA / M->FP4_MINMES
			IF NRES != INT(NRES)
				NRES := INT(++NRES)				// ARREDONDO, CONSIDERANDO AS HORAS EXCEDENTES COMO NOVO DIA DE TRABALHO
			ENDIF
			NRES--								// CONSIDERA A DTINI COMO DIA ÚTIL, ENTÃO TIRAMOS ELE DO ACRÉSCIMO AO DTFIM
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FP4_QVEICP"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NVALVEI := M->FP4_QVEICP
		NVALUNI := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRUNIT"})]
		NVALTOT := ROUND(NVALVEI*NVALUNI,2)
		ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})] := NVALTOT
	ENDIF

CASE UPPER(CCAMPO) == "FP4_VRUNIT"
	IF VALTYPE(ODLGGUI)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NVALUNI := M->FP4_VRUNIT
		NVALVEI := ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QVEICP"})]
		NVALTOT := ROUND(NVALVEI*NVALUNI,2)
		ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})] := NVALTOT
	ENDIF

ENDCASE

RETURN LRET 


/*/{PROTHEUS.DOC} ZA6VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00153(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET  := .T.
LOCAL CCOD
LOCAL CDESC

DO CASE
CASE UPPER(CCAMPO) == "ZA6_TRANSP"
	IF VALTYPE(ODLGTRA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->ZA6_TRANSP
		CDESC := POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_NOME") 
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DESTRA"})] := CDESC
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_ORIGEM"
	IF VALTYPE(ODLGTRA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->ZA6_ORIGEM
		CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
		IF EMPTY(CDESC) .AND. EMPTY(CESTADO)
			LRET := .F.
		ELSE
			ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNORI"})] := CDESC
			ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTORI"})] := CESTADO
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_DESTIN"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD    := M->ZA6_DESTIN
		CDESC   := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		CESTADO := POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_ESTADO") 
		IF EMPTY(CDESC) .AND. EMPTY(CESTADO)
			LRET := .F.
		ELSE
			ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNDES"})] := CDESC
			ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDES"})] := CESTADO
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_QUANT"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NQUANT  := M->ZA6_QUANT
		NVALUNI := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_VRUNIT"})]
		NVALTOT := NQUANT*NVALUNI
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_VRTOTA"})] := NVALTOT
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_VRUNIT"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		NQUANT  := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_QUANT" })]
		NVALUNI := M->ZA6_VRUNIT
		NVALTOT := NQUANT*NVALUNI
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_VRTOTA"})] := NVALTOT
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_CLIORI"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->ZA6_CLIORI
		CLOJA := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_LOJORI"})]
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_NOMORI"})] := SA1->A1_NOME
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CGCORI"})] := SA1->A1_CGC
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ENDORI"})] := SA1->A1_END
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_INSORI"})] := SA1->A1_INSCR
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNOR2"})] := SA1->A1_MUN
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_BAIORI"})] := SA1->A1_BAIRRO
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTOR2"})] := SA1->A1_EST
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CEPORI"})] := SA1->A1_CEP
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_EMAORI"})] := SA1->A1_EMAIL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DDDORI"})] := SA1->A1_DDD
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_TELORI"})] := SA1->A1_TEL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_FAXORI"})] := SA1->A1_FAX
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_LOJORI"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CLIORI"})]
		CLOJA := M->ZA6_LOJORI
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_NOMORI"})] := SA1->A1_NOME
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CGCORI"})] := SA1->A1_CGC
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ENDORI"})] := SA1->A1_END
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_INSORI"})] := SA1->A1_INSCR
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNOR2"})] := SA1->A1_MUN
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_BAIORI"})] := SA1->A1_BAIRRO
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTOR2"})] := SA1->A1_EST
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CEPORI"})] := SA1->A1_CEP
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_EMAORI"})] := SA1->A1_EMAIL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DDDORI"})] := SA1->A1_DDD
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_TELORI"})] := SA1->A1_TEL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_FAXORI"})] := SA1->A1_FAX
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_CLIDES"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->ZA6_CLIDES
		CLOJA := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_LOJDES"})]
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_NOMDES"})] := SA1->A1_NOME
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CGCDES"})] := SA1->A1_CGC
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ENDDES"})] := SA1->A1_END
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_INSDES"})] := SA1->A1_INSCR
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNDE2"})] := SA1->A1_MUN
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_BAIDES"})] := SA1->A1_BAIRRO
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDE2"})] := SA1->A1_EST
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CEPDES"})] := SA1->A1_CEP
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_EMADES"})] := SA1->A1_EMAIL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DDDDES"})] := SA1->A1_DDD
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_TELDES"})] := SA1->A1_TEL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_FAXDES"})] := SA1->A1_FAX
	ENDIF

CASE UPPER(CCAMPO) == "ZA6_LOJDES"
	IF VALTYPE(ODLGTRA)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CLIDES"})]
		CLOJA := M->ZA6_LOJDES
		POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCOD+CLOJA , "A1_NOME") 
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_NOMDES"})] := SA1->A1_NOME
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CGCDES"})] := SA1->A1_CGC
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ENDDES"})] := SA1->A1_END
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_INSDES"})] := SA1->A1_INSCR
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_MUNDE2"})] := SA1->A1_MUN
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_BAIDES"})] := SA1->A1_BAIRRO
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDE2"})] := SA1->A1_EST
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CEPDES"})] := SA1->A1_CEP
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_EMADES"})] := SA1->A1_EMAIL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_DDDDES"})] := SA1->A1_DDD
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_TELDES"})] := SA1->A1_TEL
		ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_FAXDES"})] := SA1->A1_FAX
	ENDIF
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} ZA7VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00154(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET      := .T.
LOCAL NSEGURO 	:= 0
LOCAL CUFORI	:= ""
LOCAL CUFDES	:= ""

DO CASE
CASE UPPER(CCAMPO) == "ZA7_COMP"
	IF VALTYPE(ODLGCAR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_COMP"})] := M->ZA7_COMP
	ENDIF

CASE UPPER(CCAMPO) == "ZA7_LARG"
	IF VALTYPE(ODLGCAR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_LARG"})] := M->ZA7_LARG
	ENDIF

CASE UPPER(CCAMPO) == "ZA7_ALTU"
	IF VALTYPE(ODLGCAR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_ALTU"})] := M->ZA7_ALTU
	ENDIF

CASE UPPER(CCAMPO) == "ZA7_PESO"
	IF VALTYPE(ODLGCAR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_PESO"})] := M->ZA7_PESO
	ENDIF

CASE UPPER(CCAMPO) == "ZA7_FORMAS"
	IF VALTYPE(ODLGCAR)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CUFORI := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTORI"})]
		CUFDES := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_ESTDES"})]
		IF M->ZA7_FORMAS == "1"
			NSEGURO := POSICIONE("ZLN" , 1 , XFILIAL("ZLN")+CUFORI+CUFDES , "ZLN_ADVLR")
			ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_VALADV"})] := NSEGURO
			NSEGURO := POSICIONE("ZLN" , 1 , XFILIAL("ZLN")+CUFORI+CUFDES , "ZLN_ALIQ" ) 
			ODLGCAR:ACOLS[ODLGCAR:NAT][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_VALICM"})] := NSEGURO
		ENDIF
	ENDIF

ENDCASE

IF VALTYPE(ODLGCON)=="O"
	FCALCCON()
	FDISPCON()
ENDIF
FDISPCAR()

RETURN LRET 


/*/{PROTHEUS.DOC} ZAAVALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00155(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET    := .T.
LOCAL CCOD
LOCAL CDESC

DO CASE
CASE UPPER(CCAMPO) == "FP6_CODIGO"
	IF VALTYPE(ODLGRES)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->FP6_CODIGO
		CDESC := POSICIONE("FP7" , 1 , XFILIAL("FP7")+CCOD , "FP7_DESCRI")
		ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
		ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
		ODLGRES:ACOLS[ODLGRES:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := FP7->FP7_RESPON
	ENDIF
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} ZAEVALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00156(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET     := .T.
LOCAL CCOD
LOCAL CDESC
LOCAL CCODEST

DO CASE
CASE UPPER(CCAMPO) == "FP8_TRANSP"
	IF VALTYPE(ODLGCON)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->FP8_TRANSP
		CDESC := POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_NOME") 
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_DESTRA"})] := CDESC
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_COMP"  })] := FTRAZCOMP(CCOD)
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_LARG"  })] := FTRAZLARG(CCOD)
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_ALTU"  })] := FTRAZALTU(CCOD)
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_PESO"  })] := FTRAZPESO(CCOD)
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_QTEIXO"})] := 0 		// FTRAZEIXO(CCOD)

		CCODEST := POSICIONE("ST9" , 1 , XFILIAL("ST9")+CCOD , "T9_CODESTO") 
		DBSELECTAREA("SB1")
		DBSETORDER(1)
		DBSEEK(XFILIAL("SB1")+CCODEST)

		N3COMP:=NCOMPCONG
		N3LARG:=NLARGCONG
		N3ALTU:=NALTUCONG
		N3PESO:=NPESOCONG
	ENDIF

CASE UPPER(CCAMPO) == "FP8_COMP"
	IF VALTYPE(ODLGCON)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_COMP"})] := M->FP8_COMP
	ENDIF

CASE UPPER(CCAMPO) == "FP8_LARG"
	IF VALTYPE(ODLGCON)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_LARG"})] := M->FP8_LARG
	ENDIF

CASE UPPER(CCAMPO) == "FP8_ALTU"
	IF VALTYPE(ODLGCON)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_ALTU"})] := M->FP8_ALTU
	ENDIF

CASE UPPER(CCAMPO) == "FP8_PESO"
	IF VALTYPE(ODLGCON)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGCON:ACOLS[ODLGCON:NAT][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_PESO"})] := M->FP8_PESO
	ENDIF

ENDCASE

IF VALTYPE(ODLGCON)=="O"
	FCALCCON()
	FDISPCON()
ENDIF
FDISPCAR()

RETURN LRET 


/*/{PROTHEUS.DOC} ZAGVALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00157(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET     := .T.
LOCAL CCOD
LOCAL CDESC
LOCAL CPROD
LOCAL CTPGUIM
LOCAL CTPGUID
LOCAL NBASE
LOCAL NPERC
LOCAL NVALOR
LOCAL aArea := GetArea()

DO CASE
CASE UPPER(CCAMPO) == "FPA_PRODUT"
	IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
		CPROD :=M->FPA_PRODUT
		SB1->(DBSETORDER(1))
		IF !SB1->(DBSEEK(XFILIAL("SB1") + CPROD))
   
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O produto: " + ALLTRIM(CPROD) + " não está cadastrado."})

	       LRET := .F.								
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FPA_GRUA"
	IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
		CPROD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]
		CCOD  := M->FPA_GRUA

		ST9->(DBSETORDER(1))
		IF ST9->(DBSEEK(XFILIAL("ST9") + CCOD))
			CDESC := ST9->T9_NOME
			NPES  := ST9->T9_PES
		   IF ALLTRIM(ST9->T9_CODESTO) <> ALLTRIM(CPROD)
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O equipamento: " + ALLTRIM(CCOD) + " não possui vínculo com o produto: " + ALLTRIM(CPROD)})

		      LRET := .F.
		   ENDIF
		ELSE
		   Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O equipamento: " + ALLTRIM(CCOD) + " não está cadastrado como bem."})

	       LRET := .F.				
		ENDIF
	
		IF LRET									// CONSULTA A DISPONIBILIDADE DE FROTA
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DESGRU"})] := CDESC 
			IF 	FPA->FPA_PES > 0
				ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PES"})] := NPES
				IF EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONJT" })])
					CCONJT := ALLTRIM(CAPITAL(POSICIONE("SX5",1,XFILIAL("SX5")+"76" + ALLTRIM(STR(NPES,3,0)),"X5_DESCRI")))
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_CONJT" })] := CCONJT 
				ENDIF
		    ENDIF
			M->FPA_DTINI := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
			M->FPA_DTFIM := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})]

			//LOCA00165(CCOD , M->FPA_DTINI , M->FPA_DTFIM) 
		ENDIF
		*/
	ENDIF
		
CASE UPPER(CCAMPO) == "FPA_TPGUIM"
	IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
		CTPGUIM := ALLTRIM(M->FPA_TPGUIM)
		IF EMPTY(CTPGUIM)
	       ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIMON"})] := 0   								
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FPA_TPGUID"
	IF VALTYPE(ODLGPLA)=="O" .AND. LRET 		// SE O OBJETO JÁ FOI CRIADO
		CTPGUID := ALLTRIM(M->FPA_TPGUID)
		IF EMPTY(CTPGUID)
	       ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GUIDES"})] := 0   								
		ENDIF
	ENDIF
		
CASE UPPER(CCAMPO)==UPPER("FPA_VRCARG")
	IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		NBASE  := M->FPA_VRCARG
		NPERC  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERSEG"})]
		NVALOR := FCALCSEGG(NBASE,NPERC) 	// CALCULA O SEGURO DAS PLATAFORMAS
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})] := NVALOR
	ENDIF

CASE UPPER(CCAMPO) == "FPA_PERSEG"
	IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		NBASE  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRCARG"})]
		NPERC  := M->FPA_PERSEG
		NVALOR := FCALCSEGG(NBASE,NPERC)	 	// CALCULA O SEGURO DAS PLATAFORMAS
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRSEGU"})] := NVALOR
	ENDIF

CASE UPPER(CCAMPO)==UPPER("FPA_TPISS")
	IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPISS" })] := M->FPA_TPISS
		FCALCPLA()
		NBASE  := NBASEU 						// NBASISSU
		NPERC  := NPERISSU
		NVALOR := LOCA00158(NBASE,NPERC,M->FPA_TPISS) 	// CALCULA O ISS DAS PLATAFORMAS
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })] := NVALOR
	ENDIF

CASE UPPER(CCAMPO)==UPPER("FPA_PERISS")
	IF VALTYPE(ODLGPLA)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PERISS"})] := M->FPA_PERISS
		FCALCPLA()
		NBASE  := NBASEU 						// NBASISSU
		NPERC  := NPERISSU
		NVALOR := LOCA00158(NBASE,NPERC,M->FPA_TPISS) 	// CALCULA O ISS
		ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRISS" })] := NVALOR
	ENDIF

CASE UPPER(CCAMPO) == "FPA_TPBASE" .AND. VALTYPE(ODLGPLA)=="O"
	DDTINI  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
	IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTINI) 			// SE O OBJETO JÁ FOI CRIADO
		CTPBASE := M->FPA_TPBASE
		NPREDIA := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
		DO CASE
		CASE CTPBASE=="D" 						// DIÁRIA
			DDTFIM := DDTINI+NPREDIA-1
		CASE CTPBASE=="S" 						// SEMANAL
			DDTFIM := DDTINI+(NPREDIA * 7)
		CASE CTPBASE=="Q" 						// QUINZENAL
			DDTFIM := DDTINI+(NPREDIA * 15)
		CASE CTPBASE=="M"
			_NANO  := YEAR(DDTINI)
			_NMES  := MONTH(DDTINI) + NPREDIA
			_NDIA  := DAY(DDTINI)
			WHILE _NMES > 12
				_NANO++
				_NMES-=12
			ENDDO
			DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
			WHILE EMPTY(DDTFIM)
				_NDIA  := _NDIA - 1
				DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
			ENDDO
		OTHERWISE
			DDTFIM := DDTINI
		ENDCASE

		CCOD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
		//LOCA00165(CCOD , DDTINI , DDTFIM) 

		IF LRET
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})] := DDTFIM
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FPA_PREDIA" .AND. VALTYPE(ODLGPLA)=="O"
	DDTINI  := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
	IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTINI)	//SE O OBJETO JÁ FOI CRIADO
		CTPBASE := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})]
		NPREDIA := M->FPA_PREDIA
		DO CASE
		CASE CTPBASE=="D" 						// DIÁRIA
			DDTFIM := DDTINI+NPREDIA-1
		CASE CTPBASE=="S" 						// SEMANAL
			DDTFIM := DDTINI+(NPREDIA * 7)
		CASE CTPBASE=="Q" 						// QUINZENAL
			DDTFIM := DDTINI+(NPREDIA * 15)
		CASE CTPBASE=="M"
			_NANO  := YEAR(DDTINI)
			_NMES  := MONTH(DDTINI) + NPREDIA
			_NDIA  := DAY(DDTINI)
			WHILE _NMES > 12
				_NANO++
				_NMES-=12
			ENDDO
			DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
			WHILE EMPTY(DDTFIM)
				_NDIA  := _NDIA - 1
				DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
			ENDDO
		OTHERWISE
			DDTFIM := DDTINI
		ENDCASE

		CCOD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
		//LOCA00165(CCOD , DDTINI , DDTFIM) 

		IF LRET
			ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})] := DDTFIM
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FPA_DTINI" .AND. VALTYPE(ODLGPLA)=="O"
	DDTINI  := M->FPA_DTINI
	IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTINI)	//SE O OBJETO JÁ FOI CRIADO
		IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"}) > 0
			CTPBASE := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})]
		ELSE
			CTPBASE := "D"
		ENDIF

		DO CASE
		CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"}) > 0
			NPREDIA := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})]
		CASE ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"}) > 0
			NPREDIA := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCDIA"})]
		OTHERWISE
			NPREDIA := 0
		ENDCASE

		DO CASE
		CASE CTPBASE=="D" 						// DIÁRIA
			DDTFIM := DDTINI+NPREDIA-1
		CASE CTPBASE=="S" 						// SEMANAL
			DDTFIM := DDTINI+(NPREDIA * 7)
		CASE CTPBASE=="Q" 						// QUINZENAL
			DDTFIM := DDTINI+(NPREDIA * 15)
		CASE CTPBASE=="M"
			_NANO  := YEAR(DDTINI)
			_NMES  := MONTH(DDTINI) + NPREDIA
			_NDIA  := DAY(DDTINI)
			WHILE _NMES > 12
				_NANO++
				_NMES-=12
			ENDDO
			DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
			WHILE EMPTY(DDTFIM)
				_NDIA  := _NDIA - 1
				DDTFIM := CTOD(ALLTRIM(STR(_NDIA))+"/"+ALLTRIM(STR(_NMES))+"/"+ALLTRIM(STR(_NANO)))
			ENDDO
		OTHERWISE
			DDTFIM := DDTINI
		ENDCASE

		CCOD := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
		//LOCA00165(CCOD , DDTINI , DDTFIM) 

		IF LRET
			IF ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"}) > 0
				ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTENRE"})] := DDTFIM
				ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})]  := DDTFIM
			ELSE
				ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTFIM"})] := DDTFIM
			ENDIF
		ENDIF
	ENDIF

CASE UPPER(CCAMPO) == "FPA_DTFIM" .AND. VALTYPE(ODLGPLA)=="O"
	DDTFIM  := M->FPA_DTFIM
	IF VALTYPE(ODLGPLA)=="O" .AND. !EMPTY(DDTFIM)	//SE O OBJETO JÁ FOI CRIADO
		IF DDTFIM < ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_DTINI"})]
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A data de próximo faturamento não pode ser menor que a data inicial."})
			LRET := .F.
		ENDIF 
	ENDIF 
ENDCASE

restarea(aArea)
RETURN LRET


/*/{PROTHEUS.DOC} FCALCISSG
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00158(NBASE , NPERC , CTPISS) 
// ======================================================================= \\
// --> VALIDAÇÕES - CALCULA O ISS DE PLATAFORMAS E GUINDASTES
LOCAL NRETISS := 0

DO CASE
CASE ALLTRIM(CTPISS) $ "X|M| "
	NRETISS := 0
CASE ALLTRIM(CTPISS) == "I"
	NRETISS := ((NBASE * NPERC) /100)
OTHERWISE
	NRETISS := (NBASE / ((100-NPERC)/100)) - NBASE
ENDCASE

RETURN NRETISS


/*/{PROTHEUS.DOC} FCALCSEGG
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCSEGG(NBASE,NPERC) 
// ======================================================================= \\
// --> VALIDAÇÕES - CALCULA O SEGURO DA PLATAFORMA
RETURN(ROUND( (NBASE*NPERC/100) ,2))


/*/{PROTHEUS.DOC} ZAIVALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00159(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET    := .T.
LOCAL CCOD
LOCAL CDESC

DO CASE
CASE UPPER(CCAMPO) == "FPB_CODIGO"
	IF VALTYPE(ODLGDOC)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD  := M->FPB_CODIGO
		CDESC := POSICIONE("FPC" , 1 , XFILIAL("FPC")+CCOD , "FPC_DESCRI") 
		ODLGDOC:ACOLS[ODLGDOC:NAT][ASCAN(ODLGDOC:AHEADER,{|X|ALLTRIM(X[2])=="FPB_DESCRI"})] := CDESC 
	ENDIF
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} ZAMVALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00160(CCAMPO)					// VALIDAÇÕES
// ======================================================================= \\

LOCAL LRET   := .T.
LOCAL CCOD

DO CASE
CASE UPPER(CCAMPO) == "FPD_ORIGEM"
	IF VALTYPE(ODLGTRE)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD:=M->FPD_ORIGEM
		POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_MUNORI"})] := FP2->FP2_DESCRI
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTORI"})] := FP2->FP2_ESTADO
	ENDIF

CASE UPPER(CCAMPO) == "FPD_DESTIN"
	IF VALTYPE(ODLGTRE)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD:=M->FPD_DESTIN
		POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_MUNDES"})] := FP2->FP2_DESCRI
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTDES"})] := FP2->FP2_ESTADO
	ENDIF

CASE UPPER(CCAMPO) == "FPD_DE"
	IF VALTYPE(ODLGTRE)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		CCOD:=M->FPD_DE
		POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_MUNDE"})] := FP2->FP2_DESCRI
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTDE"})] := FP2->FP2_ESTADO
	ENDIF

CASE UPPER(CCAMPO) == "FPD_ATE"
	IF VALTYPE(ODLGTRE)=="O" 					// SE O OBJETO JÁ FOI CRIADO
		CCOD:=M->FPD_ATE
		POSICIONE("FP2" , 1 , XFILIAL("FP2")+CCOD , "FP2_DESCRI") 
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_MUNATE"})] := FP2->FP2_DESCRI
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTATE"})] := FP2->FP2_ESTADO
	ENDIF

CASE UPPER(CCAMPO) == "FPD_DISTAN"
	IF VALTYPE(ODLGTRE)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})] := M->FPD_DISTAN
		FCALCTRE()
		FDISPTRE()
	ENDIF

CASE UPPER(CCAMPO) == "FPD_VAZIO"
	IF VALTYPE(ODLGTRE)=="O"  					// SE O OBJETO JÁ FOI CRIADO
		ODLGTRE:ACOLS[ODLGTRE:NAT][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO"})] := M->FPD_VAZIO
		FCALCTRE()
		FDISPTRE()
	ENDIF

ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} IMPPLAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION IMPPLAN() 
// ======================================================================= \\
// --> CHAMADA: MENU - "PACKING LIST" 

LOCAL AAREA     := GETAREA()
LOCAL AAREAZA7  := ZA7->( GETAREA() )
LOCAL CARQ		:= ""
LOCAL NHDLARQ	:= 0
LOCAL CBUFFER	:= ""
LOCAL NITEM		:= 0
LOCAL ACOLCT1	:= {}
LOCAL AAUXCT1	:= {}
LOCAL APRODS	:= {}
LOCAL CALIAS,CCHAVE,CCONDICAO,NINDICE,CFILTRO
LOCAL NX
LOCAL CPROJET   := PROJETO()

IF OFOLDER:NOPTION != NFOLDERCAR
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Favor selecionar a aba cargas."})
	RETURN .F.
ENDIF

CARQ := CGETFILE("ARQUIVO CSV.  | *.CSV|", OEMTOANSI("SELECÃO DE ARQUIVO"),0,,.T.,GETF_LOCALHARD+GETF_LOCALFLOPPY)

IF EMPTY(CARQ)
	AVISO("INCONSISTENCIA","INFORME UM ARQUIVO A SER IMPORTADO.",{"OK"},,"ATENCAO:")
	RETURN .F.
ENDIF

CALIAS    := "ZA7"
CCHAVE    := XFILIAL(CALIAS)+CPROJET
CCONDICAO := 'ZA7_FILIAL+ZA7_PROJET=="'+CCHAVE+'"'
NINDICE   := 1  								// ZA7_FILIAL+ZA7_PROJET+ZA7_OBRA+ZA7_SEQTRA+ZA7_SEQCAR
CFILTRO   := CCONDICAO
AHEADER1  := FHEADER("ZA7")

NHDLARQ   := FT_FUSE(CARQ)
FT_FGOTOP()
PROCREGUA(FT_FLASTREC())

ACOLCT1 := {}
CAX		:= ""
NITEM	:=0
NAX		:= 0
WHILE !FT_FEOF()
	INCPROC("PROCESSANDO ARQUIVO...")

	CBUFFER := FT_FREADLN()

	APRODS  := STRTOKARR(CBUFFER,";")
 //	APRODS[1] 	// DESCRICAO
 //	APRODS[2] 	// QUANTIDADE
 //	APRODS[3] 	// COMPRIMENTO
 //	APRODS[4] 	// LARGURA
 //	APRODS[5] 	// ALTURA
 //	APRODS[6] 	// PESO
 //	APRODS[7] 	// VALOR DA CARGA
	NITEM++

	AAUXCT1 := {}
	FOR NX := 1 TO LEN(AHEADER1)
		IF     ALLTRIM(AHEADER1[NX,2])=="ZA7_OBRA"
    		AADD(AAUXCT1,COBRA)
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_SEQTRA"
    		AADD(AAUXCT1,CSEQTRA)
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_SEQCAR"
    		AADD(AAUXCT1,STRZERO(NITEM,3))
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_CARGA"
			AADD(AAUXCT1,APRODS[1])
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_QUANT"
			AADD(AAUXCT1,VAL(APRODS[2]))
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_COMP"
			AADD(AAUXCT1,VAL(APRODS[3]))
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_LARG"
			AADD(AAUXCT1,VAL(APRODS[4]))
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_ALTU"
			AADD(AAUXCT1,VAL(APRODS[5]))
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_PESO"
			CAX:=REPLACE(REPLACE(APRODS[6],".",""),",","")
			NAX:=VAL(CAX)/1000
			AADD(AAUXCT1,NAX)
		ELSEIF ALLTRIM(AHEADER1[NX,2])=="ZA7_VRCARG"
			CAX:=REPLACE(REPLACE(APRODS[7],".",""),",","")
			NAX:=VAL(CAX)/100
			AADD(AAUXCT1,NAX)
		ELSE
			AADD(AAUXCT1,CRIAVAR(AHEADER1[NX,2]))
		ENDIF
	NEXT NX

	AADD(AAUXCT1,.F.)
	AADD(ACOLCT1,AAUXCT1)

	FT_FSKIP()
ENDDO

FT_FUSE()

IF VALTYPE(ODLGCAR) == "O"
	ODLGCAR:ACOLS := ACOLCT1
	ODLGCAR:REFRESH()
ENDIF

ZA7->( RESTAREA( AAREAZA7 ) )
RESTAREA( AAREA )

RETURN NIL


/*/{PROTHEUS.DOC} FWHEN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FWHEN(LEDITA)
// ======================================================================= \\

IF VALTYPE(LEDITA) == "L"
	RETURN LEDITA
ENDIF

RETURN (NOPCMANU != 2)


/*/{PROTHEUS.DOC} ZA0APROV
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00161() 
// ======================================================================= \\
// --> CHAMADA: MENU - "EM APROVAÇÃO" 

LOCAL AARAPRV := GETAREA()

/*	// --> P.E. DESCONTINUADO !!! 
IF EXISTBLOCK("LOCC001_") 
	U_LOCC001_("GRV_PROJETO", {FP0->FP0_FILIAL, FP0->FP0_PROJET} )  // TRATATIVA GRAVAÇAO LOG: ZA0, ZA1 E ZAG. 
ENDIF 
*/	// --> P.E. DESCONTINUADO !!! 

IF     FP0->FP0_STATUS == "5" 					// 5=FECHADO 
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não é possível realizar aprovação de projetos com status fechado."})
ELSEIF FP0->FP0_STATUS == "6" 					// 6=CANCELADO 
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não é possível realizar aprovação de projetos com status cancelado."})
ELSE 
	RECLOCK("FP0",.F.) 
	FP0->FP0_STATUS := "2" 
	FP0->FP0_USUAPR	:= "" 
	FP0->(MSUNLOCK()) 
	
	MSGALERT(SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " ENVIADO PARA APROVAÇÃO." , "RENTAL: "+alltrim(upper(procname()))) 
	
	LOCA00164()								// ENVIA EMAIL 
ENDIF 

RESTAREA(AARAPRV)

RETURN NIL


/*/{PROTHEUS.DOC} ZA0CANC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00162() 
// ======================================================================= \\
// --> CHAMADA: MENU - "CANCELAR" 

LOCAL AARAPRV := GETAREA()
LOCAL _LCANC  := .T.

IF FP0->FP0_STATUS == "A"
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não é possível realizar o cancelamento de um contrato revisado."})
	RETURN
ENDIF

IF MSGYESNO("TEM CERTEZA QUE DESEJA CANCELAR O PROJETO ?" , "GPO - LOCC001.PRW") 

	IF EXISTBLOCK("LC001CAN") 					// --> PONTO DE ENTRADA PARA VERIFICAR SE SERÁ PERMITIDO O CANCELAMENTO DO PROJETO.
		_LCANC := EXECBLOCK("LC001CAN",.T.,.T.,NIL)
	ENDIF

	IF _LCANC
		PROCESSA( {|| _LCANC := CANCAS()} , "AGUARDE... VERIFICANDO RESTRIÇÕES...") 

		IF _LCANC
/*	// --> P.E. DESCONTINUADO !!! 
			IF EXISTBLOCK("LOCC001_")
				U_LOCC001_("GRV_PROJETO", {FP0->FP0_FILIAL, FP0->FP0_PROJET} )  // TRATATIVA GRAVAÇAO LOG: ZA0, ZA1 E ZAG 
			ENDIF
*/	// --> P.E. DESCONTINUADO !!! 
			IF RECLOCK("FP0",.F.)
				FP0->FP0_STATUS := "C"
				FP0->(MSUNLOCK())
			ENDIF

			IF EXISTBLOCK("LCPOSCAN") 			// --> PONTO DE ENTRADA APÓS O CANCELAMENTO DO PROJETO.
				EXECBLOCK("LCPOSCAN",.T.,.T.,NIL)
			ENDIF

			BLOQCLASS(FP0->FP0_PROJET)  		// BLOQUEIO DA CLASSE DE VALOR DO PROJETO
			MSGALERT(SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " CANCELADO!" , "RENTAL: "+alltrim(upper(procname()))) 
		ENDIF
	ENDIF

	RESTAREA(AARAPRV)
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} CANCAS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION CANCAS()
// ======================================================================= \\

LOCAL   _AAREAOLD := GETAREA()
LOCAL   _AAREADTQ := FQ5->(GETAREA())
LOCAL   _AAREAZAG := FPA->(GETAREA())
LOCAL   _AAREAZLG := FPO->(GETAREA())
LOCAL   _AAREAST9 := ST9->(GETAREA())
LOCAL   _LRET     := .T.
LOCAL   LVERZBX   := SUPERGETMV("MV_LOCX097",,.F.)
LOCAL   _CQUERY   := ""

IF SELECT("TRBZAG") > 0
	TRBFPA->(DBCLOSEAREA())
ENDIF
_CQUERY := " SELECT FPA_NFREM , FPA_OBRA , FPA_SEQGRU , FPA_AS , ZAG.R_E_C_N_O_ ZAGRECNO , " + CRLF
_CQUERY += "        ISNULL((SELECT COUNT(*)" + CRLF
_CQUERY += " 				FROM " + RETSQLNAME("SC5") + " SC5 "
_CQUERY += "                       INNER JOIN " + RETSQLNAME("SC6") + " SC6 ON C6_FILIAL  =  C5_FILIAL  AND  C6_NUM     = C5_NUM "     + CRLF 
_CQUERY += " 				                                               AND C5_XPROJET <> ''         AND  C5_XPROJET = FPA_PROJET " + CRLF 
_CQUERY += " 				                                               AND SC6.D_E_L_E_T_ = ''" + CRLF
_CQUERY += " 				WHERE  C6_FILIAL =  FPA_FILIAL  AND  C6_XAS = FPA_AS" + CRLF
_CQUERY += " 				  AND  C6_XAS    <> ''          AND  C6_BLQ NOT IN ('R','S')" + CRLF
_CQUERY += " 				  AND  SC6.D_E_L_E_T_ = ''),0) FAT , " + CRLF
_CQUERY += "        ISNULL((SELECT COUNT(*)" + CRLF
_CQUERY += " 				FROM " + RETSQLNAME("FQ5") + " DTQ "   + CRLF
_CQUERY += " 				WHERE  FQ5_SOT   =  FPA_PROJET  AND  FQ5_AS = FPA_AS " + CRLF
_CQUERY += " 				  AND  FQ5_STATUS NOT IN ('1','9')"    + CRLF
_CQUERY += " 				  AND  DTQ.D_E_L_E_T_ = ''),0) NUMAS " + CRLF
_CQUERY += " FROM " + RETSQLNAME("FPA") + " ZAG " + CRLF
_CQUERY += " WHERE  FPA_FILIAL = '" + FP0->FP0_FILIAL + "'" + CRLF
_CQUERY += "   AND  FPA_PROJET = '" + FP0->FP0_PROJET + "'" + CRLF
_CQUERY += "   AND  ZAG.D_E_L_E_T_ = ''" + CRLF
_CQUERY += " ORDER BY FPA_NFREM DESC , FAT DESC , FPA_FILIAL , FPA_PROJET , FPA_OBRA , FPA_SEQGRU " 
_CQUERY := CHANGEQUERY(_CQUERY) 
TCQUERY _CQUERY NEW ALIAS "TRBFPA"

IF TRBFPA->(!EOF()) 
	DO CASE 
	CASE !EMPTY(ALLTRIM(TRBFPA->FPA_NFREM)) 
		_LRET := .F. 
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " " + ALLTRIM(FP0->FP0_PROJET) + " não pode ser cancelado, pois já há nota fiscal de remessa gerada para a obra: " + ALLTRIM(TRBFPA->FPA_OBRA) + " / Seq.: " + ALLTRIM(TRBFPA->FPA_SEQGRU)})

	CASE TRBFPA->FAT   > 0 
		_LRET := .F. 
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " " + ALLTRIM(FP0->FP0_PROJET) + " Não pode ser cancelado, pois já há faturamento gerado para a obra: " + ALLTRIM(TRBFPA->FPA_OBRA) + " / Seq.: " + ALLTRIM(TRBFPA->FPA_SEQGRU)})


	CASE TRBFPA->NUMAS > 0 
		_LRET := .F. 
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " " + ALLTRIM(FP0->FP0_PROJET) + " Não pode ser cancelado, pois já há AS aceita para a obra: " + ALLTRIM(TRBFPA->FPA_OBRA) + " / Seq.: " + ALLTRIM(TRBFPA->FPA_SEQGRU)})

	CASE EMPTY(ALLTRIM(TRBFPA->FPA_NFREM))  .AND.  TRBFPA->FAT == 0  .AND.  TRBFPA->NUMAS == 0 
		DBSELECTAREA("FQ5")
		DBSELECTAREA("FPA")
		WHILE TRBFPA->(!EOF())
			IF !EMPTY(ALLTRIM(TRBFPA->FPA_AS))

				FQ5->(DBSETORDER(8))			// FQ5_FILIAL + FQ5_SOT + FQ5_OBRA + FQ5_AS
				IF FQ5->(DBSEEK(XFILIAL("FQ5") + FP0->FP0_PROJET + TRBFPA->FPA_OBRA + TRBFPA->FPA_AS))

					FPA->(DBSETORDER(1))
					FPA->(DBGOTO(TRBFPA->FPARECNO))

					IF FQ5->(RECLOCK("FQ5",.F.))
						FQ5->FQ5_STATUS := "9"
						FQ5->(MSUNLOCK())
					ENDIF

					IF LVERZBX					// TEM MINUTA? SE TIVER CHAMA ROTINA PARA EXCLUIR PROGRAMACAO E CANCELAR MINUTA
						LOCA00519(FQ5->FQ5_AS) 
					ENDIF

					DBSELECTAREA("FPO")
					FPO->(DBSETORDER(5))
					IF FPO->(DBSEEK(XFILIAL("FPO") + FQ5->FQ5_AS))
						WHILE FPO->(!EOF()) .AND. FPO->FPO_FILIAL == XFILIAL("FPO") .AND. FPO->FPO_NRAS == FQ5->FQ5_AS
							IF RECLOCK("FPO",.F.)
								FPO->(DBDELETE())
								FPO->(MSUNLOCK())
							ENDIF
							FPO->(DBSKIP())
						ENDDO
					ENDIF

					IF RECLOCK("FPA",.F.)
						FPA->FPA_AS     := ""
						FPA->FPA_VIAGEM := ""
						FPA->(MSUNLOCK())
					ENDIF

					DBSELECTAREA("ST9")
					ST9->(DBSETORDER(1))
					IF ST9->(DBSEEK(XFILIAL("ST9") + FQ5->FQ5_GUINDA)) .AND. !EMPTY(ALLTRIM(FQ5->FQ5_GUINDA))
						IF GETADVFVAL("TQY", "TQY_STTCTR",XFILIAL("TQY")+ST9->T9_STATUS,1,"") == "10"
							IF SELECT("TRBTQY") > 0
								TRBTQY->(DBCLOSEAREA())
							ENDIF
							_CQUERY := " SELECT TQY_STATUS" + CRLF
							_CQUERY += " FROM " + RETSQLNAME("TQY") + " TQY" + CRLF
							_CQUERY += " WHERE  TQY_STTCTR = '00'" + CRLF
							_CQUERY += "   AND  TQY.D_E_L_E_T_ = ''" + CRLF
							_CQUERY := CHANGEQUERY(_CQUERY) 
							TCQUERY _CQUERY NEW ALIAS "TRBTQY"

							IF TRBTQY->(!EOF())
								IF EXISTBLOCK("T9STSALT") 		// --> PONTO DE ENTRADA ANTES DA ALTERAÇÃO DE STATUS DO BEM.
									EXECBLOCK("T9STSALT",.T.,.T.,{ST9->T9_STATUS,TRBTQY->TQY_STATUS,FPA->FPA_PROJET,"","",.T.})
								ENDIF
								IF RECLOCK("ST9",.F.)
									ST9->T9_STATUS := TRBTQY->TQY_STATUS
									ST9->(MSUNLOCK())
								ENDIF
							ENDIF

							TRBTQY->(DBCLOSEAREA())
						ENDIF
					ENDIF
				ENDIF

			ENDIF

			TRBFPA->(DBSKIP())
		ENDDO

	ENDCASE
ENDIF

TRBFPA->(DBCLOSEAREA())

RESTAREA( _AAREAST9 )
RESTAREA( _AAREAZLG )
RESTAREA( _AAREAZAG )
RESTAREA( _AAREADTQ )
RESTAREA( _AAREAOLD )

RETURN _LRET


/*/{PROTHEUS.DOC} ZA0REVI2
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00163()	// VERIFICA A REVISÃO DAS PROPOSTAS
// ======================================================================= \\
// --> CHAMADA: MENU - "REVISÃO"

LOCAL _F
LOCAL NPOS
LOCAL LRET       := .F.
LOCAL AHEADER
LOCAL ACOLS
LOCAL ACOLS0
LOCAL ACASADAS   := {}
LOCAL CPROJETNEW
LOCAL CREVISANEW
LOCAL _LFLAG	 := .T.
LOCAL NAREA		 := ALIAS()
LOCAL AAREAZA0   := FP0->(GETAREA())
LOCAL LEXIBE     := .T.
LOCAL LEXIB1     := .T.
LOCAL LEXIB2     := .T.
LOCAL LEXIB3     := .T.
LOCAL LRECOLDT	 := .F.
LOCAL LRECOLDE   := .F.
LOCAL LRECOLDL   := .F.
LOCAL LRECNEWT	 := .F.
LOCAL LRECNEWE   := .F.
LOCAL LRECNEWL   := .F.
LOCAL _AHISTO	 := {}
LOCAL CREVISA	 := FP0->FP0_REVISA
LOCAL CPROJET    := PROJETO(.T.)				// ARMAZENA ZA0 E RETORNA NÚMERO DO PROJETO
LOCAL CTABREC    := ""
LOCAL CTMPALIAS  := ""
LOCAL LTEMAS     := .F.

// VERIFICO AS RECEITAS ATUAIS
IF SELECT("CHK") > 0
	CHK->(DBCLOSEAREA())
ENDIF
CQUERY := " SELECT   FP0_PROJET , FP0_REVISA , FP0_TIPOSE , R_E_C_N_O_ AS REGISTRO "
CQUERY += " FROM " + RETSQLNAME("FP0") 
CQUERY += " WHERE    FP0_FILIAL = '" + FP0->FP0_FILIAL + "'"
CQUERY += "   AND    SUBSTRING(FP0_PROJET,1,9) = '" + SUBSTR(CPROJET,1,9) + "' "
CQUERY += "   AND    FP0_REVISA = '"+ FP0->FP0_REVISA +"' "
CQUERY += "   AND    D_E_L_E_T_ = ' ' "
CQUERY += " ORDER BY FP0_PROJET"
CQUERY := CHANGEQUERY(CQUERY) 
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "CHK" , .T. , .T.) 

WHILE CHK->(!EOF())
	DO CASE
	CASE CHK->FP0_TIPOSE=="T"
		CTABREC  := "ZA7"
		LRECOLDT := .T.
		LRECNEWT := .T.
	CASE CHK->FP0_TIPOSE=="E"
		CTABREC  := "FP4"
		LRECOLDE := .T.
		LRECNEWE := .T.
	CASE CHK->FP0_TIPOSE=="L"
		CTABREC  := "FPA"
		LRECOLDL := .T.
		LRECNEWL := .T.
	ENDCASE
	AADD( _AHISTO, { CHK->FP0_PROJET, CHK->FP0_REVISA, CHK->FP0_TIPOSE, CHK->REGISTRO } )	//GUARDO OS DADOS DO REGISTRO PARA USAR NA REVISÃO
    CHK->(DBSKIP())
ENDDO

IF SELECT("CHK") > 0
	CHK->(DBCLOSEAREA())
ENDIF

// NOVA REGRA PARA VERIFICAÇÃO DA EXISTÊNCIA DE AS
IF EMPTY(CTABREC)

	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não foi possível identificar o tipo de receita do projeto."})


	PROJETO()
	RETURN .F.
ELSE
	CQUERY := " SELECT TOP(1) * " + CRLF
	CQUERY += " FROM " + RETSQLNAME(CTABREC) + " " + CTABREC + " (NOLOCK) " + CRLF
	CQUERY += " WHERE " + CTABREC + "." + CTABREC + "_FILIAL = '" + FP0->FP0_FILIAL + "' " + CRLF
	CQUERY +=   " AND " + CTABREC + "." + CTABREC + "_PROJET = '" + SUBSTR(CPROJET, 1, 9) + "' " + CRLF
	CQUERY +=   " AND " + CTABREC + "." + CTABREC + "_AS <> ' ' " + CRLF
	CQUERY +=   " AND " + CTABREC + ".D_E_L_E_T_ <> '*' " + CRLF
	CQUERY := CHANGEQUERY(CQUERY)
	CTMPALIAS := GETNEXTALIAS() 
	IF SELECT(CTMPALIAS) > 0 
		(CTMPALIAS)->(DBCLOSEAREA()) 
	ENDIF 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , CTMPALIAS , .F. , .T.) 

	LTEMAS := !((CTMPALIAS)->(EOF()))

	IF SELECT(CTMPALIAS) > 0
		(CTMPALIAS)->(DBCLOSEAREA())
	ENDIF

	IF LTEMAS
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não é possível revisar, pois já foi gerado AS para o projeto."})
		PROJETO()
		RETURN .F.
	ENDIF
ENDIF

DBSELECTAREA(NAREA)

IF LRECNEWT .AND. LRECNEWE 
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não é possível revisar projetos casados."})
	RESTAREA(AAREAZA0) 
	RETURN .F. 
ENDIF 

// --> SUPERGETMV("MV_LOCX073" , .F. , "") 		// --> TIPOS DE RECEITA DISPONIVEIS PARA SELECAO (T=TRANSPORTE / E=EQUIPAMENTO / L=LOCACAO). EX: TEL OU TL OU EL OU L. 
CSELECREC := UPPER(ALLTRIM(CSELECREC)) 

IF EMPTY(CSELECREC)								// --> SE PARAMETRO NÃO EXISTIR E/OU ESTIVER VAZIO, HABILITA TODAS AS RECEITAS.

	LEXIBE := .T. 
	LEXIB1 := .T. 								// --> RECEITA TRANSPORTE 
	LEXIB2 := .T. 								// --> RECEITA EQUIPAMENTO 
	LEXIB3 := .T. 								// --> RECEITA LOCACAO

ELSE											// --> CASO NÃO EXISTA OU NÃO ESTEJA HABILITADO, CONSIDERA (EVENTUAL) P.E. 

	IF LEN(CSELECREC) = 1 						// --> SÓ EXITE UMA RECEITA CONFIGURADA NO PARÂMETRO.
		LEXIBE := .F. 							// --> NÃO PRECISO ABRIR A JANELA DE SELEÇÃO.
		IF     CSELECREC = "T"
			LRECNEWT  := .T. 
		ELSEIF CSELECREC = "E"
			LRECNEWE  := .T. 
		ELSEIF CSELECREC = "L"
			LRECNEWL  := .T. 
		ELSE 
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O módulo não está configurado para este tipo de receita."})
			RETURN .F. 
		ENDIF 
	ELSE										// --> EXISTE MAIS QUE UMA RECEITA CONFIGURADA NO PARÂMETRO.
		LEXIBE := .T. 							// --> NÃO PRECISO ABRIR A JANELA DE SELEÇÃO.		
		LEXIB1 := .F. 
		LEXIB2 := .F. 
		LEXIB3 := .F. 

		IF "T" $ CSELECREC 
			LEXIB1    := .T. 					// --> HABILITA CHECK PARA TRANSPORTE
		ENDIF 
		IF "E" $ CSELECREC 
			LEXIB2    := .T. 					// --> HABILITA CHECK PARA EQUIPAMENTO
		ENDIF 
		IF "L" $ CSELECREC 
			LEXIB3    := .T. 					// --> HABILITA CHECK PARA LOCACAO 
		ENDIF 
		IF !(LEXIB1 .OR. LEXIB2 .OR. LEXIB3) 
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O módulo não está configurado para este tipo de receita."})
			RETURN .F. 
		ENDIF 
	ENDIF 

ENDIF 

/*	// --> P.E. DESCONTINUADO !!! 
IF EXISTBLOCK("LOCC001_") 
	XRET := U_LOCC001_( "RECEITAS" , {LEXIBE , LEXIB1 , LEXIB2 , LEXIB3} ) 
	IF TYPE("XRET") == "A"
		LEXIBE := XRET[1]						// EXIBE A JANELA PARA USUÁRIO ESCOLHER.
		LEXIB1 := XRET[2]
		LEXIB2 := XRET[3]
		LEXIB3 := XRET[4]
		IF ! LEXIBE								// NÃO VAI MOSTRAR O DIÁLOGO.
			LRECNEWT := XRET[2]
			LRECNEWE := XRET[3]
			LRECNEWL := XRET[4]
		ENDIF
	ENDIF
ENDIF
*/	// --> P.E. DESCONTINUADO !!! 

IF LEXIBE .and. .F. // inibido por Frank Fuga em 16/02/21
	DEFINE MSDIALOG ODLG TITLE "INCLUSÃO DE " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") FROM C(178),C(181) TO C(402),C(385) PIXEL 
		@ C(010),C(008) TO C(090),C(097) LABEL "SELECIONE A RECEITA"                                          PIXEL OF ODLG
	
		IF LEXIB1 
			@ C(017),C(015) CHECKBOX OCHECKBOX1 VAR LRECNEWT PROMPT "RECEITA TRANSPORTE"   SIZE C(075),C(008) PIXEL OF ODLG 
		ENDIF 
		IF LEXIB2 
			@ C(026),C(015) CHECKBOX OCHECKBOX2 VAR LRECNEWE PROMPT "RECEITA EQUIPAMENTOS" SIZE C(075),C(008) PIXEL OF ODLG 
		ENDIF 
		IF LEXIB3 
			@ C(035),C(015) CHECKBOX OCHECKBOX3 VAR LRECNEWL PROMPT "RECEITA LOCAÇÃO"      SIZE C(075),C(008) PIXEL OF ODLG 
		ENDIF 
	
		@ C(097),C(024) BMPBUTTON TYPE 1 ACTION ( LRET := .T., CLOSE(ODLG) )
		@ C(097),C(054) BMPBUTTON TYPE 2 ACTION ( LRET := .F., CLOSE(ODLG) )
	ACTIVATE MSDIALOG ODLG CENTERED

	IF !LRET
		RESTAREA(AAREAZA0)
		RETURN NIL
	ENDIF
ENDIF
/*
IF LRECNEWT
	AADD(ACASADAS,"T")
ENDIF
IF LRECNEWE
	AADD(ACASADAS,"E")
ENDIF
IF LRECNEWL
	AADD(ACASADAS,"L")
ENDIF
*/
AADD(ACASADAS,"L")

IF LEN(ACASADAS) == 0
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Falta selecionar a receita."})
	RESTAREA(AAREAZA0)
	RETURN .F.
ENDIF

CREVISANEW := SOMA1(CREVISA)	// STRZERO( VAL(CREVISA)+1, LEN(CREVISA) )

IF ! MSGYESNO("CONFIRMA A REVISÃO "+ CREVISANEW +" DO PROJETO "+ ALLTRIM(CPROJET) + " ?" , "GPO - LOCC001.PRW") 
	RESTAREA(AAREAZA0)
	RETURN .F.
ENDIF

BEGIN TRANSACTION

	FOR _F := 1 TO LEN( _AHISTO )
		FP0->( DBGOTO(_AHISTO[_F][4]) )
		RECLOCK("FP0",.F.)
		FP0->FP0_STATUS := "A"					// ALTERO O STATUS DA PROPOSTA ORIGINAL PARA A=REVISADO
		FP0->(MSUNLOCK()) 
	NEXT _F 

	FOR _F := 1 TO LEN( ACASADAS )				// GRAVO A PROPOSTA REVISADA COM SUA DEVIDA RECEITA

		// VERIFICA O NOVO NÚMERO DO PROJETO
		NPOS := AT("/" , FP0->FP0_PROJET) 
		IF NPOS==0
			CPROJETNEW := PADR(ALLTRIM(CPROJET) + IIF( LEN(ACASADAS) >= 2, ACASADAS[_F], "" ) + "/" + CREVISANEW , LEN(FP0->FP0_PROJET))
		ELSE
			CPROJETNEW := PADR(SUBSTR(ALLTRIM(CPROJET),1,AT("/",FP0->FP0_PROJET)-1) + IIF( LEN(ACASADAS) >= 2, ACASADAS[_F], "" ) + "/" + CREVISANEW , LEN(FP0->FP0_PROJET))
		ENDIF

		_NARRAY := ASCAN( _AHISTO, { |X| UPPER(ALLTRIM(X[3])) == ACASADAS[_F]})
		IF 	_NARRAY == 0						// SE A NOVA RECEITA NÃO EXISTIA ANTERIORMENTE
			// MONTA O AHEADER E O ACOLS PARA GERAR AS RECEITAS
			IF EMPTY(AHEADER) .OR. EMPTY(ACOLS0)
				AHEADER := {}
				ACOLS   := {}
				ACOLS0  := {}
				FOR NPOS := 1 TO FP0->(FCOUNT())
					FP0->( AADD(AHEADER, { UPPER(ALLTRIM(FIELDNAME(NPOS))), UPPER(ALLTRIM(FIELDNAME(NPOS))) }) )
					FP0->( AADD(ACOLS0, FIELDGET(NPOS)) )
				NEXT NPOS 
				AADD(ACOLS,ACOLS0)
			ENDIF

			CTIPONEW := ACASADAS[_F]
			FGRAVANOVO(AHEADER,ACOLS,CTIPONEW,CPROJETNEW,CREVISANEW)  //GRAVA O NOVO TIPO DE SERVIÇO
		ELSE									// SE A NOVA RECEITA JÁ  EXISTIA ANTERIORMENTE
			FP0->( DBSETORDER(1) )
			IF FP0->(DBSEEK(XFILIAL("FP0") + CPROJETNEW))
				_LFLAG := .F.
			ELSE
				FP0->( DBGOTO(_AHISTO[_NARRAY][4]) )
				PROCESSA( {|| FZA0REVI(CPROJET,CPROJETNEW,CREVISANEW)},"AGUARDE... ATUALIZANDO A REVISÃO")
			ENDIF
		ENDIF

		IF ! _LFLAG
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe a revisão: " + CREVISANEW + " do projeto " + ALLTRIM(CPROJET)})
			DISARMTRANSACTION()
			RESTAREA(AAREAZA0)
			RETURN .F.
		ENDIF

	NEXT

    IF EXISTBLOCK("LC001REV") 					// --> PONTO DE ENTRADA PARA ALTERAR PROJETOS REVISADOS
		EXECBLOCK("LC001REV",.T.,.T.,{ CPROJET, CPROJETNEW })
    ENDIF 

END TRANSACTION

RESTAREA(AAREAZA0)

RETURN .T. 


/*/{PROTHEUS.DOC} FGRAVANOVO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FGRAVANOVO(AHEADER,ACOLS,CTIPONOVO,CPROJETNOVO,CREVISANOVO) 
// ======================================================================= \\
// --> GRAVA O NOVO TIPO DE SERVIÇO APENAS NO CASO DE REVISÃO 

LOCAL AAREAZA0 := FP0->( AAREAZA0 )

FP0->(DBSETORDER(1))  							// FP0_FILIAL+FP0_PROJET
IF ! FP0->(DBSEEK(XFILIAL("FP0")+CPROJETNOVO))
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe o projeto: "+ALLTRIM(CPROJETNOVO)})
	FP0->( RESTAREA(AAREAZA0) ) 
	RETURN .F.
ENDIF

FP0->(RECLOCK("FP0",.T.))
FGRAVATUDO("FP0",AHEADER,ACOLS[1])  			// GRAVA TODOS OS CAMPOS DO ACOLS
FP0->FP0_PROJET := CPROJETNOVO
FP0->FP0_TIPOSE := CTIPONOVO
FP0->FP0_RECEIT := CTIPONOVO					// QUANDO É CASADA O SISTEMA FICAVA COM A RECEITA DA PRIMEIRA
FP0->FP0_STATUS := "1"
FP0->FP0_REVISA := CREVISANOVO
FP0->(MSUNLOCK())

RESTAREA( AAREAZA0 )

RETURN .T.


/*/{PROTHEUS.DOC} MAILAPRO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00164()						// ENVIA EMAIL APROVAÇÃO
// ======================================================================= \\

LOCAL CCC	   := SPACE(100)
LOCAL CCCO	   := SPACE(100)
LOCAL CMSG	   := "" + CRLF
LOCAL CPARA	   := GETMV("MV_LOCX055")
LOCAL CTITULO  := "SOLICITAÇÃO DE APROVAÇÃO DO PROJETO " + ALLTRIM(FP0->FP0_PROJET)
LOCAL EFROM    := ALLTRIM(USRRETNAME(__CUSERID)) + " <" + ALLTRIM(USRRETMAIL(__CUSERID)) + ">"
LOCAL CTIPO    := FP0->FP0_RECEIT
LOCAL CDESC    := ""

PRIVATE _ODLGMAIL

IF     CTIPO == "L"
	CDESC := "LOCAÇÃO"
ELSEIF CTIPO == "E"
	CDESC := "EQUIPAMENTOS"
ELSEIF CTIPO == "T"
	CDESC := "TRANSPORTE"
ENDIF

CMSG  := "SOLICITAÇÃO DE APROVAÇÃO DO PROJETO: " + ALLTRIM(FP0->FP0_PROJET) + CRLF
CMSG  += "TIPO: "    + ALLTRIM(CDESC) + CRLF
CMSG  += "CLIENTE: " + ALLTRIM(FP0->FP0_CLI)+ " - " +ALLTRIM(FP0->FP0_CLINOM)

LOCA05909(EFROM , CPARA , CCC , CTITULO , CMSG , NIL , CCCO)

RETURN NIL 


/*/{PROTHEUS.DOC} DELAS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION DELAS()							// APAGA AS ASS JÁ GERADAS
// ======================================================================= \\

LOCAL _F
LOCAL _LRET 	:= .F.
LOCAL _CAS  	:= ""
LOCAL _CVIAGEM	:= ""

DO CASE
CASE FP0->FP0_TIPOSE == "T" 					// TRANSPORTE
	_CAS	:= IIF(ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_AS"    }) <> 0,ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_AS"    })],"")
	_CVIAGEM:= IIF(ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_VIAGEM"}) <> 0,ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_VIAGEM"})],"")
	_COBRA	:= IIF(ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_OBRA"  }) <> 0,ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_OBRA"    })],"")

	IF ! (ODLGTRA:ACOLS[ODLGTRA:NAT,LEN(ODLGTRA:AHEADER)+1]) .AND. !EMPTY(_CAS) .AND. !EMPTY(_CVIAGEM) .AND. !EMPTY(_COBRA)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E OS CAMPOS AS, VIAGEM E OBRA ESTÃO PREENCHIDOS
		IF VERORCAR(_CAS, _COBRA, _CVIAGEM)		// VERIFICA SE EXISTEM ORDENS DE CARREGAMENTO
			IF VERCTRC(_CVIAGEM)				// VERIFICA SE EXISTEM CTRC'S
				IF VERCTRB(_CVIAGEM)			// VERIFICA SE EXISTEM CTRB'S
					_LRET := .T.
				ENDIF
			ENDIF
		ENDIF
		IF _LRET								// VERIFICO SE É O ÚLTIMO ÍTEM DA PROPOSTA
			_NITENS := 1
			FOR _F := 1 TO LEN(ODLGTRA:ACOLS)
				IF ODLGTRA:ACOLS[_F,LEN(ODLGTRA:AHEADER)+1] .AND. ODLGTRA:NAT <> _F
					_NITENS++
				ENDIF
			NEXT _F
			EXCLUICT(_CAS, _CVIAGEM, _COBRA)	// EXCLUI LANÇAMENTOS NO CTRC E/OU CTRB
			EXCLUICV(_CAS, _CVIAGEM, _NITENS)	// EXCLUI O CONTRATO E A VIAGEM
			EXCLUIPT(_CAS, _CVIAGEM)			// EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
		ENDIF
		IF _LRET								// SE NÃO FOR POSSÍVEL EXCLUIR O ÍTEM
			ODLGTRA:ACOLS[ODLGTRA:NAT,LEN(ODLGTRA:AHEADER)+1] := .T.
		ENDIF

	ELSEIF !(ODLGTRA:ACOLS[ODLGTRA:NAT,LEN(ODLGTRA:AHEADER)+1]) .AND. (EMPTY(_CAS) .OR. EMPTY(_CVIAGEM) .OR. EMPTY(_COBRA))		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS NÃO ESTÁ PREENCHIDO, PORTANTO NÃO EXISTE A AS
		_LRET := .T.

	ENDIF

CASE FP0->FP0_TIPOSE == "E"						// GUINDASTE - EQUIPAMENTO
	_CAS	:= IIF(ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_AS"    }) <> 0,ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_AS"    })],"")
	_CVIAGEM:= IIF(ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VIAGEM"}) <> 0,ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VIAGEM"})],"")

	IF !(ODLGGUI:ACOLS[ODLGGUI:NAT,LEN(ODLGGUI:AHEADER)+1]) .AND. !EMPTY(_CAS)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS ESTÁ PREENCHIDO
		_LRET := VERMEDICAO(_CAS)				// VERIFICO SE EXISTE MEDIÇÃO PARA ESTA AS
		IF _LRET								// VERIFICO SE É O ÚLTIMO ÍTEM DA PROPOSTA
			_NITENS := 1
			FOR _F := 1 TO LEN(ODLGGUI:ACOLS)
				IF ODLGGUI:ACOLS[_F,LEN(ODLGGUI:AHEADER)+1] .AND. ODLGGUI:NAT <> _F
					_NITENS++
				ENDIF
			NEXT _F
			EXCLUICV(_CAS, _CVIAGEM, _NITENS)	// EXCLUI O CONTRATO E A VIAGEM
			EXCLUIPD(_CAS, _CVIAGEM)			// EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
		ENDIF
		IF _LRET								// SE NÃO FOR POSSÍVEL EXCLUIR O ÍTEM
			ODLGGUI:ACOLS[ODLGGUI:NAT,LEN(ODLGGUI:AHEADER)+1] := .T.
		ENDIF
	ELSEIF !(ODLGGUI:ACOLS[ODLGGUI:NAT,LEN(ODLGGUI:AHEADER)+1]) .AND. EMPTY(_CAS)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS NÃO ESTÁ PREENCHIDO, PORTANTO NÃO EXISTE A AS
		_LRET := .T.
	ENDIF

CASE FP0->FP0_TIPOSE == "L"						// LOCAÇÃO
	_CAS	:= IIF(ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    }) <> 0,ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"    })],"")
	_CVIAGEM:= IIF(ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VIAGEM"}) <> 0,ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VIAGEM"})],"")

	IF !(ODLGPLA:ACOLS[ODLGPLA:NAT,LEN(ODLGPLA:AHEADER)+1]) .AND. !EMPTY(_CAS)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS ESTÁ PREENCHIDO
		_LRET := VERMEDICAO(_CAS)				// VERIFICO SE EXISTE MEDIÇÃO PARA ESTA AS
		IF _LRET								// VERIFICO SE É O ÚLTIMO ÍTEM DA PROPOSTA
			_NITENS := 1
			FOR _F := 1 TO LEN(ODLGPLA:ACOLS)
				IF ODLGPLA:ACOLS[_F,LEN(ODLGPLA:AHEADER)+1] .AND. ODLGPLA:NAT <> _F
					_NITENS++
				ENDIF
			NEXT _F
			EXCLUICV(_CAS, _CVIAGEM, _NITENS)	// EXCLUI O CONTRATO E A VIAGEM
			EXCLUIPD(_CAS, _CVIAGEM)			// EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
		ENDIF
		IF _LRET								// SE NÃO FOR POSSÍVEL EXCLUIR O ÍTEM
			ODLGPLA:ACOLS[ODLGPLA:NAT,LEN(ODLGPLA:AHEADER)+1] := .T.
		ENDIF
	ELSEIF !(ODLGPLA:ACOLS[ODLGPLA:NAT,LEN(ODLGPLA:AHEADER)+1]) .AND. EMPTY(_CAS)		//ESTÁ QUERENDO EXCLUIR O ÍTEM E O CAMPO AS NÃO ESTÁ PREENCHIDO, PORTANTO NÃO EXISTE A AS
		_LRET := .T.
	ENDIF

ENDCASE

RETURN _LRET


/*/{PROTHEUS.DOC} VERMEDICAO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VERMEDICAO(_CAS2) 
// ======================================================================= \\
// --> VERIFICA SE JÁ EXISTE MEDIÇÃO LANÇADA PARA A AS

LOCAL _LRET2 	:= .T.							// NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE MEDIÇÕES PARA ESTA AS

	FPN->(DBSETORDER(2))
	IF FPN->(DBSEEK(XFILIAL("FPN") + _CAS2))	// VERIFICO SE EXISTE MEDIÇÃO PARA ESTA AS
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe medição lançada para a AS: " + _CAS2 + ", exclusão não permitida."})
		_LRET2 := .F.
	ENDIF

RETURN _LRET2


/*/{PROTHEUS.DOC} VERORCAR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VERORCAR(_CAS2, _COBRA2, _CVIAGE2)		//VERIFICA SE JÁ EXISTE ORDENS DE CARREGAMENTO
// ======================================================================= \\

LOCAL _LRET2 	:= .T.	//NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE ORDEM DE CARREGAMENTO PARA ESTA VIAGEM / AS

ZL8->(DBSETORDER(1))
IF ZL8->(DBSEEK(XFILIAL("ZL8") + M->FP0_PROJET + _COBRA2 + _CVIAGE2))		//VERIFICO SE EXISTE ORDEM DE CARREGAMENTO PARA ESTA VIAGEM
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe ordem de carregamento lançada para a viagem: " + _CVIAGEM2 + ", AS " + _CAS2 + ", exclusão não permitida."})
	_LRET2 := .F.
ENDIF

RETURN _LRET2


/*/{PROTHEUS.DOC} VERCTRC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VERCTRC(_CVIAGE2)		//VERIFICA SE JÁ EXISTEM CTRC'S
// ======================================================================= \\

LOCAL _LRET2 	:= .T.		//NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE CTRC GERADO PARA ESTA VIAGEM

FQ5->(DBSETORDER(1))
IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))										//VERIFICO SE EXISTE CTRC PARA ESTA VIAGEM
	IF !EMPTY(FQ5_NUMPV) .OR. !EMPTY(FQ5_NUMCTR) .OR. !EMPTY(FQ5_SERCTR)		//VERIFICA SE JÁ FOI GERADO O CTRC
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe CTRC lançada para a viagem: " + _CVIAGEM2 + ", Exclusão não permitida."})
		_LRET2 := .F.
	ENDIF
ENDIF

RETURN _LRET2


/*/{PROTHEUS.DOC} VERCTRB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VERCTRB(_CVIAGE2)		// VERIFICA SE JÁ EXISTEM CTRB'S
// ======================================================================= \\

LOCAL _LRET2 := .T.						// NÃO PERMITE EXCLUSÃO DO ÍTEM POIS JÁ EXISTE ADIANTAMENTO PARA O CTRB

FQ5->(DBSETORDER(1))
IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))										//VERIFICO SE EXISTE CTRB PARA ESTA VIAGEM
	IF !EMPTY(FQ5_NUMCTC) .OR. !EMPTY(FQ5_NUMSLD)								//VERIFICA SE JÁ FOI GERADO ADIANTAMENTO OU SALDO PARA O CTRB
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe CTRB lançada para a viagem: " + _CVIAGEM2 + ", exclusão não permitida."})
		_LRET2 := .F.
	ENDIF
ENDIF

RETURN _LRET2


/*/{PROTHEUS.DOC} EXCLUICV
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION EXCLUICV(_CAS2, _CVIAGE2, _NITEN2)		// EXCLUI CONTRATO E VIAGEM
// ======================================================================= \\

IF _NITEN2 <= 1											// SE FOR O ÚLTIMO ÍTEM DA PROPOSTA EXCLUO O CONTRATO NA TABELA AAM
	AAM->(DBSETORDER(1))
	IF AAM->(DBSEEK(XFILIAL("AAM") + M->FP0_PROJET))	// BUSCO A AS NA AAM-CONTRATO
		RECLOCK("AAM",.F.)
		AAM->(DBDELETE()) 
		AAM->(MSUNLOCK()) 
	ENDIF
ENDIF													// SENÃO FOR O ÚLTIMO ÍTEM DA PROPOSTA NÃO PODE EXCLUIR O CONTRATO NA TABELA AAM

FQ5->(DBSETORDER(1))
IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))				// BUSCO A AS NA DTQ-VIAGEM
	RECLOCK("FQ5",.F.)
	FQ5->(DBDELETE()) 
	FQ5->(MSUNLOCK()) 
ENDIF

RETURN .T.


/*/{PROTHEUS.DOC} EXCLUICT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION EXCLUICT(_CAS2, _CVIAGE2, _NOBRA2)		//EXCLUI CTRC E/OU CTRB
// ======================================================================= \\

LOCAL CALIASQRY := GETNEXTALIAS()
LOCAL CQUERY

// BUSCO A AS / VIAGEM / OBRA NA DTR-VEICULOS DA VIAGEM
CQUERY := " SELECT DTR.R_E_C_N_O_ AS NREGDTR " 
CQUERY += " FROM " + RETSQLNAME("DTR") 
CQUERY += " WHERE  DTR_VIAGEM = '" + _CVIAGE2 + "'"
CQUERY +=   " AND  DTR_OBRA   = '" + _COBRA2  + "'"
CQUERY +=   " AND  DTR_NRAS   = '" + _CAS2    + "'"
CQUERY +=   " AND  D_E_L_E_T_ = ' ' "
CQUERY := CHANGEQUERY(CQUERY)
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , CALIASQRY , .T. , .T.) 
WHILE ! (CALIASQRY)->( EOF() )
	DTR->( DBGOTO( (CALIASQRY)->NREGDTR) )
	RECLOCK("DTR",.F.)
	DTR->(DBDELETE()) 
	DTR->(MSUNLOCK()) 
	(CALIASQRY)->(DBSKIP())
ENDDO
(CALIASQRY)->(DBCLOSEAREA())

// BUSCO A VIAGEM NA DTC-DOC CLIENTE PARA TRANSPORTE
DTC->(DBORDERNICKNAME("DTCIND09"))
DTC->(DBSEEK(XFILIAL("DTC") + _CVIAGE2))
WHILE DTC->(!EOF()) .AND. DTC->DTC_FILIAL == XFILIAL("DTC") .AND. DTC->DTC_VIAGEM == _CVIAGE2
	RECLOCK("DTC",.F.)
	DTC->(DBDELETE()) 
	DTC->(MSUNLOCK()) 
	DTC->(DBSKIP())
ENDDO

// BUSCO A VIAGEM NA DUP-MOTORISTAS DA VIAGEM
DUP->(DBSETORDER(3))
DUP->(DBSEEK(XFILIAL("DUP") + M->FP0_PROJET + _COBRA2 + _CVIAGE2))
WHILE DUP->(!EOF()) .AND. DUP->DUP_FILIAL == XFILIAL("DUP") .AND. DUP->DUP_SOT == M->FP0_PROJET .AND. DUP->DUP_OBRA == _COBRA2 .AND. DUP->DUP_VIAGEM == _CVIAGE2
	RECLOCK("DUP",.F.)
	DUP->(DBDELETE()) 
	DUP->(MSUNLOCK()) 
	DUP->(DBSKIP())
ENDDO

// BUSCO A AS NA DTQ-VIAGEM
FQ5->(DBSETORDER(1))
IF FQ5->(DBSEEK(XFILIAL("FQ5") + _CVIAGE2))
	RECLOCK("FQ5",.F.)
	FQ5->(DBDELETE()) 
	FQ5->(MSUNLOCK()) 
ENDIF

RETURN .T. 


/*/{PROTHEUS.DOC} EXCLUIPD
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION EXCLUIPD(_CAS2, _CVIAGE2)	//EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
// ======================================================================= \\

FPM->(DBSETORDER(4))
FPM->(DBSEEK(XFILIAL("FPM") + _CAS2 + _CVIAGE2))
WHILE FPM->(!EOF()) .AND. FPM->FPM_FILIAL == XFILIAL("FPM") .AND. FPM->FPM_AS == _CAS2 .AND. FPM->FPM_VIAGEM == _CVIAGE2
	RECLOCK("FPM",.F.)
	FPM->(DBDELETE()) 
	FPM->(MSUNLOCK()) 
	FPM->(DBSKIP())
ENDDO

RETURN .T.


/*/{PROTHEUS.DOC} EXCLUIPT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION EXCLUIPT(_CAS2 , _CVIAGE2) 
// ======================================================================= \\
// --> EXCLUO A PROGRAMAÇÃO DIÁRIA GERADA AUTOMÁTICAMENTE PELA GERAÇÃO DE CONTRATO (GRCONTR)
FPO->(DBSETORDER(3))
FPO->(DBSEEK(XFILIAL("FPO") + _CAS2 + _CVIAGE2))
WHILE FPO->(!EOF()) .AND. FPO->FPO_FILIAL == XFILIAL("FPO") .AND.  FPO->FPO_NRAS == _CAS2 .AND. FPO->FPO_VIAGEM == _CVIAGE2
	RECLOCK("FPO",.F.)
	FPO->(DBDELETE()) 
	FPO->(MSUNLOCK()) 
	FPO->(DBSKIP())
ENDDO

RETURN .T.


/*/{PROTHEUS.DOC} CONDISPF
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00165(_CCOD , _DINI , _DFIM , _CPROJET) 
// ======================================================================= \\
// --> CONSULTA A DISPONIBILIDADE DE FROTA
LOCAL _LRET		 := .T.
/*
LOCAL _CSERV	 := POSICIONE("ST9" , 1 , XFILIAL("ST9")+_CCOD , "T9_TIPOSE") 
LOCAL _CALIASANT := ALIAS()

DEFAULT _CPROJET := ""

IF !EMPTY(_DINI) .AND. !EMPTY(_DFIM)
	IF _CSERV $ "E"			//EQUIPAMENTOS - TABELA ZLG (GUINDASTE, GRUAS, PLATAFORMA, REMOÇÃO)
		CQUERY     := "SELECT ZLG.FPO_NRAS   AS _XNRAS   , ZLG.FPO_PROJET AS _XPROJ  , ZLG.FPO_OBRA   AS _XOBRA  , ZLG.FPO_VIAGEM AS _XVIAGEM , "
		CQUERY     += "		  ZLG.FPO_CODCLI AS _XCODCLI , ZLG.FPO_LOJA   AS _XLOJA  , ZLG.FPO_NOMCLI AS _XRAZAO , ZLG.FPO_STATUS AS _XSTATUS , "
		CQUERY     += "		  ZLG.FPO_DTINI  AS _XDTINI  , ZLG.FPO_DTFIM  AS _XDTFIM "
		CQUERY     += "FROM " + RETSQLNAME("FPO") + " ZLG "
		CQUERY     += "WHERE  ZLG.FPO_FROTA    = '" + _CCOD + "' AND "
		CQUERY     += 	   "((ZLG.FPO_DTINI <= "  + DTOS(_DINI) + " AND ZLG.FPO_DTINI <= " + DTOS(_DFIM)  + " AND ZLG.FPO_DTFIM >= "  + DTOS(_DINI) + "  AND ZLG.FPO_DTFIM >= " + DTOS(_DFIM) + ") OR "	// PERÍODO TOTALMENTE DENTRO DO LANÇAMENTO
		CQUERY     +=      " (ZLG.FPO_DTINI >= "  + DTOS(_DINI) + " AND ZLG.FPO_DTINI <= " + DTOS(_DFIM)  + " AND ZLG.FPO_DTFIM >= "  + DTOS(_DINI) + "  AND ZLG.FPO_DTFIM <= " + DTOS(_DFIM) + ") OR "	// PERÍODO TOTALMENTE FORA DO LANÇAMENTO
		CQUERY     +=      " (ZLG.FPO_DTINI <= "  + DTOS(_DINI) + " AND ZLG.FPO_DTINI <= " + DTOS(_DFIM)  + " AND ZLG.FPO_DTFIM >= "  + DTOS(_DINI) + "  AND ZLG.FPO_DTFIM <= " + DTOS(_DFIM) + ") OR "	// LANÇAMENTO TERMINA NO PERÍODO
		CQUERY     +=      " (ZLG.FPO_DTINI >= "  + DTOS(_DINI) + " AND ZLG.FPO_DTINI <= " + DTOS(_DFIM)  + " AND ZLG.FPO_DTFIM >= "  + DTOS(_DINI) + "  AND ZLG.FPO_DTFIM >= " + DTOS(_DFIM) + ")) AND "	// LANÇAMENTO INICIA NO PERÍODO
		CQUERY     += 	   "  ZLG.FPO_CODBEM  = '' AND "
		IF !EMPTY(_CPROJET)
			_CPROJET := SUBSTR(_CPROJET,1,AT("/",_CPROJET)-1)
			CQUERY +=      "  ZLG.FPO_PROJET NOT LIKE '%" + _CPROJET + "%' AND "
			CQUERY +=      "  ZLG.FPO_STATUS NOT IN ('R','1','9','C',' ')  AND "
		ENDIF
		CQUERY     +=      "  ZLG.D_E_L_E_T_  = ' ' "
		CQUERY     += "ORDER BY FPO_DTINI "
	ELSE 							//TRANSPORTES - TABELA ZLE (TRANSPORTES)
		CQUERY     := "SELECT ZLE.FPM_AS     AS _XNRAS  , ZLE.FPM_PROJET AS _XPROJ  , ZLE.FPM_OBRA   AS _XOBRA   , ZLE.FPM_VIAGEM AS _XVIAGEM , "
		CQUERY     += "		  ZLE.FPM_DTPROG AS _XDTINI , ZLE.FPM_DTPROG AS _XDTFIM , ZLE.FPM_STATUS AS _XSTATUS "
		CQUERY     += "FROM " + RETSQLNAME("FPM") + " ZLE "
		CQUERY     += "WHERE  ZLE.FPM_FROTA = '" + _CCOD +"' AND "
		CQUERY     += 		" ZLE.FPM_DTPROG  BETWEEN '" + DTOS(_DINI) + "' AND '" + DTOS(_DFIM) + "' AND "
		IF !EMPTY(_CPROJET)
			_CPROJET := SUBSTR(_CPROJET,1,AT("/",_CPROJET)-1)
			CQUERY +=       " ZLE.FPM_PROJET NOT LIKE '%" + _CPROJET + "%' AND " 
			CQUERY +=       " ZLE.FPM_STATUS <> '0'                        AND " 
		ENDIF
		CQUERY     +=       " ZLE.D_E_L_E_T_ = ' ' "
		CQUERY     += "ORDER BY FPM_DTPROG "
	ENDIF
	CQUERY    := CHANGEQUERY( CQUERY )
	CALIASQRY := GETNEXTALIAS()
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , CALIASQRY , .T. , .T.) 

	WHILE (CALIASQRY)->(!EOF()) .AND. _LRET
		IF (_XPROJ == _CPROJET .AND.   _CSERV $ "G|U|P|R"  .AND. _XSTATUS == "R") .OR. ;
		   (_XPROJ == _CPROJET .AND. !(_CSERV $ "G|U|P|R") .AND. _XSTATUS == "0")
		//	MSGALERT("FROTA SELECIONADA (" + ALLTRIM(_CCOD) + "), ESTÁ RESERVADA NO PERÍODO INFORMADO." , "GPO - LOCC001.PRW") 
		ELSE
			MSGALERT("FROTA SELECIONADA (" + ALLTRIM(_CCOD) + "), ESTÁ PROGRAMADA NO PERÍODO INFORMADO."+ CRLF +;
					 "PROGRAMAÇÃO ENCONTRADA"															+ CRLF +;
					 "> NÚMERO DA AS " 		+ _XNRAS	+ "."											+ CRLF +;
					 "> NÚMERO DO PROJETO " + _XPROJ	+ "."											+ CRLF +;
					 "> NÚMERO DA OBRA "	+ _XOBRA 	+ "."											+ CRLF +;
					 "> NÚMERO DA VIAGEM " 	+ _XVIAGEM	+ "."											+ CRLF +;
					 "> PERÍODO PROGRAMADO DE " + DTOC(STOD(_XDTINI)) + " A " + DTOC(STOD(_XDTFIM))		+ ".")
			_LRET := .F.
		ENDIF
		(CALIASQRY)->(DBSKIP())
	ENDDO

	(CALIASQRY)->(DBCLOSEAREA())
	DBSELECTAREA(_CALIASANT)
ENDIF
*/
RETURN _LRET


/*/{PROTHEUS.DOC} TURVAL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION TURVAL(OPC , ORET) 
// ======================================================================= \\
// --> CHAMADA: MENU - "TURNOS E VALORES"   ( MANUTENÇÃO DE TURNOS ) 

LOCAL   NI
LOCAL   NUSADO    := 0
LOCAL   OSBUTTON1
LOCAL   NSTYLE    := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL   AHEADER   := {}
LOCAL   ACOLS     := {}
LOCAL   CALIAS    := "FPE"
LOCAL   CPROJET   := PROJETO()
LOCAL	NPOSOBRA  := 0
LOCAL	NPOSSEQ   := 0
LOCAL	NPOSEQUI  := 0
LOCAL	NLINSUP   := 0
LOCAL	CMSGAUX   := ""
LOCAL   ACPOALTER := {}

PRIVATE CTGET2    := STR(FP4->FP4_PREDIA)
PRIVATE LREFRESH  := .T.

IF OPC == 2
	ACPOALTER := {}
	NSTYLE    := 0
ELSE
	ACPOALTER := { "FPE_HRINIT", "FPE_HOFIMT", "FPE_MINDIT", "FPE_DIASEM", "FPE_PORCEN", "FPE_VALTUR", "FPE_TIPOSE" }
	IF EXISTBLOCK("LCTURCPO") 				// --> PONTO DE ENTRADA PARA ALTERAR OS CAMPOS QUE PODEM SER ALTERADOS
		ACPOALTER := EXECBLOCK("LCTURCPO",.T.,.T.,{ ACPOALTER } )
	ENDIF
	IF EXISTBLOCK("LCTURALT") 				// --> PONTO DE ENTRADA PARA O NSTYLE
		NSTYLE := EXECBLOCK("LCTURALT",.T.,.T.,{ } )
	ENDIF       
ENDIF

IF OPC == 10
	NVALTUR1 := 0
	NVALTUR2 := 0
	NVALTUR3 := 0

	OVALTUR1:REFRESH()
	OVALTUR2:REFRESH()
	OVALTUR3:REFRESH()

	RETURN NIL
ENDIF

// BLOQUEIO DE EDIÇÃO DE TURNO DE UM SUB-ITEM
IF FP0->FP0_TIPOSE == "E" // GUINDASTE - EQUIPAMENTO
	NPOSOBRA	:= ASCAN(ORET:AHEADER, {|X|ALLTRIM(X[2])=="FP4_OBRA"})
	NPOSSEQ		:= ASCAN(ORET:AHEADER, {|X|ALLTRIM(X[2])=="FP4_SEQGUI"})
	NPOSEQUI	:= ASCAN(ORET:AHEADER, {|X|ALLTRIM(X[2])=="FP4_XSEQEQ"})

	IF ((NPOSOBRA > 0) .AND. (NPOSOBRA <= LEN(ORET:ACOLS[ORET:NAT]))) .AND. ; 
	   ((NPOSSEQ  > 0) .AND. (NPOSSEQ  <= LEN(ORET:ACOLS[ORET:NAT]))) .AND. ; 
	   ((NPOSEQUI > 0) .AND. (NPOSEQUI <= LEN(ORET:ACOLS[ORET:NAT])))
		IF !(EMPTY(ORET:ACOLS[ORET:NAT, NPOSEQUI]))
			NLINSUP := ASCAN(ORET:ACOLS, {|X| (X[NPOSOBRA] == ORET:ACOLS[ORET:NAT, NPOSOBRA]) .AND. (X[NPOSSEQ] == ORET:ACOLS[ORET:NAT, NPOSEQUI])})

			CMSGAUX := "PARA EDITAR ESSE TURNO POSICIONE O CURSOR NA ABA LOCAÇÃO "
			IF (NLINSUP > 0) .AND. (NLINSUP < LEN(ORET:ACOLS))
				CMSGAUX += "E NA LINHA DA OBRA " + ALLTRIM(ORET:ACOLS[NLINSUP, NPOSOBRA]) + " E SEQ. GUIND. " + ALLTRIM(ORET:ACOLS[NLINSUP, NPOSSEQ])
			ELSE
				CMSGAUX += "E NA LINHA DO ITEM SUPERIOR DO GRUPO."
			ENDIF

			MSGALERT(CMSGAUX , "RENTAL: "+alltrim(upper(Procname()))) 

			RETURN
		ENDIF
	ENDIF
ENDIF

AHEADER := FHEADER("FPE")
NUSADO  := LEN(AHEADER)

IF FP0->FP0_TIPOSE # "E#G"	// GUINDASTE - EQUIPAMENTO
	NFROTA  := ORET:ACOLS[ORET:NAT][ASCAN(ORET:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUINDA"})] // ODLGGUI:NAT
	CCHAVE  := 'DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+CSEQGUI)'
	CCHAVE2 := 'XFILIAL(CALIAS)+CPROJET+COBRA+CSEQGUI'
	CCHAVE3 := 'FPE_FILIAL+FPE_PROJET+FPE_OBRA+FPE_SEQGUI'
ELSE
	NFROTA  := ORET:ACOLS[ORET:NAT][ASCAN(ORET:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})] // ODLGGUI:NAT
	CCHAVE  := 'DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+NFROTA)'
	CCHAVE2 := 'XFILIAL(CALIAS)+CPROJET+COBRA+NFROTA'
	CCHAVE3 := 'FPE_FILIAL+FPE_PROJET+FPE_OBRA+FPE_FROTA'
ENDIF

IF ORET:NAT > LEN(ACOLSTURNO)
	WHILE LEN(ORET:ACOLS) > LEN(ACOLSTURNO)
		AADD(ACOLSTURNO  , {}) 
		AADD(OTURNO_COLS , {}) 
	ENDDO 
ENDIF 

DBSELECTAREA(CALIAS)
FPE->(DBSETORDER(2))

IF &(CCHAVE) .AND. EMPTY(ACOLSTURNO[ORET:NAT])
	WHILE &(CCHAVE3)==&(CCHAVE2)
		AADD(ACOLS , {FPE_PROJET , FPE_OBRA , FPE_FROTA , FPE_SEQGUI , FPE_TURNO , FPE_MINDIT , FPE_DIASEM , FPE_HRINIT , FPE_HOFIMT , FPE_VALTUR , FPE_VROPER , FPE_PORCEN , FPE_TIPOSE , .F.}) 
		FPE->(DBSKIP())
	ENDDO 
ELSE
	IF !&(CCHAVE) .AND. EMPTY(ACOLSTURNO[ORET:NAT])
	    IF EMPTY(ACOLS)
			AADD(ACOLS,ARRAY(NUSADO+1))
			FOR NI := 1 TO NUSADO
			    ACOLS[1][NI] := CRIAVAR(AHEADER[NI][2])
			NEXT NI 
			ACOLS[1][1]        := CPROJET 	// PROJETO
			ACOLS[1][2]        := COBRA   	// OBRA
			ACOLS[1][3] 	   := NFROTA
			ACOLS[1][4]        := CSEQGUI 	// SEQGUI
			ACOLS[1][5]        := "001"   	// TURNO
			ACOLS[1][NUSADO+1] := .F.
		ENDIF
	ELSE
		ACOLS := ACLONE(ACOLSTURNO[ORET:NAT])
	ENDIF
ENDIF

IF EXISTBLOCK("LCTURINI")					// --> PONTO DE ENTRADA APOS O PREENCHIMENTO DOS TURNOS.
	ACOLS := EXECBLOCK("LCTURINI",.T.,.T.,{ ACOLS, ODLGGUI })
ENDIF

REGTOMEMORY("FPE" , IIF(EMPTY(ACOLS) , .T. , .F.)) 

ODLGVT := MSDIALOG():NEW(000,000,300,660,"MANUTENÇÃO DE TURNOS",,,,,,,,,.T.)
OGETVT := MSNEWGETDADOS():NEW(05   ,05   ,145    ,295   ,NSTYLE, "LOCA00186()","LOCA00187()","+FPE_TURNO" , ACPOALTER ,  , 7 , /*"FIELDOK"*/ , /*"SPRDEL"*/ , /*"DELOK"*/ , ODLGVT  ,AHEADER,ACOLS)

OSBUTTON1 := SBUTTON():NEW(135,300,1,{||ODLGVT:END(), TIRDEL(ORET), RETGETD() },ODLGVT,.T.,,)
OGETVT:BCHANGE := { || TURVAL1()}

ODLGVT:ACTIVATE(,,,.T.,,,)

RETURN NIL 


/*/{PROTHEUS.DOC} TURVAL1
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION TURVAL1()		// FUNÇÃO AUXILIAR DO BOTÃO TURNOS.
// ======================================================================= \\
// ESSA FUNÇÃO CARREGA OS DADOS DE PROJETO E OBRA DA PRIMEIRA LINHA PARA AS DEMAIS.

LOCAL _CPROJET := ""
LOCAL COBRA    := ""
LOCAL CSEQGUI  := ""

IF LEN(OGETVT:ACOLS) > 1
      _CPROJET := GDFIELDGET("FPE_PROJET",LEN(OGETVT:ACOLS)-1)
      COBRA    := GDFIELDGET("FPE_OBRA"  ,LEN(OGETVT:ACOLS)-1)
      NFROTA   := GDFIELDGET("FPE_FROTA" ,LEN(OGETVT:ACOLS)-1)
      CSEQGUI  := GDFIELDGET("FPE_SEQGUI",LEN(OGETVT:ACOLS)-1)

      GDFIELDPUT("FPE_PROJET", _CPROJET ,OGETVT:NAT)
      GDFIELDPUT("FPE_OBRA"  , COBRA    ,OGETVT:NAT)
      GDFIELDPUT("FPE_FROTA" , NFROTA   ,OGETVT:NAT)
      GDFIELDPUT("FPE_SEQGUI", CSEQGUI  ,OGETVT:NAT)

      OGETVT:REFRESH()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} TIRDEL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION TIRDEL(ORET)
// ======================================================================= \\

LOCAL ACOLS := {}
LOCAL NI
LOCAL AIT	:= {}
LOCAL LTUR	:= .F.
LOCAL NALT	:= 0
LOCAL NX    := 0 
LOCAL NY    := 0 

FOR NI := 1 TO LEN(OGETVT:ACOLS)
	IF !OGETVT:ACOLS[NI,LEN(OGETVT:ACOLS[NI])]
		AADD(ACOLS,OGETVT:ACOLS[NI])
	ELSEIF (DBSEEK(XFILIAL("FPE")+OGETVT:ACOLS[NI][1]+OGETVT:ACOLS[NI][2]+OGETVT:ACOLS[NI][4]))
		RECLOCK("FPE",.F.)
		FPE->(DBDELETE()) 
		FPE->(MSUNLOCK())
	ENDIF
NEXT NI 

OGETVT:ACOLS         := ACLONE(ACOLS)
ACOLSTURNO[ORET:NAT] := ACLONE(OGETVT:ACOLS)

FOR NX := 1 TO LEN(OTURNO_COLS)
	IF ! LTUR
		AIT := OTURNO_COLS[NX]
		FOR NY := 1 TO LEN(AIT)
			IF COBRA == AIT[NY, GDFIELDPOS("FPE_OBRA",OGETVT:AHEADER)] .AND. CSEQGUI ==AIT[NY, GDFIELDPOS("FPE_SEQGUI",OGETVT:AHEADER)]
				LTUR := .T.
				NALT := NX
				EXIT
			ENDIF
		NEXT NY
	ENDIF
NEXT NX

IF ! LTUR
	AADD(OTURNO_COLS, ACOLSTURNO[ORET:NAT])
ELSE
	OTURNO_COLS[NALT] := ACOLSTURNO[ORET:NAT]
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} RETGETD
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION RETGETD() 
// ======================================================================= \\

LOCAL N
LOCAL NVAL1 	:= 0
LOCAL NMIN  	:= 0

FOR N := 1 TO LEN(OGETVT:ACOLS)
	IF ! OGETVT:ACOLS[N,LEN(OGETVT:ACOLS[N])]
		NVAL1 += IIF( VALTYPE(OGETVT)=="O" .AND. LEN(OGETVT:ACOLS) >= 1 , (GDFIELDGET ( "FPE_VALTUR", N, .F., OGETVT:AHEADER, OGETVT:ACOLS )),0)
		NMIN  += IIF( VALTYPE(OGETVT)=="O" .AND. LEN(OGETVT:ACOLS) >= 1 , VAL((GDFIELDGET ( "FPE_MINDIT", N, .F., OGETVT:AHEADER, OGETVT:ACOLS ))),0)
	ENDIF
NEXT N 

IF EXISTBLOCK("LCTURFIM")					// --> PONTO DE ENTRADA APOS O PREENCHIMENTO DOS TURNOS.
	EXECBLOCK("LCTURFIM",.T.,.T.,{})
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FSALVARTUR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FSALVARTUR(CALIAS,AHEADER,ACOLS)		//FUNÇÃO AUXILIAR DO BOTÃO TURNOS.
// ======================================================================= \\
// ESSA FUNÇÃO PEGA OS DADOS DO ACOLS E ARMAZENA NA TABELA ZBB.
LOCAL NX
LOCAL NPOS
LOCAL COBRA
LOCAL NFROTA
LOCAL CSEQGUI
LOCAL CTURNO
LOCAL CMINDIT
LOCAL CDIASEM
LOCAL CHRINI
LOCAL CHRFIM
LOCAL NPORCENT
LOCAL NVALTUR
LOCAL CTIPOSE
LOCAL AGRAVADOS := {}  //GRAVADOS
LOCAL CPROJET   := PROJETO()

DBSELECTAREA(CALIAS)
DBSETORDER(1)

FOR NX := 1 TO LEN(OTURNO_COLS)
	AITENS := OTURNO_COLS[NX]
	FOR NPOS := 1 TO LEN(AITENS)
	    COBRA    := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_OBRA"  })]
	    NFROTA   := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_FROTA" })]
	    CSEQGUI  := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_SEQGUI"})]
	    CTURNO   := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_TURNO" })]
	    CMINDIT  := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_MINDIT"})]
	    CDIASEM  := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_DIASEM"})]
	    CHRINI   := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_HRINIT"})]
	    CHRFIM   := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_HOFIMT"})]
	    NPORCENT := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_PORCEN"})]
	    NVALTUR  := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_VALTUR"})]
	    CTIPOSE  := AITENS[NPOS][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_TIPOSE"})]

	   	IF ! AITENS[NPOS,LEN(AHEADER)+1] .AND. !EMPTY(CPROJET) .AND. !EMPTY(COBRA) .AND. !EMPTY(CTURNO)  .AND. !EMPTY(CSEQGUI) //!DELETED()
			IF ! DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+NFROTA+CSEQGUI+CTURNO)
	           RECLOCK(CALIAS,.T.)
	        ELSE
	           RECLOCK(CALIAS,.F.)
	        ENDIF
	        FGRAVATUDO(CALIAS,AHEADER,AITENS[NPOS]) 	// GRAVA TODOS OS CAMPOS DO AITENS
	        (CALIAS)->FPE_FILIAL := XFILIAL(CALIAS)
	        (CALIAS)->FPE_PROJET := CPROJET
	        (CALIAS)->FPE_OBRA   := COBRA
	        (CALIAS)->FPE_FROTA  := NFROTA
			(CALIAS)->FPE_SEQGUI := CSEQGUI
	        (CALIAS)->FPE_TURNO  := CTURNO
	        (CALIAS)->FPE_MINDIT := CMINDIT
	        (CALIAS)->FPE_DIASEM := CDIASEM
	        (CALIAS)->FPE_HRINIT := CHRINI
	        (CALIAS)->FPE_HOFIMT := CHRFIM
			(CALIAS)->FPE_PORCEN := NPORCENT
	        (CALIAS)->FPE_VALTUR := NVALTUR
	        (CALIAS)->FPE_TIPOSE := CTIPOSE

	        AADD(AGRAVADOS,RECNO())  					// GRAVADOS
	        (CALIAS)->(MSUNLOCK())
	    ELSE
			DBSEEK(XFILIAL(CALIAS)+CPROJET+COBRA+NFROTA+CSEQGUI+CTURNO)
			WHILE !EOF() .AND. FPE_FILIAL+FPE_PROJET+FPE_OBRA+FPE_FROTA+FPE_TURNO+FPE_SEQGUI == XFILIAL(CALIAS)+CPROJET+COBRA+NFROTA+CTURNO+CSEQGUI 
				IF ASCAN(AGRAVADOS,{|X|X==RECNO()})==0
					RECLOCK(CALIAS,.F.)
					(CALIAS)->(DBDELETE())
					(CALIAS)->(MSUNLOCK())
				ENDIF
				DBSKIP()
			ENDDO
		ENDIF
	NEXT NPOS 
NEXT NX

RETURN NIL


/*/{PROTHEUS.DOC} LC001POS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00166()
// ======================================================================= \\
// --> USUÁRIO ATRIBUI O PERCENTUAL DE POSSIBILIDADE DA PROPOSTA A SER CONCRETIZADA. USO NO RELATÓRIO GERENCIAL
// --> CHAMADA: MENU - "% POSSIBILIDADE" 

LOCAL ODLG
LOCAL OPAN1
LOCAL OGRP
LOCAL OGET
LOCAL OBTNOK
LOCAL OBTNCANC
LOCAL LGRV    := .F.
LOCAL OFONT   := TFONT():NEW("ARIAL",12,16,,.T.,,,,.T.,.F.)
LOCAL NPOSSIB := 0

IF FP0->(EOF()) .OR. FP0->(BOF())
	RETURN .F.
ELSE
	NPOSSIB := VAL("0"+FP0->FP0_POSSIB)
ENDIF

DEFINE MSDIALOG ODLG FROM 00,00 TO 130,172 PIXEL TITLE "POSSIBILIDADE"
	OPAN1 := TPANEL():NEW(02,02,"",ODLG,,,,,,85,38,.F.,.F.)
	OGRP  := TGROUP():NEW(0,0,OPAN1:NHEIGHT/2-2,OPAN1:NWIDTH/2,"POSSIBILIDADE DE VENDA:",OPAN1,,,.T.)
	@ 10,25 MSGET OGET VAR NPOSSIB PICTURE "999" VALID NPOSSIB >= 0 .AND. NPOSSIB <= 100 FONT OFONT OF OPAN1 PIXEL
	@ 14,70 SAY "%" SIZE 20,20 FONT OFONT OF OPAN1 PIXEL 
	OBTNOK   := TBUTTON():NEW(45,10,"Gravar",ODLG,{||LGRV:=.T.,ODLG:END()},35,12,,,,.T.)
	OBTNCANC := TBUTTON():NEW(45,52,"Fechar",ODLG,{||ODLG:END()},35,12,,,,.T.)
ACTIVATE MSDIALOG ODLG CENTERED

IF LGRV
	FP0->(RECLOCK("FP0",.F.))
	FP0->FP0_POSSIB := ALLTRIM(STR(NPOSSIB))
	FP0->(MSUNLOCK())
ENDIF

RETURN LGRV


/*/{PROTHEUS.DOC} BOBKJ
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION BOBKJ()
// ======================================================================= \\

LOCAL ORET

DO CASE
CASE VALTYPE(ODLGGUI) == "O" 
	ORET := ODLGGUI
CASE VALTYPE(ODLGTRA) == "O" 
	ORET := ODLGTRA
CASE VALTYPE(ODLGPLA) == "O" 
	ORET := ODLGPLA
ENDCASE

RETURN ORET


/*/{PROTHEUS.DOC} XCALCHORAS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00167() 
// ======================================================================= \\
// --> CHAMADA NOS CAMPOS: FP4_MINDIA, FP4_PREDIA, FPA_MINDIA E FPA_PREDIA

LOCAL _NRET := 0

IF     FP0->FP0_TIPOSE == "E"	// GUINDASTE - EQUIPAMENTO
	IF     ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})] $ "H|F"
		_NRET := ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]//(M->FP4_PREDIA)
	ELSEIF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})] = "D"
		_NRET := (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]/*M->FP4_PREDIA * M->FP4_MINDIA*/)
	ELSEIF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})] = "M"
		_NRET := (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINMES"})]/*M->FP4_PREDIA * M->FP4_MINMES*/ )
	ENDIF

ELSEIF FP0->FP0_TIPOSE == "L"	// LOCAÇÃO
	IF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})] = "M" //MENSAL
		_NRET:= (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})]/*M->FPA_PREDIA * M->FPA_MINDIA*/)* 4 //QUATRO CORRESPONDE A 4 SEMANASX
	ELSEIF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})] = "Q" //QUINZENAL
		_NRET:= (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})]) * 2 //DOIS CORRESPONDE A 15 DIAS
	ELSEIF ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_TPBASE"})] = "D" //DIARIA
		_NRET:=  ((ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})]/5) * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})])//((M->FPA_MINDIA/ 5)* M->FPA_PREDIA) //
	ELSE  //SEMANAL
		_NRET:= (ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_PREDIA"})] * ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPA_MINDIA"})])//(M->FPA_PREDIA * M->FPA_MINDIA)
	ENDIF

ENDIF

RETURN _NRET


/*/{PROTHEUS.DOC} FVALRESP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00168()
// ======================================================================= \\
// FUNCAO PARA VALIDAR EDICAO DO CAMPO FP6_VALOR E FP6_VALCOB 

LOCAL LRET      := .T. 
LOCAL CCAMPO    := "FP6_RESPON" 
LOCAL CCAMPOGET := ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] 

IF CCAMPOGET == "C"

	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O campo [VALOR] só poderá ser editado se o campo [RESPONSÁVEL] for diferente de 'C=CLIENTE'"})



	LRET := .F.
ENDIF

RETURN( LRET )


/*/{PROTHEUS.DOC} FVALCOB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00169() 
// ======================================================================= \\
// --> CHAMADA NO  CAMPO : FP6_VALOR 

IF ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] == "L" //EMPRESA
	ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := M->FP6_VALOR
ENDIF

RETURN .T.


/*/{PROTHEUS.DOC} FVRESPON
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00170()
// ======================================================================= \\
// FUNCAO PARA VALIDAR EDICAO DO CAMPO FP6_RESPON

LOCAL LRET 		:= .T.
LOCAL CNOVARESP	:= &(READVAR())

IF CNOVARESP == "C"
	ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR" })] := 0
	ODLGRES:ACOLS[ODLGRES:OBROWSE:NAT][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := 0
	ODLGRES:OBROWSE:REFRESH()
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} VALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VALID(ODLG)
// ======================================================================= \\
LOCAL LSALTD 	:= .T.
LOCAL NPOSDTINI := 0
LOCAL NPOSDTFIM := 0
LOCAL NPOSFROTA := 0
LOCAL NPOSOBRA  := 0
LOCAL NPOSSEQ	:= 0
LOCAL CMSG		:= ""
LOCAL CRET		:= ""
LOCAL LSHOWMSG  := .F.
LOCAL NX        := 0 
LOCAL _NI       := 0 
LOCAL NPOS      := 0 

LOCAL NPSTPBAS  := "" 
LOCAL NPSPREDI  := 0 
LOCAL NPSVRHOR  := 0 
LOCAL NPSDTINI  := CTOD(SPACE(8)) 
LOCAL NPSDTFIM  := CTOD(SPACE(8)) 
LOCAL NPSQUANT  := 0 
LOCAL NPSPRUNI  := 0 
LOCAL NPSVLBRU  := 0 
LOCAL _lValFPA  := .T.
LOCAL LPULAVLD  := SUPERGETMV("MV_LOCX281", .F., .F.)

PRIVATE LEXCLZUC := .T.

// FRANK 26/10/20 - ROTINA PARA LIMPAR O VALOR NO CASO DE SER UM ITEM PAI.
LOCA001A0()

IF EXISTBLOCK("LC001VAL")
	DO CASE
	CASE FP0->FP0_TIPOSE == "T"
		IF !EXECBLOCK("LC001VAL",.T.,.T.,{ODLGCAR:ACOLS, ODLGCAR:AHEADER})
			RETURN .F.
		ENDIF
	CASE ALLTRIM(FP0->FP0_TIPOSE) $ "E#G"
		IF !EXECBLOCK("LC001VAL",.T.,.T.,{ODLGGUI:ACOLS, ODLGGUI:AHEADER})
			RETURN .F.
		ENDIF
	OTHERWISE
		IF !EXECBLOCK("LC001VAL",.T.,.T.,{ODLGPLA:ACOLS, ODLGPLA:AHEADER})
			RETURN .F.
		ENDIF
	ENDCASE
ENDIF

IF VALTYPE(ODLGCNJ)=="O"

	FOR NPOS:=1 TO LEN(ODLGCNJ:ACOLS)
		IF EMPTY(ODLGCNJ:ACOLS[NPOS][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_DTLIM"})])
			IF ! ODLGCNJ:ACOLS[NPOS,28]    //SE A LINHA ESTIVER DELETADA NÃO DEVERÁ VALIDAR A DATA LIMITE.

				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A data limite não foi preencida."})


				LSALTD := .F.
				EXIT
			ENDIF
		ENDIF

		// VERIFICA SE EXISTE ALGUM CONJ. TRANSPORTADOR DELETADO, APÓS REALIZA A VERIFICAÇÃO NA DTQ PARA ANALIZAR
		// SE A MESMA ESTÁ ACEITA, SE ESTIVER NÃO SERÁ POSSÍVEL REALIZAR O DELETE.
		IF ODLGCNJ:ACOLS[NPOS,LEN(ODLGCNJ:AHEADER)+1]
			DBSELECTAREA("FQ5")
			DBSETORDER(1)
			IF FQ5->(DBSEEK(XFILIAL("FQ5")+(ODLGCNJ:ACOLS[NPOS][ASCAN(ODLGCNJ:AHEADER,{|X|ALLTRIM(X[2])=="FPS_VIAGEM"})]) ))
				IF FQ5->FQ5_STATUS == "6"
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"ASF Não poderá ser deletada, pois já teve Liberação."})

					LSALTD := .F.
				ELSE
					EFROM	:= ALLTRIM(GETMV("MV_RELFROM"))
					CPARA	:= SUPERGETMV("MV_LOCX057",NIL,NIL,"LOLIVEIRA@ITUP.COM.BR")
					CCC		:= ""
					CTITULO	:= "CANCELADA  ASF - PROJETO " + FQ5->FQ5_SOT
					CMSG	:= "ESTE EMAIL É PARA INFORMAR QUE NO SISTEMA FOI CANCELADA A ASF DE NUMERO: "+FQ5->FQ5_AS+ CRLF
					CCCO	:= ""
					LOCA05909(EFROM , CPARA , CCC , CTITULO , CMSG , NIL , CCCO)

					RECLOCK("FQ5",.F.) 
					FQ5->(DBDELETE()) 
					FQ5->(MSUNLOCK()) 
				ENDIF
			ENDIF
		ENDIF
	NEXT NPOS 

ENDIF

IF VALTYPE(ODLGCNP)=="O"

	FOR NPOS:=1 TO LEN(ODLGCNP:ACOLS)
		IF EMPTY(ODLGCNP:ACOLS[NPOS][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_DTLIM"})])
			IF !ODLGCNP:ACOLS[NPOS,LEN(ODLGCNP:ACOLS[NPOS])]   //SE A LINHA ESTIVER DELETADA NÃO DEVERÁ VALIDAR A DATA LIMITE.

				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Data limite não preenchida."})

				LSALTD := .F.
				EXIT
			ENDIF
		ENDIF

		// VERIFICA SE EXISTE ALGUM CONJ. TRANSPORTADOR DELETADO, APÓS REALIZA A VERIFICAÇÃO NA DTQ 
		// PARA ANALIZAR SE A MESMA ESTÁ ACEITA, SE ESTIVER NÃO SERÁ POSSÍVEL REALIZAR O DELETE.
		IF ODLGCNP:ACOLS[NPOS,LEN(ODLGCNP:AHEADER)+1]
			DBSELECTAREA("FQ5")
			DBSETORDER(1)
			IF FQ5->(DBSEEK(XFILIAL("FQ5")+(ODLGCNP:ACOLS[NPOS][ASCAN(ODLGCNP:AHEADER,{|X|ALLTRIM(X[2])=="FQ7_VIAGEM"})]) ))
				// --> PONTO DE ENTRADA PARA VALIDAR EXCLUSÃO DE CONJ. E ROMANEIO.
				IF EXISTBLOCK("LOCA008")
					LEXCLZUC := EXECBLOCK("LOCA008",.T.,.T.,{FQ5->FQ5_FILORI, FQ5->FQ5_SOT, FQ5->FQ5_OBRA, FQ5->FQ5_AS, FQ5->FQ5_VIAGEM})
				ENDIF

				IF FQ5->FQ5_STATUS == "6"

					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"ASF não poderá ser deletada, pois já teve liberação."})

					LSALTD := .F.
				ELSE
					EFROM	:= ALLTRIM(GETMV("MV_RELFROM"))
					CPARA	:= SUPERGETMV("MV_LOCX057",NIL,NIL,"LOLIVEIRA@ITUP.COM.BR")
					CCC		:= ""
					CTITULO	:= "CANCELADA  ASF - PROJETO " + FQ5->FQ5_SOT
					CMSG	:= "ESTE EMAIL É PARA INFORMAR QUE NO SISTEMA FOI CANCELADA A ASF DE NUMERO: "+FQ5->FQ5_AS+ CRLF
					CCCO	:= ""

					LOCA05909(EFROM , CPARA , CCC , CTITULO , CMSG , NIL , CCCO) 

					RECLOCK("FQ5",.F.)
					FQ5->(DBDELETE()) 
					FQ5->(MSUNLOCK()) 
				ENDIF
			ENDIF
		ENDIF
	NEXT

ENDIF

IF VALTYPE(ODLGPLA)=="O" .AND. !LPULAVLD
	IF FP0->FP0_TIPOSE == "L"				// --> FP0_TIPOSE: T=TRANSPORTE ; E=EQUIPAMENTOS ; L=LOCACAO 		// --> FP0_TIPFAT: M=MEDICAO ; P=PADRAO 
		NPSTPBAS  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_TPBASE"}) 
		NPSPREDI  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_PREDIA"}) 
		NPSVRHOR  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_VRHOR" }) 
		NPSDTINI  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_DTINI" }) 
		NPSDTFIM  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_DTENRE" }) 
		NPSPRODU  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_PRODUT" }) 

		// fazer esta validacao somente se o produto foi preenchido - Frank 11/03/21
		_lValFPA := .F.
		FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
			IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]
				If !EMPTY(ODLGPLA:ACOLS[_NI][NPSPRODU])
					_lValFPA := .T.
				EndIF
			EndIf
		Next

		If _lValFPA
			FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
				IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]				// --> NÃO ESTÁ DELETADO. 
					IF   EMPTY(ODLGPLA:ACOLS[_NI][NPSTPBAS]) .OR. EMPTY(ODLGPLA:ACOLS[_NI][NPSPREDI]) .OR. EMPTY(ODLGPLA:ACOLS[_NI][NPSDTINI]);
					.OR. EMPTY(ODLGPLA:ACOLS[_NI][NPSDTFIM]) //.OR. EMPTY(ODLGPLA:ACOLS[_NI][NPSVRHOR])  
						Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
						Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
						{"Verifique se os campos: 'BASE CALCULO', 'QTDE MESES', 'DT.INICIO' OU 'DT.FINAL' estão preenchidos."})
						LSALTD := .F.
						EXIT
					ENDIF

					// FRANK 23/10/20
					IF EMPTY(ODLGPLA:ACOLS[_NI][NPSVRHOR]) 
						IF !EMPTY(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
							IF !EMPTY(SUBSTR(ODLGPLA:ACOLS[_NI][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1) ) 
								IF EMPTY(ODLGPLA:ACOLS[_NI][NPSVRHOR]) 
									//MSGSTOP("VERIFIQUE SE OS CAMPOS: 'VR.BASE' ESTÁ PREENCHIDO!" , "GPO - LOCC001.PRW") 
									//LSALTD := .F.
									//EXIT
								ENDIF
							ENDIF
						ELSE
							Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
							Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
							{"Verifique se o campo: 'VR.BASE' está preenchido."})
							LSALTD := .F.
							EXIT
						ENDIF
					ENDIF
				ENDIF
			NEXT _NI
		EndIf

	ENDIF
	IF FP0->FP0_TIPFAT == "P"				// --> M=MEDICAO ; P=PADRAO 
		NPSQUANT  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_QUANT" }) 
		NPSPRUNI  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_PRCUNI"}) 
		NPSVLBRU  := ASCAN(ODLGPLA:AHEADER,{|X| ALLTRIM(X[2]) == "FPA_VLBRUT"}) 

		FOR _NI := 1 TO LEN(ODLGPLA:ACOLS)
			IF !ODLGPLA:ACOLS[_NI][LEN(ODLGPLA:AHEADER)+1]				// --> NÃO ESTÁ DELETADO. 
				IF   EMPTY(ODLGPLA:ACOLS[_NI][NPSVLBRU]) .AND. !EMPTY(ODLGPLA:ACOLS[_NI][NPSQUANT]) .AND. !EMPTY(ODLGPLA:ACOLS[_NI][NPSPRUNI])
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Verifique se o campo: 'VALOR BRUTO' está preenchido."})
					LSALTD := .F. 
				ENDIF
			ENDIF
		NEXT _NI
	ENDIF
ENDIF

IF VALTYPE(ODLGGUI)=="O"
	NPOSDTINI   := ASCAN( ODLGGUI:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP4_DTINI"   })
	NPOSDTFIM   := ASCAN( ODLGGUI:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP4_DTFIM"   })
	NPOSFROTA   := ASCAN( ODLGGUI:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP4_GUINDA"  })
	NPOSOBRA    := ASCAN( ODLGGUI:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP4_OBRA"    })
	NPOSSEQ	    := ASCAN( ODLGGUI:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP4_SEQGUI"  })
	CMSG := "A(S) FROTA(S) ABAIXO ESTÁ(ÃO) COM DATA(S) ENCAVALADA(S)."+ CRLF
	FOR NX := 1 TO LEN(ODLGGUI:ACOLS)
		CRET :=	VALDTFROTA(ODLGGUI:ACOLS[NX,NPOSFROTA],ODLGGUI:ACOLS[NX,NPOSDTINI],ODLGGUI:ACOLS[NX,NPOSDTFIM],ODLGGUI:ACOLS[NX,NPOSOBRA],ODLGGUI:ACOLS[NX,NPOSSEQ])
		CMSG += CRET
		LSHOWMSG := .T.
	NEXT NX
	IF !LSHOWMSG
		MSGINFO(CMSG,"INFO")
	ENDIF
ENDIF

IF VALTYPE(ODLGTRA)=="O"
	NPOSDTINI   := ASCAN( ODLGTRA:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "ZA6_DTINI"   })
	NPOSDTFIM   := ASCAN( ODLGTRA:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "ZA6_DTFIM"   })
	NPOSORIG    := ASCAN( ODLGTRA:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "ZA6_ORIGEM"  })
	NPOSDEST    := ASCAN( ODLGTRA:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "ZA6_DESTIN"  })
	FOR NX := 1 TO LEN(ODLGTRA:ACOLS)
		IF !ODLGTRA:ACOLS[NX,LEN(ODLGTRA:AHEADER)+1]
			IF EMPTY(ODLGTRA:ACOLS[NX,NPOSORIG]) .OR. EMPTY(ODLGTRA:ACOLS[NX,NPOSDEST])
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Verifique se os campos da aba 'VIAGENS': DT. INI/DT FIM/ORIGEM E DESTINO estão preenchidos."})
				LSALTD := .F.
				EXIT
			ENDIF
		ENDIF
	NEXT NX
ENDIF

IF LSALTD 
	FSALVAR(ODLG) 
ENDIF 
RETURN NIL 


/*/{PROTHEUS.DOC} VALDTFROTA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VALDTFROTA(CFROTA , DDTINI , DDTFIM , COBRA , CSEQ) 
// ======================================================================= \\

LOCAL CRET	    := ""
LOCAL AAREA		:= GETAREA()
LOCAL CQUERY	:= ""

IF SELECT("TR02") > 0
	TR02->(DBCLOSEAREA())
ENDIF
CQUERY := " SELECT FPO_PROJET , FPO_DTINI , FPO_DTFIM " 
CQUERY += " FROM "+RETSQLNAME("FPO")
CQUERY += " WHERE  FPO_FILIAL = '"+XFILIAL("FPO")+"'"
CQUERY += "   AND  FPO_CODBEM <> ''"
CQUERY += "   AND  FPO_STATUS NOT IN ('1','A','E','S')"
CQUERY += "   AND (FPO_DTINI BETWEEN '"+DTOS(DDTINI)+"' AND '"+DTOS(DDTFIM)+"'"
CQUERY += "    OR  FPO_DTFIM BETWEEN '"+DTOS(DDTINI)+"' AND '"+DTOS(DDTFIM)+"')"
CQUERY += "   AND  D_E_L_E_T_<> '*' "
CQUERY := CHANGEQUERY(CQUERY)
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TR02" , .T. , .T.) 

TCSETFIELD("TR02" , "FPO_DTINI" , "D" , 08 , 00) 
TCSETFIELD("TR02" , "FPO_DTFIM" , "D" , 08 , 00) 

WHILE !TR02->(EOF())
	CRET += ALLTRIM(TR02->FPO_PROJET)+"-"+COBRA+"-"+CSEQ+" ("+ALLTRIM(CFROTA)+") - "+DTOC(TR02->FPO_DTINI)+" / "+DTOC(TR02->FPO_DTFIM) +CRLF
	TR02->(DBSKIP())
ENDDO

IF SELECT("TR02") > 0
	TR02->(DBCLOSEAREA())
ENDIF

RESTAREA(AAREA)

RETURN CRET


/*/{PROTHEUS.DOC} GATXZA0
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00171(CPROSPE)
// ======================================================================= \\
// CHAMADA NO GATILHO: FP0_PROSPE 

LOCAL CQRY := "" 

CQRY += " SELECT U5_CONTAT "
CQRY += " FROM " + RETSQLNAME("SU5") + CRLF
CQRY += " WHERE U5_PROSPEC = '" + CPROSPE + "' " + CRLF
CQRY := CHANGEQUERY(CQRY) 
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQRY) , "TRB" , .F. , .T.) 

DBSELECTAREA("TRB")
DBSELECTAREA("FP0")

CQRY := TRB->U5_CONTAT

TRB->(DBCLOSEAREA())

RETURN CQRY


/*/{PROTHEUS.DOC} FVALICLI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00172(CCLIENTE , CLOJA) 
// ======================================================================= \\
// VALIDA SE O CLIENTE POSSUI TITULOS EM ABERTOS NO FINANCEIRO

LOCAL   AAREA       := GETAREA()
LOCAL   _LRET    	:= .T.
LOCAL   _NREGS   	:= 0
LOCAL   _CBMP		:= LOADBITMAP(NIL , "BR_VERMELHO") 
LOCAL   _ADADOS	    := {}
LOCAL   _ODLGVALCL
LOCAL   _OLIST
LOCAL   _CVALIDCLI
LOCAL   _CSITCLIFIN
LOCAL   NLIMITCRED := 0
LOCAL   NVALTIT	   := 0
LOCAL   DDTLIMCRED
LOCAL   NX         := 0 

PRIVATE _CCLIVALID := CCLIENTE
PRIVATE _CLOJVALID := CLOJA
PRIVATE _DDATAREF  := DTOS( DATE() )


// MERGE - ORGUEL 94 - INICIO
// Ponto de Entrada para validações customizadas ao inserir linha
IF VALTYPE(ODLGPLA)=="O"
	IF EXISTBLOCK("LC01ADD") 
	   _LRET := ExecBlock("LC01ADD",.f.,.f.)
		IF !_LRET
			RETURN _LRET
		ENDIF
	ENDIF
ENDIF	
// MERGE - ORGUEL 94 - FIM

_CVALIDCLI 	:= 0 // removido na 94 POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_ZVALCLI")
_CSITCLIFIN := 0 // removido na 94 POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_ZPENFIN")

NLIMITCRED	:= POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_LC")
DDTLIMCRED	:= POSICIONE("SA1" , 1 , XFILIAL("SA1")+_CCLIVALID+_CLOJVALID , "A1_VENCLC")

// VERIFICA SE DEVE SER FEITO A VALIDAÇÃO DE PENDENCIAS DO CLIENTE NO FINANCEIRO
IF _CVALIDCLI == "J"		// J=JAMAIS 
	RETURN .T. 
ENDIF

// VERIFICA SE O CLIENTE TEM TITULOS EM CARTEIRA DE PROTESTO OU COBRANÇA C/ ADVOGADO
IF _CSITCLIFIN == "S"
	AVISO("PENDÊNCIA FINANCEIRA","NÃO SERÁ POSSIVEL ABRIR NENHUMA A.S. PARA O CLIENTE POIS O MESMO TEM TITULOS EM CARTEIRA DE 'PROTESTO' OU  'COBRAÇA C/ ADVOGADO' ",{"OK"},,"NÃO SERÁ POSSIVEL GERAR A.S.")
	RETURN .F.
ENDIF

// VERIFICA SE DEVE SER FEITO A VALIDAÇÃO DE PENDENCIAS DO CLIENTE NO FINANCEIRO
IF _CVALIDCLI == "N"
	RETURN .T.
ENDIF

IF SELECT("VALCLI") > 0
	VALCLI->(DBCLOSEAREA())
ENDIF

BEGINSQL ALIAS "VALCLI"
		COLUMN E1_VENCREA AS DATE

		%NOPARSER%

		SELECT
			E1_FILIAL,
			E1_PREFIXO,
			E1_NUM,
			E1_PARCELA,
			E1_TIPO,
			E1_NATUREZ,
			E1_NOMCLI,
			E1_VENCREA,
			E1_VALOR
		FROM
			%TABLE:SE1%
		WHERE
			%NOTDEL%						AND
			E1_CLIENTE = %EXP:_CCLIVALID%	AND
			E1_LOJA	   = %EXP:_CLOJVALID%   AND
			E1_TIPO NOT LIKE '%-%'			AND
			E1_VENCREA	< %EXP:_DDATAREF%	AND
			E1_BAIXA	= ' '
ENDSQL

VALCLI->(DBGOTOP())
VALCLI->(DBEVAL({|| _NREGS++, AADD(_ADADOS,{_CBMP,VALCLI->E1_FILIAL,E1_PREFIXO,E1_NUM,E1_PARCELA,E1_TIPO,E1_NATUREZ,E1_NOMCLI,E1_VENCREA,"R$ "+TRANSFORM(E1_VALOR,"@E 999,999,999,999.99"),E1_VALOR}  ) } ) )
VALCLI->(DBCLOSEAREA())

IF _NREGS > 0

	NVALTIT := 0
	FOR NX := 1 TO LEN(_ADADOS)
		NVALTIT += _ADADOS[NX,11]
	NEXT NX

	IF (DTOS(DDTLIMCRED) < DTOS(DDATABASE) .OR. NLIMITCRED < NVALTIT) .AND. SUPERGETMV("MV_LOCX242",.F.,.F.)

		_LRET := .F.

		AVISO("PENDÊNCIA FINANCEIRA","NÃO SERÁ POSSIVEL ABRIR NENHUMA A.S. PARA O CLIENTE POIS O MESMO TEM "+CVALTOCHAR(_NREGS)+" TITULOS PENDENTES NO FINANCEIRO",{"OK"},,"NÃO SERÁ POSSIVEL GERAR A.S.")

		DEFINE MSDIALOG _ODLGVALCL FROM 0,0 TO 300,900 TITLE "TITULOS PENDENTES" PIXEL
			@ 05,05 LISTBOX _OLIST FIELDS HEADER "", "FILIAL" ,"PREFIXO","NUMERO","PARCELA","TIPO","NATUREZA","NOME CLIENTE","VENCIMENTO","VALOR" PIXEL SIZE 435,100 OF _ODLGVALCL
			_OLIST:SETARRAY( _ADADOS )
			_OLIST:BLINE := {|| {   _ADADOS[_OLIST:NAT,01],;
									_ADADOS[_OLIST:NAT,02],;
									_ADADOS[_OLIST:NAT,03],;
									_ADADOS[_OLIST:NAT,04],;
									_ADADOS[_OLIST:NAT,05],;
									_ADADOS[_OLIST:NAT,06],;
									_ADADOS[_OLIST:NAT,07],;
									_ADADOS[_OLIST:NAT,08],;
									_ADADOS[_OLIST:NAT,09],;
									_ADADOS[_OLIST:NAT,10]}}
			DEFINE SBUTTON FROM 120,415 TYPE 1 ACTION ( _ODLGVALCL:END() ) ENABLE
		ACTIVATE MSDIALOG _ODLGVALCL  CENTERED

	    OREPORT := LOCR002()
		OREPORT:PRINTDIALOG()
	ENDIF
ENDIF

RESTAREA( AAREA )

RETURN _LRET


/*/{PROTHEUS.DOC} CONSLIFT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION CONSLIFT()
// ======================================================================= \\
// --> CHAMADA: MENU - "CONSULTA LIFT" 

LOCAL AAREA		:= GETAREA()
LOCAL AAREAZA0	:= FP0->( GETAREA() )
LOCAL AAREAZAG	:= FPA->( GETAREA() )
LOCAL _CPROJ	:= ""
LOCAL _CAS		:= ""
LOCAL _CNOMCLI	:= ""

PRIVATE OVERDE	:= LOADBITMAP(GETRESOURCES() , "BR_VERDE")
PRIVATE OAMARE	:= LOADBITMAP(GETRESOURCES() , "BR_AMARELO")
PRIVATE OAZUL	:= LOADBITMAP(GETRESOURCES() , "BR_AZUL")
PRIVATE OCINZA	:= LOADBITMAP(GETRESOURCES() , "BR_CINZA")
PRIVATE OVERME	:= LOADBITMAP(GETRESOURCES() , "BR_VERMELHO")
PRIVATE OMARRO	:= LOADBITMAP(GETRESOURCES() , "BR_MARRON_OCEAN")
PRIVATE OCANCE	:= LOADBITMAP(GETRESOURCES() , "BR_CANCEL")
PRIVATE OBRZP5
PRIVATE OBRZP6
PRIVATE OLISTP5
PRIVATE OLISTP6
PRIVATE ONUMPED
PRIVATE ONUMRES
PRIVATE ONUMAPV
PRIVATE OSTATUS
PRIVATE ABRZP5	:= {}
PRIVATE ABRZP6	:= {}
PRIVATE OPNLSOL
PRIVATE OPNLZP5
PRIVATE OPNLZP6
PRIVATE OCOMBO
PRIVATE ODLG

DEFINE FONT OFONT  NAME "MONOAS" SIZE 0, -16 BOLD 
DEFINE FONT OFONT1 NAME "MONOAS" SIZE 0, -18 BOLD 
DEFINE FONT OFONT2 NAME "MONOAS" SIZE 0, -14 BOLD 

DBSELECTAREA("FPA")
FPA->( DBSETORDER(3) )
IF FPA->( DBSEEK( XFILIAL("FPA")+ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})] ) )
	_CPROJ	 := FPA->FPA_PROJET
	_CAS	 := FPA->FPA_AS
	_CNOMCLI := POSICIONE("FP0",1,XFILIAL("FP0")+FPA->FPA_PROJET,"FP0_CLINOM")
ENDIF

DEFINE MSDIALOG ODLG TITLE "LIFT - CONSULTA HISTÓRICO DE A.S." FROM 010,005 TO 550,900 PIXEL 
	OPNLSOL := TPANEL():NEW(0 , 0 , "" , ODLG , NIL , .T. , .F. , NIL , NIL , 0 , 050 , .F. , .T.) 
	OPNLSOL:ALIGN := CONTROL_ALIGN_TOP 

	@ 005,005 SAY SUPERGETMV("MV_LOCX248",.F.,"PROJETO")+": " FONT OFONT1 PIXEL OF OPNLSOL
	@ 005,070 SAY _CPROJ      FONT OFONT1 COLOR CLR_BLUE PIXEL OF OPNLSOL

	@ 020,005 SAY "A.S.: "    FONT OFONT1                PIXEL OF OPNLSOL
	@ 020,070 SAY _CAS        FONT OFONT1 COLOR CLR_BLUE PIXEL OF OPNLSOL

	@ 035,005 SAY "Cliente: " FONT OFONT1                PIXEL OF OPNLSOL
	@ 035,070 SAY _CNOMCLI    FONT OFONT1 COLOR CLR_BLUE PIXEL OF OPNLSOL

	ATUZP5()
ACTIVATE MSDIALOG ODLG CENTERED

FP0->( RESTAREA( AAREAZA0 ) )
FPA->( RESTAREA( AAREAZAG ) )
RESTAREA( AAREA )

RETURN NIL


/*/{PROTHEUS.DOC} ATUZP5
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION ATUZP5()
// ======================================================================= \\

LOCAL AAREA   := GETAREA()
LOCAL CQRYZP5

ASIZE(ABRZP5, 0)

IF SELECT("TMPZP5") > 0
	TMPFPY->(DBCLOSEAREA()) 
ENDIF
CQRYZP5 := " SELECT FPY_EQUIPA, T9_NOME, FPY_NF, FPY_SERIE, FPY_DTNF, FPY_HORA, FPY_DTDEVO, FPY_STATUS, "
CQRYZP5 +=        " FPY_NFDEVO, FPY_SERDEV, FPY_FORNEC, FPY_LOJFOR, COALESCE(A2_NOME,'') AS A2_NOME "
CQRYZP5 += " FROM " + RETSQLNAME("FPY") + " ZP5 "
CQRYZP5 +=        " INNER JOIN "+RETSQLNAME("ST9") + " ST9 ON FPY_EQUIPA = T9_CODBEM AND ST9.D_E_L_E_T_ = '' "
CQRYZP5 +=        " LEFT  JOIN "+RETSQLNAME("SA2") + " SA2 ON FPY_FORNEC+FPY_LOJFOR = A2_COD+A2_LOJA AND SA2.D_E_L_E_T_ = '' "
CQRYZP5 += " WHERE  FPY_FILIAL = '"+XFILIAL("FPY")+"' AND FPY_AS = '"+ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]+"' AND ZP5.D_E_L_E_T_ = '' "
CQRYZP5 := CHANGEQUERY(CQRYZP5) 
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TMPZP5" , .F. , .T.) 

WHILE TMPFPY->( !EOF() )
	AADD(ABRZP5 , { IF(TMPFPY->FPY_STATUS=="01",OVERDE,IF(TMPFPY->FPY_STATUS=="02",OAMARE,IF(TMPFPY->FPY_STATUS=="03",OAZUL,;
					IF(TMPFPY->FPY_STATUS=="04",OCINZA,IF(TMPFPY->FPY_STATUS=="05",OVERME,OMARRO))))),;
					TMPFPY->FPY_EQUIPA,;
					TMPFPY->T9_NOME,;
					TMPFPY->FPY_NF,;
					TMPFPY->FPY_SERIE,;
					STOD(TMPFPY->FPY_DTNF),;
					TMPFPY->FPY_HORA,;
					STOD(TMPFPY->FPY_DTDEVO),;
					TMPFPY->FPY_NFDEVO,;
					TMPFPY->FPY_SERDEV,;
					TMPFPY->FPY_FORNEC,;
					TMPFPY->FPY_LOJFOR,;
					TMPFPY->A2_NOME})
	TMPFPY->(DBSKIP())
ENDDO

IF LEN(ABRZP5) == 0
	 ABRZP5	:= {{"","","","","","","","","","","","",""}}
ENDIF

OPNLZP5 := TPANEL():NEW(0 , 0 , "" , ODLG , NIL , .T. , .F. , NIL , NIL , 0 , 90 , .F. , .T.)
OPNLZP5:ALIGN:=CONTROL_ALIGN_ALLCLIENT

@ 005,005 SAY    "Remessa: " FONT OFONT                  PIXEL OF OPNLZP5
@ 005,100 BUTTON "Legenda" SIZE 040,010 ACTION(REMLEG()) PIXEL OF OPNLZP5 

@ 020,001 LISTBOX OLISTP5 FIELDS HEADER '','EQUIPAMENTO','NOME','NOTA FISCAL','SERIE','DATA NF','HORA','DATA DEVOLUÇÃO',;
'NF DEVOLUÇÃO','SERIE','FORNECEDOR','LOJA','NOME' SIZE 440,60 OF OPNLZP5 PIXEL
OLISTP5:SETARRAY(ABRZP5)
OLISTP5:BLINE := {||{	ABRZP5[OLISTP5:NAT,01],;
						ABRZP5[OLISTP5:NAT,02],;
						ABRZP5[OLISTP5:NAT,03],;
						ABRZP5[OLISTP5:NAT,04],;
						ABRZP5[OLISTP5:NAT,05],;
						ABRZP5[OLISTP5:NAT,06],;
						ABRZP5[OLISTP5:NAT,07],;
						ABRZP5[OLISTP5:NAT,08],;
						ABRZP5[OLISTP5:NAT,09],;
						ABRZP5[OLISTP5:NAT,10],;
						ABRZP5[OLISTP5:NAT,11],;
						ABRZP5[OLISTP5:NAT,12],;
						ABRZP5[OLISTP5:NAT,13]}}

IF SELECT("TMPZP5") > 0
	TMPFPY->(DBCLOSEAREA()) 
ENDIF

ATUZP6()
ODLG:REFRESH()
RESTAREA( AAREA )

RETURN NIL


/*/{PROTHEUS.DOC} ATUZP6
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION ATUZP6()
// ======================================================================= \\
// ESTA ROTINA PARA APRESENTAR OS DADOS DOS PEDIDOS DE COMPRA ASSOCIADO A SOLICITAÇÃO DE COMPRA.

LOCAL AAREA     := GETAREA()
LOCAL CQRYZP6

ASIZE(ABRZP6, 0)

IF SELECT("TMPZP6") > 0
	TMPFPZ->(DBCLOSEAREA()) 
ENDIF
CQRYZP6 := " SELECT DISTINCT FPZ_FILIAL , FPZ_AS , FPZ_PEDVEN , FPZ_DTPED , FPZ_DTINI , FPZ_DTFIM , FPZ_STATUS , COALESCE(D2_DOC,'') AS D2_DOC , COALESCE(D2_SERIE,'') AS D2_SERIE " 
CQRYZP6 += " FROM " + RETSQLNAME("FPZ") + " ZP6 "
CQRYZP6 +=        " LEFT JOIN " + RETSQLNAME("SD2") + " SD2 ON FPZ_FILIAL = D2_FILIAL AND FPZ_PEDVEN = D2_PEDIDO AND SD2.D_E_L_E_T_ = '' "
CQRYZP6 += " WHERE  FPZ_FILIAL = '"+XFILIAL("FPZ")+"' AND FPZ_AS = '"+ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]+"' AND ZP6.D_E_L_E_T_ = '' "
CQRYZP6 := CHANGEQUERY(CQRYZP6) 
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQRYZP6) , "TMPZP6" , .F. , .T.) 

WHILE TMPFPZ->( !EOF() )
	AADD(ABRZP6, { IF(TMPFPZ->FPZ_STATUS=="01",OVERDE,IF(TMPFPZ->FPZ_STATUS=="02",OAZUL,IF(TMPFPZ->FPZ_STATUS=="03",OVERME,OCANCE))),;
					TMPFPZ->FPZ_AS,;
					TMPFPZ->FPZ_PEDVEN,;
					STOD(TMPFPZ->FPZ_DTPED),;
					STOD(TMPFPZ->FPZ_DTINI),;
					STOD(TMPFPZ->FPZ_DTFIM),;
					TMPFPZ->D2_DOC,;
					TMPFPZ->D2_SERIE})
	TMPFPZ->(DBSKIP())
ENDDO

OPNLZP6:= TPANEL():NEW(0, 0, "", ODLG, NIL, .T., .F., NIL, NIL, 0,120, .F., .T. )
OPNLZP6:ALIGN:=CONTROL_ALIGN_BOTTOM

@ 005,005 SAY    "Faturamento: " FONT OFONT                PIXEL OF OPNLZP6
@ 005,100 BUTTON "Legenda" SIZE 040,010  ACTION(PEDLEG())  PIXEL OF OPNLZP6 
@ 005,160 BUTTON "Fatura"  SIZE 040,010  ACTION(CONSFIN()) PIXEL OF OPNLZP6 

IF LEN(ABRZP6) == 0
	ABRZP6	:= {{"","","","","","","","","","","",""}}
ENDIF

@ 020,001 LISTBOX OLISTP6 FIELDS HEADER "","A.S.","PEDIDO DE VENDA","EMISSAO","PERÍODO INICIO","PERÍODO FIM","NOTA","SERIE" SIZE 440,60 OF OPNLZP6 PIXEL 
OLISTP6:SETARRAY(ABRZP6)
OLISTP6:BLINE	:= {|| { ABRZP6[OLISTP6:NAT,01],;
						 ABRZP6[OLISTP6:NAT,02],;
						 ABRZP6[OLISTP6:NAT,03],;
						 ABRZP6[OLISTP6:NAT,04],;
						 ABRZP6[OLISTP6:NAT,05],;
						 ABRZP6[OLISTP6:NAT,06],;
						 ABRZP6[OLISTP6:NAT,07],;
						 ABRZP6[OLISTP6:NAT,08]}}

IF SELECT("TMPZP6") > 0
	TMPFPZ->(DBCLOSEAREA()) 
ENDIF

OLISTP6:REFRESH()
ODLG:REFRESH()
RESTAREA( AAREA )

RETURN NIL


/*/{PROTHEUS.DOC} REMLEG
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION REMLEG()
// ======================================================================= \\

BRWLEGENDA("REMESSA",'LEGENDA',{{'BR_VERDE'		   , 'REMESSA ENVIADA'			},;
								{'BR_AMARELO'	   , '1 - FATURAMENTO'			},;
								{'BR_AZUL'		   , '2 - FATURAMENTO'			},;
								{'BR_CINZA'		   , 'DEVOLUÇÃO NO PRAZO'		},;
								{'BR_VERMELHO'	   , 'DEVOLUÇÃO PRAZO CARENCIA'	},;
								{'BR_MARRON_OCEAN' , 'DEVOLUÇÃO 2 - FATURAMENTO'}})

RETURN .T.


/*/{PROTHEUS.DOC} PEDLEG
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION PEDLEG()
// ======================================================================= \\
BRWLEGENDA("PEDIDO",'LEGENDA',{	{'BR_VERDE'		,'EM ANDAMENTO'	},;
								{'BR_AZUL'		,'FATURADO'	},;
								{'BR_VERMELHO'	,'PERDIDO'},;
								{'BR_CANCEL'	,'EXCLUIDO'}})
RETURN .T.


/*/{PROTHEUS.DOC} CONSFIN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION CONSFIN()
// ======================================================================= \\

LOCAL   AAREA  := GETAREA()
LOCAL   ABRSE1 := {}
LOCAL   OLISTS1
LOCAL   CQRYSE1

PRIVATE ODLGFIN

IF EMPTY(ABRZP6[OLISTP6:NAT,7])
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"Não existem registros para a consulta."})
	RETURN .F.
ELSE
	IF SELECT("TMPSE1") > 0
		TMPSE1->(DBCLOSEAREA())
	ENDIF
	CQRYSE1 := " SELECT E1_FILIAL , E1_NUM , E1_PARCELA , E1_PREFIXO , E1_VALOR , E1_BAIXA " 
	CQRYSE1 += " FROM "+RETSQLNAME("SE1")+" SE1 "
	CQRYSE1 += " WHERE  E1_FILIAL+E1_NUM+E1_SERIE+E1_CLIENTE+E1_LOJA IN "
	CQRYSE1 +=           " ( SELECT DISTINCT D2_FILIAL+ D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA "
	CQRYSE1 +=           "   FROM "+RETSQLNAME("FPZ")+" ZP6 "
	CQRYSE1 +=                    " INNER JOIN "+RETSQLNAME("SD2")+ " SD2 ON D2_FILIAL = FPZ_FILIAL AND D2_PEDIDO = FPZ_PEDVEN AND SD2.D_E_L_E_T_ = '' "
	CQRYSE1 +=           "   WHERE  FPZ_FILIAL = '"+XFILIAL("FPZ")+"' "
	CQRYSE1 +=           "     AND  FPZ_AS     = '"+ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]+"' "
	CQRYSE1 +=           "     AND  ZP6.D_E_L_E_T_ = '' ) "
	CQRYSE1 +=           "     AND  SE1.D_E_L_E_T_ = ''   "
	CQRYSE1 := CHANGEQUERY(CQRYSE1) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQRYSE1) , "TMPSE1" , .F. , .T.) 

	WHILE TMPSE1->( !EOF() )
		AADD(ABRSE1, { IIF(EMPTY(TMPSE1->E1_BAIXA),OVERDE,OAZUL),;
						TMPSE1->E1_NUM,;
						TMPSE1->E1_PARCELA,;
						TMPSE1->E1_PREFIXO,;
						TRANSFORM(TMPSE1->E1_VALOR,"@E 999,999,999.99"),;
						STOD(TMPSE1->E1_BAIXA)})
		TMPSE1->(DBSKIP())
	ENDDO

	IF SELECT("TMPSE1") > 0
		TMPSE1->(DBCLOSEAREA()) 
	ENDIF

	IF LEN(ABRSE1) == 0
		ABRSE1	:= {{"","","","","",""}}
	ENDIF

	DEFINE MSDIALOG ODLGFIN TITLE "CONSULTA FATURA" FROM 010,005 TO 200,540 PIXEL 
		@ 010,005 LISTBOX OLISTS1 FIELDS HEADER "","FATURA","PARCELA","PREFIXO","VALOR","DT.BAIXA" SIZE 260,60 OF ODLGFIN PIXEL 
		OLISTS1:SETARRAY(ABRSE1)
		OLISTS1:BLINE	:= {|| {ABRSE1[OLISTS1:NAT,01],;
								ABRSE1[OLISTS1:NAT,02],;
								ABRSE1[OLISTS1:NAT,03],;
								ABRSE1[OLISTS1:NAT,04],;
								ABRSE1[OLISTS1:NAT,05],;
								ABRSE1[OLISTS1:NAT,06]}}

		OLISTS1:REFRESH()
		ODLGFIN:REFRESH()
	ACTIVATE MSDIALOG ODLGFIN CENTERED

ENDIF

RESTAREA( AAREA )

RETURN NIL


/*/{PROTHEUS.DOC} GRCONTR2
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00173()
// ======================================================================= \\
// --> CHAMADA: MENU - "GERA CONTRATO" 

LOCAL AAREA		:= GETAREA()
LOCAL CPROJET   := PROJETO(.T.)
LOCAL CFILOLD   := CFILANT

CFILANT := FP0->FP0_FILIAL 

IF LOCA00174( CPROJET )
	LOCA013()

	DBSELECTAREA("FQ5")
	DBSETORDER(8)//PROJETO
	IF DBSEEK(XFILIAL("FQ5")+SUBSTR( CPROJET, 1, 9))//SE GEROU O CONTRATO
		RECLOCK("FP0",.F.)
		FP0->FP0_POSSIB := "100"
		FP0->(MSUNLOCK()) 
	ENDIF
ENDIF

CFILANT := CFILOLD 

RESTAREA(AAREA)

RETURN NIL


/*/{PROTHEUS.DOC} VALFROTA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00174(CPROJET)	
// ======================================================================= \\
// --> TRANSPORTE

LOCAL LRET		:= .T.
LOCAL AAREA		:= GETAREA()
LOCAL AAREAZLE	:= FPM->(GETAREA())
LOCAL _AINCON   := {}
LOCAL _CMSG     := ""
LOCAL CQUERY	:= ""
LOCAL LREVIS	:= .F.
LOCAL DDTANTINI
LOCAL DDTANTFIM
LOCAL _NK
LOCAL CGETNA   := GETNEXTALIAS()
LOCAL CGRPAND  := ""

IF SBM->(FIELDPOS("BM_XACESS")) > 0
	CGRPAND := LOCA00189()
ELSE
	CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
ENDIF

IF     FP0->FP0_TIPOSE == "T"				// --> TRANSPORTE
	CQUERY := " SELECT COUNT(*) REGS "
	CQUERY += " FROM "+RETSQLNAME("ZA6")+" ZA6 "
	CQUERY += " WHERE  ZA6_FILIAL = '"+XFILIAL("ZA6")+"' "
	CQUERY += "   AND  ZA6_PROJET = '"+CPROJET+"' "
	CQUERY += "   AND (ZA6_DTINI  = '' "
	CQUERY += "    OR  ZA6_DTFIM  = '' "
	CQUERY += "    OR  ZA6_HRINI  = '' "
	CQUERY += "    OR  ZA6_HRFIM  = '' "
	CQUERY += "    OR  ZA6_CONPAG = '')"
	CQUERY += "   AND  ZA6.D_E_L_E_T_<>'*' "
	CQUERY := CHANGEQUERY(CQUERY) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , (CGETNA) , .F. , .T.) 

 	IF (CGETNA)->REGS > 0
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"É obrigatório preencher a data e hora inicial/final e condição de pagamento."})
		 
		RESTAREA(AAREAZLE)
		RESTAREA(AAREA)
 		RETURN .F.
 	ENDIF
 	(CGETNA)->(DBCLOSEAREA())

	CQUERY := " SELECT COUNT(*) REGS "
	CQUERY += " FROM "+RETSQLNAME("FP8")+" ZAE "
	CQUERY += " WHERE  FP8_FILIAL = '"+XFILIAL("FP8")+"' "
	CQUERY += "   AND  FP8_PROJET = '"+CPROJET+"' "
	CQUERY += "   AND  FP8_TRANSP = '' "
	CQUERY += "   AND  ZAE.D_E_L_E_T_<>'*' "
	CQUERY := CHANGEQUERY(CQUERY) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , (CGETNA) , .F. , .T.) 

 	IF (CGETNA)->REGS > 0
	 	(CGETNA)->(DBCLOSEAREA())
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"É obrigatório preencher o transporte do conjunto transportador."})

		RESTAREA(AAREAZLE)
		RESTAREA(AAREA)
 		RETURN .F.
 	ENDIF
 	(CGETNA)->(DBCLOSEAREA())

	DBSELECTAREA("FQ5")
	DBSETORDER(8)									// PROJETO
	IF DBSEEK(XFILIAL("FQ5")+SUBSTR(CPROJET,1,9))	// SE GEROU O CONTRATO
		LREVIS    := .T. 
		DDTANTINI := FQ5->FQ5_DATINI 
		DDTANTFIM := FQ5->FQ5_DATFIM 
	ENDIF

	IF SELECT("TR02") > 0
 	     TR02->(DBCLOSEAREA())
 	ENDIF
	CQUERY := " SELECT DISTINCT ZAE.FP8_PROJET , ZAE.FP8_OBRA  , ZAE.FP8_SEQTRA , ZAE.FP8_TRANSP , ZAE.FP8_SEQCAR , "
	CQUERY +=                 " ZA6.ZA6_DTINI  , ZA6.ZA6_DTFIM , ZA6.ZA6_VIAGEM , ZA6.ZA6_PROJET , ZA6.ZA6_OBRA   , ZA6_HRINI , ZA6_HRFIM " 
	CQUERY += " FROM "+RETSQLNAME("FP8")+" ZAE "
	CQUERY +=        " LEFT OUTER JOIN "+RETSQLNAME("ZA7")+" ZA7 "
	CQUERY +=                     " ON (ZA7.ZA7_FILIAL = ZAE.FP8_FILIAL AND ZA7.ZA7_PROJET = ZAE.FP8_PROJET AND ZA7.ZA7_OBRA = ZAE.FP8_OBRA AND ZA7.ZA7_SEQTRA = ZAE.FP8_SEQTRA AND ZA7.ZA7_SEQCAR = ZAE.FP8_SEQCAR AND ZA7.D_E_L_E_T_<>'*' ) "
	CQUERY +=        " LEFT OUTER JOIN "+RETSQLNAME("ZA6")+" ZA6 "
	CQUERY +=                     " ON (ZA6.ZA6_FILIAL = ZA7.ZA7_FILIAL AND ZA6.ZA6_PROJET = ZA7.ZA7_PROJET AND ZA6.ZA6_OBRA = ZA7.ZA7_OBRA AND ZA6.ZA6_SEQTRA = ZA7.ZA7_SEQTRA AND ZA6.D_E_L_E_T_<>'*') "
	CQUERY += " WHERE  ZAE.D_E_L_E_T_<>'*' "
	CQUERY += "   AND  ZAE.FP8_FILIAL = '"+XFILIAL("FP8")+"' "
	CQUERY += "   AND  ZAE.FP8_PROJET = '"+CPROJET+"' "
	CQUERY := CHANGEQUERY(CQUERY)
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TR02" , .F. , .T.) 

	TCSETFIELD("TR02","ZA6_DTINI","D",08,00)
	TCSETFIELD("TR02","ZA6_DTFIM","D",08,00)

	WHILE ! TR02->( EOF() )
		FOR _NK := TR02->ZA6_DTINI TO TR02->ZA6_DTFIM
			IF LOCA00518( TR02->FP8_TRANSP, _NK, TR02->ZA6_HRINI, TR02->ZA6_HRFIM, .T. )  //VERIFICA SE EXISTE PROGRAMAÇÃO
    			LRET := .F.
	    	ENDIF
		NEXT
		TR02->(DBSKIP())
	ENDDO

	IF ! LRET

		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não foi possível gerar contrato deste projeto, pois uma ou mais frotas estão com datas encavaladas na programação diária de transporte."})
		PRINTREGS()
	ENDIF

 	IF SELECT("TR02") > 0
 	     TR02->(DBCLOSEAREA())
 	ENDIF

ELSEIF FP0->FP0_TIPOSE == "E"				// --> EQUIPAMENTOS
	CQUERY := " SELECT COUNT(*) REGS "
	CQUERY += " FROM "+RETSQLNAME("FP4")+" ZA5 "
	CQUERY += " WHERE FP4_FILIAL = '"+XFILIAL("FP4")+"' "
	CQUERY += "   AND FP4_PROJET = '"+CPROJET+"' "
	CQUERY += "   AND (FP4_DTINI = '' "
	CQUERY += "    OR FP4_DTFIM = '' "
	CQUERY += "    OR FP4_HRINI = '' "
	CQUERY += "    OR FP4_HRFIM = '' "
	CQUERY += "    OR FP4_PRODUT = '' "
	CQUERY += "    OR FP4_CONPAG = '')"
	CQUERY += "   AND ZA5.D_E_L_E_T_<>'*' "
	CQUERY := CHANGEQUERY(CQUERY) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , (CGETNA) , .F. , .T.) 

 	IF (CGETNA)->REGS > 0

		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"É obrigatório preencher data e hora inicial/final e condição de pagamento."})
		 
		RESTAREA(AAREAZLE)
		RESTAREA(AAREA)
 		RETURN .F.
 	ENDIF
	(CGETNA)->(DBCLOSEAREA())

	DBSELECTAREA("FQ5")
	DBSETORDER(8)//PROJETO
	IF DBSEEK(XFILIAL("FQ5")+SUBSTR(CPROJET,1,9))//SE GEROU O CONTRATO
		LREVIS := .T.
	ENDIF

	IF SELECT("TR02") > 0
 	     TR02->(DBCLOSEAREA())
 	ENDIF
	CQUERY := " SELECT ZA5.FP4_PROJET , ZA5.FP4_OBRA , ZA5.FP4_SEQGUI , ZA5.FP4_GUINDA , ZA5.FP4_DTINI , ZA5.FP4_DTFIM , ZA5.FP4_AS "
	CQUERY += " FROM "+RETSQLNAME("FP4")+" ZA5 "
	CQUERY +=        " LEFT OUTER JOIN "+RETSQLNAME("ST9")+" ST9 "
	CQUERY +=                     " ON (ST9.T9_FILIAL  = ZA5.FP4_FILIAL AND ST9.T9_CODBEM = ZA5.FP4_GUINDA AND ST9.D_E_L_E_T_<>'*') "
	CQUERY +=        " LEFT OUTER JOIN "+RETSQLNAME("FP1")+" ZA1 "
	CQUERY +=                     " ON (ZA1.FP1_FILIAL = ZA5.FP4_FILIAL AND ZA1.FP1_OBRA  = ZA5.FP4_OBRA   AND ZA1.D_E_L_E_T_<>'*') "
	CQUERY += " WHERE  ZA5.D_E_L_E_T_ <> '*' "
	CQUERY += "   AND  ZA5.FP4_FILIAL =  '"+XFILIAL("FP4")+"' "
	CQUERY += "   AND  ZA5.FP4_PROJET =  '"+CPROJET       +"' "
	CQUERY += "   AND  ZA1.FP1_PROJET =  '"+CPROJET       +"' "
	CQUERY += "   AND  ST9.T9_TIPOSE  =  'T' "
	CQUERY := CHANGEQUERY(CQUERY) 
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TR02" , .F. , .T.) 

	TCSETFIELD("TR02","FP4_DTINI","D",08,00)
	TCSETFIELD("TR02","FP4_DTFIM","D",08,00)

	WHILE !TR02->(EOF())

	    DBSELECTAREA("FPM")
	    DBSETORDER(5)
	    DBSEEK(XFILIAL("FPM")+TR02->FP4_GUINDA)

	    WHILE !FPM->(EOF()) .AND. ALLTRIM(FPM->FPM_FROTA) == ALLTRIM(TR02->FP4_GUINDA)
	    	IF ALLTRIM(FPM->FPM_STATUS) == "1"
	    		FPM->(DBSKIP())
	    		LOOP
	    	ENDIF
			IF LREVIS	//AS 2º VEZ
	    		IF ALLTRIM(FPM->FPM_STATUS) == "9" .OR. ALLTRIM(FPM->FPM_STATUS) == "M"
		    		FPM->(DBSKIP())
		    		LOOP
		    	ENDIF
		    	IF ALLTRIM(TR02->FP4_PROJET+TR02->FP4_OBRA+TR02->FP4_GUINDA+TR02->FP4_AS) == ALLTRIM(FPM->FPM_PROJET+FPM->FPM_OBRA+FPM->FPM_FROTA+FPM->FPM_AS)
		    		FPM->(DBSKIP())
		    		LOOP
		    	ENDIF
		    	IF DTOS(FPM->FPM_DTPROG) >= DTOS(TR02->FP4_DTINI) .AND. DTOS(FPM->FPM_DTPROG) <= DTOS(TR02->FP4_DTFIM)
		    		LRET := .F.
		    		EXIT
		    	ENDIF
			ELSE
		    	IF DTOS(FPM->FPM_DTPROG) >= DTOS(TR02->FP4_DTINI) .AND. DTOS(FPM->FPM_DTPROG) <= DTOS(TR02->FP4_DTFIM)
		    		LRET := .F.
		    		EXIT
		    	ENDIF
	    	ENDIF
	    	FPM->(DBSKIP())
	    ENDDO

		TR02->(DBSKIP())
	ENDDO

	IF !LRET
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não foi possível gerar contrato deste projeto, pois uma ou mais frotas estão com datas encavaladas na programação diária de transporte."})

		PRINTREGS()
	ENDIF
 	IF SELECT("TR02") > 0
 	     TR02->(DBCLOSEAREA())
 	ENDIF

ELSEIF FP0->FP0_TIPOSE == "L"				// --> LOCAÇÃO
	IF EXISTBLOCK("LC001VML") 				// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE VALIDAÇÃO NA MANUTENÇÃO DE PROJETOS DE LOCAÇÃO.
		LRET := EXECBLOCK("LC001VML",.T.,.T.,{})
	ELSE
		CQUERY := " SELECT FPA_OBRA, FPA_SEQGRU, B1_GRUPO, FP0_TIPFAT TIPFAT" + CRLF
		CQUERY += " FROM " + RETSQLNAME("FPA") + " ZAG "
		CQUERY +=        " INNER JOIN " + RETSQLNAME("FP0") + " ZA0 ON  FPA_FILIAL = FP0_FILIAL" + CRLF
		CQUERY +=                                                 " AND FPA_PROJET = FP0_PROJET" + CRLF
		CQUERY +=                                                 " AND ZA0.D_E_L_E_T_ = ' ' "   + CRLF
		CQUERY +=        " LEFT  JOIN " + RETSQLNAME("SB1") + " SB1 ON  FPA_PRODUT = B1_COD "    + CRLF
		CQUERY +=                                                 " AND SB1.D_E_L_E_T_ = ' ' "   + CRLF
		CQUERY += " WHERE  FPA_FILIAL = '" + XFILIAL("FPA") + "'" + CRLF
		CQUERY += "   AND  FPA_PROJET = '" + CPROJET + "'" + CRLF
		CQUERY += "   AND (FPA_DTINI  = ''" + CRLF
		CQUERY += "    OR  FPA_DTFIM  = ''" + CRLF
		CQUERY += "    OR (FPA_PRODUT = ''" + CRLF
		CQUERY += "   AND  FPA_TIPOSE = 'L')" + CRLF
		CQUERY += "    OR (B1_GRUPO NOT IN ('" + STRTRAN(ALLTRIM(CGRPAND),";","','") + "')" + CRLF
		CQUERY += "    AND FPA_GRUA   = ''" + CRLF
		CQUERY += "    AND FPA_TIPOSE = 'L')" + CRLF
		CQUERY += "    OR (B1_GRUPO  IN ('" + STRTRAN(ALLTRIM(CGRPAND),";","','") + "')" + CRLF
		CQUERY += "    AND FPA_QUANT <= 0" + CRLF
		CQUERY += "    AND FPA_NFRET = '')" + CRLF
		CQUERY += "     OR FPA_CONPAG = '')" + CRLF
		CQUERY += "    AND ZAG.D_E_L_E_T_ = ' '"
		CQUERY := CHANGEQUERY(CQUERY)
		DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CQUERY),(CGETNA),.F.,.T.)

	 	IF (CGETNA)->(!EOF())
	 		IF (CGETNA)->B1_GRUPO $ ALLTRIM(CGRPAND) //TIPFAT $ "A#B"

				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Verifique os campos data e hora inicial/final, produto, quantidade e condição de pagamento. Obra: " + (CGETNA)->FPA_OBRA + " / Seq.: " + (CGETNA)->FPA_SEQGRU})

	 		ELSE
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Verifique os campos data e hora inicial/final, produto/bem, e condição de pagamento. Obra: " + (CGETNA)->FPA_OBRA + " / Seq.: " + (CGETNA)->FPA_SEQGRU})

	 		ENDIF
	 		LRET := .F.
	 	ENDIF
	 	(CGETNA)->(DBCLOSEAREA())

	 	IF LRET
	 		IF SELECT("TRBSB2") > 0
				TRBSB2->(DBCLOSEAREA())
			ENDIF
	 		CQUERY := " SELECT FPA_OBRA, " + CRLF
	 		CQUERY += "		RTRIM(LTRIM(B1_COD)) + ' - ' + RTRIM(LTRIM(B1_DESC)) PRODUTO," + CRLF
	 		CQUERY += "        SUM(FPA_QUANT) FPA_QUANT, MAX(ISNULL(B2_QATU,0)) B2_QATU," + CRLF
	 		CQUERY += "        ISNULL((SELECT TOP 1 SB2LOC.B2_LOCAL + ' - ' + ISNULL(RTRIM(LTRIM(NNR_DESCRI)),'')" + CRLF
	 		CQUERY += "				  FROM " + RETSQLNAME("SB2") + " SB2LOC LEFT JOIN " + RETSQLNAME("NNR") + " NNR" + CRLF
	 		CQUERY += "				    ON NNR_FILIAL = '" + XFILIAL("NNR") + "'" + CRLF
	 		CQUERY += "				   AND NNR_CODIGO = SB2LOC.B2_LOCAL" + CRLF
	 		CQUERY += "				   AND NNR.D_E_L_E_T_ = ''" + CRLF
	 		CQUERY += "				 WHERE SB2LOC.B2_FILIAL = '" + XFILIAL("SB2") + "'" + CRLF
	 		CQUERY += "				   AND SB2LOC.B2_COD    = B1_COD" + CRLF
	 		CQUERY += "				   AND SB2LOC.B2_LOCAL  = B1_LOCPAD" + CRLF
	 		CQUERY += "				   AND SB2LOC.D_E_L_E_T_ = ''" + CRLF
	 		CQUERY += "				 ORDER BY SB2LOC.B2_QATU DESC),'') B2_LOCAL" + CRLF
	 		CQUERY += "   FROM " + RETSQLNAME("FPA") + " ZAG INNER JOIN " + RETSQLNAME("FP0") + " ZA0" + CRLF
	 		CQUERY += "     ON FPA_FILIAL = FP0_FILIAL" + CRLF
	 		CQUERY += "    AND FPA_PROJET = FP0_PROJET" + CRLF
	 		CQUERY += "    AND FP0_TIPFAT IN ('A','B')" + CRLF
	 		CQUERY += "    AND ZA0.D_E_L_E_T_ = ''" + CRLF
	 		CQUERY += "        INNER JOIN " + RETSQLNAME("SB1") + " SB1" + CRLF
	 		CQUERY += "     ON FPA_PRODUT = B1_COD" + CRLF
	 		CQUERY += "    AND B1_GRUPO  IN ('" + STRTRAN(ALLTRIM(CGRPAND),";","','") + "')"
	 		CQUERY += "    AND B1_MSBLQL <> '1'" + CRLF
	 		CQUERY += "    AND SB1.D_E_L_E_T_ = ' '" + CRLF
	 		CQUERY += "        INNER JOIN " + RETSQLNAME("SB2") + " SB2" + CRLF
	 		CQUERY += "     ON B2_FILIAL = '" + XFILIAL("SB2") + "'" + CRLF
	 		CQUERY += "    AND B2_COD    = FPA_PRODUT" + CRLF
	 		CQUERY += "    AND B2_LOCAL  = B1_LOCPAD" + CRLF
	 		CQUERY += "    AND SB2.D_E_L_E_T_ = ''" + CRLF
	 		CQUERY += "  WHERE FPA_FILIAL = '" + XFILIAL("FPA") + "'" + CRLF
	 		CQUERY += "    AND FPA_PROJET = '" + CPROJET + "'" + CRLF
	 		CQUERY += "    AND FPA_NFREM = ''" + CRLF
	 		CQUERY += "    AND (FPA_AS = ''" + CRLF
	 		CQUERY += "     OR NOT EXISTS(SELECT *" + CRLF
	 		CQUERY += "					 FROM " + RETSQLNAME("FQ5") + " DTQ" + CRLF
	 		CQUERY += "					WHERE FQ5_FILIAL = '" + XFILIAL("FQ5") + "'" + CRLF
	 		CQUERY += "					  AND FQ5_VIAGEM = FPA_VIAGEM" + CRLF
	 		CQUERY += "					  AND FQ5_AS     = FPA_AS" + CRLF
	 		CQUERY += "					  AND FQ5_STATUS = '6'" + CRLF
	 		CQUERY += "					  AND DTQ.D_E_L_E_T_ = ''))" + CRLF
	 		CQUERY += "    AND ZAG.D_E_L_E_T_ = ' '" + CRLF
	 		CQUERY += "  GROUP BY FPA_OBRA, B1_COD, B1_DESC, B1_LOCPAD" + CRLF
	 		CQUERY += "  HAVING SUM(FPA_QUANT) > SUM(B2_QATU)" + CRLF
	 		CQUERY += "  ORDER BY FPA_OBRA, PRODUTO"
			CQUERY := CHANGEQUERY(CQUERY) 
			TCQUERY CQUERY NEW ALIAS "TRBSB2"

			WHILE TRBSB2->(!EOF())
				AADD(_AINCON,{TRBSB2->FPA_OBRA,ALLTRIM(TRBSB2->PRODUTO),TRBSB2->FPA_QUANT,TRBSB2->B2_QATU,TRBSB2->B2_LOCAL})
				IF EMPTY(_CMSG)
					_CMSG := ALLTRIM(TRBSB2->PRODUTO)
				ELSE
					_CMSG += ", " + ALLTRIM(TRBSB2->PRODUTO)
				ENDIF
				TRBSB2->(DBSKIP())
			ENDDO
			TRBSB2->(DBCLOSEAREA())

			IF !EMPTY(_CMSG)
				LRET := .F.

				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não foi possível efetivar o contrato devido ao(s) produtos(s) "+ALLTRIM(_CMSG)+" não possuirem saldo suficiente em estoque."})


				IF MSGYESNO("DESEJA VISUALIZAR RELATÓRIO DE INCONSISTÊNCIAS?" , "GPO - LOCC001.PRW") 
					DEFINE MSDIALOG ODLGEST TITLE "INCONSISTÊNCIAS" FROM 0,0 TO 15,90 OF OMAINWND 
						@ 0.5,.7 LISTBOX OLISTEST FIELDS ;
						HEADER  "OBRA","PRODUTO","QTD. SOLICITADA","QTD. EM ESTOQUE","ARMAZEM" SIZE 340,088
						OLISTEST:SETARRAY(_AINCON)
						OLISTEST:BLINE := { || {_AINCON[OLISTEST:NAT][01] , _AINCON[OLISTEST:NAT][02] , _AINCON[OLISTEST:NAT][03] , _AINCON[OLISTEST:NAT][04] , _AINCON[OLISTEST:NAT][05]}} 
						@ 098, 7 BUTTON OESTCLOSE PROMPT "Fechar" SIZE 45,12 OF ODLGEST PIXEL ACTION (ODLGEST:END())
					ACTIVATE MSDIALOG ODLGEST CENTERED
				ENDIF
			ENDIF

	 	ENDIF

	ENDIF

ENDIF

IF LRET .AND. EXISTBLOCK("LC001VCT") 		// --> PONTO DE ENTRADA PARA VALIDAÇÃO DE USUÁRIO ANTES DA GERAÇÃO DO CONTRATO
	LRET := EXECBLOCK("LC001VCT",.T.,.T.,{CPROJET})
ENDIF

RESTAREA(AAREAZLE) 
RESTAREA(AAREA) 

RETURN LRET 


/*/{PROTHEUS.DOC} VALPERIODO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00175(NOPC) 		// VALIDA PERIODO ZA6
// ======================================================================= \\
// CHAMADA: ZA6_DTINI E ZA6_DTFIM E FONTE LOCT038.PRW  

LOCAL AAREA		:= GETAREA()
LOCAL DDTINI 	:= ODLGTRA:ACOLS[N, GDFIELDPOS("ZA6_DTINI", ODLGTRA:AHEADER)]
LOCAL DDTFIM 	:= ODLGTRA:ACOLS[N, GDFIELDPOS("ZA6_DTFIM", ODLGTRA:AHEADER)]
LOCAL LRET		:= .T.

IF NOPC == 1 .AND. !EMPTY(DDTFIM)
	IF DTOS(DDTFIM) < DTOS(M->ZA6_DTINI)
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Data fim não pode ser menor que a data início."})


		LRET := .F.
	ENDIF
ELSEIF NOPC == 2 .AND. !EMPTY(DDTINI)
	IF DTOS(M->ZA6_DTFIM) < DTOS(DDTINI)
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Data fim não pode ser menor que a data início."})

		LRET := .F.
	ENDIF
ENDIF

RESTAREA(AAREA)

RETURN LRET


/*/{PROTHEUS.DOC} SUMVALRES
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION SUMVALRES() 
// ======================================================================= \\

LOCAL NPOS
LOCAL NX
LOCAL COBRAAUX   := "" 
LOCAL CSEQTRAAUX := "" 
LOCAL ACOLSCUS   := {} 

IF FP0->FP0_TIPOSE == "L"
	RETURN .F.
ENDIF

NVALCUSTG  := 0
NVALVIAGEM := 0
NPOSVAL    := ASCAN( ODLGRES:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP6_VALOR"   })

FOR NX := 1 TO LEN(ODLGRES:ACOLS)
	NVALCUSTG += ODLGRES:ACOLS[NX,NPOSVAL]
NEXT NX
OVALCUSTG:REFRESH()

NPOSVALGUI  := ASCAN( ODLGCUS:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FQ8_VRFRET"   })
FOR NPOS:=1 TO LEN(OCUS_COLS)
	COBRAAUX   := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]
	CSEQTRAAUX := OCUS_COLS[NPOS][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})]
	IF COBRA+CSEQTRA == COBRAAUX+CSEQTRAAUX 
		AADD(ACOLSCUS,ACLONE(OCUS_COLS[NPOS]))
	ENDIF
NEXT

IF FP0->FP0_TIPOSE == "E"
	RETURN .F.
ENDIF

FOR NX := 1 TO LEN(ACOLSCUS)
	NVALVIAGEM += ACOLSCUS[NX,NPOSVALGUI]
NEXT NX
OVALVIAGEM:REFRESH()

RETURN .T.


/*/{PROTHEUS.DOC} FCUSTOIND
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCUSTOIND()
// ======================================================================= \\

LOCAL CCODRESP  := SUPERGETMV("MV_LOCX119",.F.,"999") 
LOCAL NRESULT   := 0
LOCAL CCAMPO
LOCAL CCAMPOGET
LOCAL NCOLCOD2  := 0
LOCAL NPOSCOD2  := 0

NCOLCODIGO := ASCAN( ODLGRES:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP6_CODIGO"   })
NPOSCODIGO := ASCAN(ODLGRES:ACOLS,{|X| ALLTRIM(X[NCOLCODIGO]) == ALLTRIM(CCODRESP)})

DBSELECTAREA("FP7")
DBSETORDER(1)
IF DBSEEK( XFILIAL("FP7") + CCODRESP )
	NRESULT := (NVALCUSIG * NVALTOTG) / 100
	ODLGGUI:ACOLS[ODLGGUI:NAT][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_CUSIND" })] := NVALCUSIG

	NCOLCOD2 := ASCAN( ODLGGUI:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP4_CUSIND"   })
	NPOSCOD2 := ASCAN(OGUI_COLS,{|X| ALLTRIM(X[1]+X[2]) == ALLTRIM(COBRA+CSEQGUI)})
	IF NPOSCOD2 > 0
		OGUI_COLS[NPOSCOD2][NCOLCOD2] := NVALCUSIG
	ENDIF

	IF NPOSCODIGO > 0
		ODLGRES:ACOLS[NPOSCODIGO][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
		ODLGRES:ACOLS[NPOSCODIGO][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
		ODLGRES:ACOLS[NPOSCODIGO][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
		ODLGRES:ACOLS[NPOSCODIGO][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
		ODLGRES:ACOLS[NPOSCODIGO][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
		NPOSCOD2 := ASCAN(ORES_COLS,{|X| ALLTRIM(X[1]+X[2]+X[NCOLCODIGO]) == ALLTRIM(COBRA+CSEQGUI+CCODRESP)})
		IF NPOSCOD2 > 0
			ORES_COLS[NPOSCOD2] := ACLONE(ODLGRES:ACOLS[NPOSCODIGO])
		ENDIF
	ELSE
		IF EMPTY(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})]) .AND. LEN(ODLGRES:ACOLS) == 1
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
			ORES_COLS[LEN(ODLGRES:ACOLS)] := ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)])
		ELSE
			AADD(ODLGRES:ACOLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))
			CCAMPO    := "FP6_SEQRES"
			CCAMPOGET := ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]       := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_TRECHO"})] := ""
			AADD(ORES_COLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))//ADD NO ACOLSGERAL
		ENDIF
	ENDIF
	ODLGRES:REFRESH()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} FCUSINDT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00176(LBCALC)
// ======================================================================= \\

LOCAL CCODRESP := SUPERGETMV("MV_LOCX119",.F.,"999")
LOCAL NRESULT  := 0
LOCAL NPOSCOD  := 0
LOCAL NPOSCOD2 := 0
LOCAL NVALCUS  := 0
LOCAL CCAMPO
LOCAL CCAMPOGET

NCOLCODIGO := ASCAN( ODLGRES:AHEADER , { |X| UPPER( ALLTRIM( X[2] ) ) == "FP6_CODIGO"   })
NPOSCOD    := ASCAN(ODLGRES:ACOLS,{|X| ALLTRIM(X[NCOLCODIGO]) == ALLTRIM(CCODRESP)})
NVALCUS    := ODLGTRA:ACOLS[ODLGTRA:NAT][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_CUSIND"})]

DBSELECTAREA("FP7")
DBSETORDER(1)
IF DBSEEK(XFILIAL("FP7")+CCODRESP)
	NRESULT := (NVALVIAGEM * IIF(LBCALC,NVALCUS,M->ZA6_CUSIND)) / 100
	IF NPOSCOD > 0
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]   := COBRA
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := CSEQTRA
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
		ODLGRES:ACOLS[NPOSCOD][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
		NPOSCOD2 := ASCAN(ORES_COLS,{|X| ALLTRIM(X[1]+X[2]+X[NCOLCODIGO]) == ALLTRIM(COBRA+CSEQTRA+CCODRESP)})
		IF NPOSCOD2 > 0
			ORES_COLS[NPOSCOD2] := ACLONE(ODLGRES:ACOLS[NPOSCOD])
		ENDIF
	ELSE
		IF EMPTY(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})]) .AND. LEN(ODLGRES:ACOLS) == 1
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
			ORES_COLS[LEN(ODLGRES:ACOLS)] := ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)])
		ELSE
			AADD(ODLGRES:ACOLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))

			CCAMPO    := "FP6_SEQRES"
			CCAMPOGET := ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]       := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7->FP7_CODIGO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7->FP7_DESCRI
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCCO"})] := FP7->FP7_DESCCO
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := "D"
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR"})]  := NRESULT
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := 0

			AADD(ORES_COLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))//ADD NO ACOLSGERAL
		ENDIF
	ENDIF
	ODLGRES:REFRESH()
ENDIF

RETURN .T.


/*/{PROTHEUS.DOC} VALORAS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00177()
// ======================================================================= \\
// ROTINA USADA PRA PEGAR O VALOR DA AS E SETAR O CAMPO FP4_VALAS DO ACOLS 
LOCAL NLI := 0

FOR NLI := 1 TO LEN(ODLGGUI:ACOLS)
	GETVALAS(NLI , .T.) 
NEXT NLI

RETURN NIL


/*/{PROTHEUS.DOC} GETVALAS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETVALAS(NLI , LCALCITEM) 
// ======================================================================= \\

LOCAL   CTIPOCA
LOCAL   NPREDIA
LOCAL   NVRHOR
LOCAL   NQTMES
LOCAL   NQTDIA
LOCAL   NDIATURNO
LOCAL   NHRSTURNO
LOCAL   NRET      := 0
LOCAL   NX1       := 0 

PRIVATE ODLGVT

IF ! VALTYPE(ODLGGUI) == "O"
	RETURN .F.
ENDIF

NVALMOB  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
NVALDES  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
NVALSEG  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})]
CTIPOISS := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPISS" })]
CTIPOSEG := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPSEGU"})]
CTIPOCA  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
NPREDIA  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
NVRHOR   := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR" })]
NMINDIA  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]
NMINMES  := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINMES"})]
NQTMES   := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTMES" })]
NQTDIA   := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTDIA" })]

// VALORES DE TURNOS
IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1
	NDIATURNO := 0		// GDFIELDGET ( "FPE_MINDIT", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )
	NHRSTURNO := 0		// GETHORASTURNO(GDFIELDGET("FPE_HRINIT",1,.F.,OGETVT:AHEADER,OGETVT:ACOLS),GDFIELDGET("FPE_HOFIMT",1,.F.,OGETVT:AHEADER,OGETVT:ACOLS))
ENDIF
NVALTUR1 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 1 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 1, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR1)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2
	NDIATURNO := 0		// GDFIELDGET ( "FPE_MINDIT", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )
	NHRSTURNO := 0		// GGETHORASTURNO(GDFIELDGET("FPE_HRINIT",2,.F.,OGETVT:AHEADER,OGETVT:ACOLS),GDFIELDGET("FPE_HOFIMT",2,.F.,OGETVT:AHEADER,OGETVT:ACOLS))
ENDIF
NVALTUR2 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 2 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 2, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR2)

IF VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3
	NDIATURNO := 0		// GGDFIELDGET ( "FPE_MINDIT", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )
	NHRSTURNO := 0		// GGETHORASTURNO(GDFIELDGET("FPE_HRINIT",3,.F.,OGETVT:AHEADER,OGETVT:ACOLS),GDFIELDGET("FPE_HOFIMT",3,.F.,OGETVT:AHEADER,OGETVT:ACOLS))
ENDIF
NVALTUR3 := IIF( VALTYPE(OGETVT)=="O" .AND.  LEN(OGETVT:ACOLS) >= 3 , ((NDIATURNO * NHRSTURNO) * GDFIELDGET ( "FPE_VALTUR", 3, .F., OGETVT:AHEADER, OGETVT:ACOLS )),NVALTUR3)

CNUMACT  := IIF( VALTYPE(OGETVT)=="O" , LEN(OGETVT:ACOLS) , 1)

IF NQTMES==0 .AND. NQTDIA==0
	DO CASE
	CASE CTIPOCA == "H"
		NVALEQU := NPREDIA * NVRHOR
	CASE CTIPOCA == "D"
		NVALEQU := NPREDIA * NVRHOR
	CASE CTIPOCA == "M"
		NVALEQU := NPREDIA * NVRHOR
	CASE CTIPOCA == "F"
		NVALEQU := NVRHOR
	OTHERWISE
		NVALEQU := 0
	ENDCASE
ELSE
	DO CASE
	CASE CTIPOCA == "H"
		NVALEQU := ( NQTMES * NMINMES * NVRHOR ) + ( NQTDIA * NMINDIA * NVRHOR )
	CASE CTIPOCA == "D"
		NVALEQU := ( NQTMES * NMINMES * NVRHOR ) + ( NQTDIA * NMINDIA * NVRHOR )
	CASE CTIPOCA == "M"
		NVALEQU := ( NQTMES * NMINMES * NVRHOR ) + ( NQTDIA * NMINDIA * NVRHOR )
	CASE CTIPOCA == "F"
		NVALEQU := NVRHOR
	OTHERWISE
		NVALEQU := 0
	ENDCASE
ENDIF

NVALEQU   += NVALTUR1 + NVALTUR2 + NVALTUR3
NVALBASGT := NVALEQU 	 //VR.BASE TOTAL (GUINDASTE)

// VALOR A COBRAR 'RESPONSABILIDADES'
NVALCOBR := 0
FOR NX1 := 1 TO LEN(ODLGRES:ACOLS)
	IF ODLGGUI:ACOLS[NLI, GDFIELDPOS("FP4_SEQGUI",ODLGGUI:AHEADER)] == ODLGRES:ACOLS[NX1, GDFIELDPOS("FP6_SEQGUI",ODLGRES:AHEADER)]
		NVALCOBR += ODLGRES:ACOLS[NX1, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
	ENDIF
NEXT NX1
OVALCOBR:REFRESH()

NVALTCP := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]
NVALGUI := (NVALEQU+NVALMOB+NVALDES)+NVALCUS+NVALTCP+NVALVIS
NPERISS := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERISS"})]

IF OFOLDER:NOPTION == NFOLDERGUI 													// VERIFICAR SE ESTÁ NO FOLDER GUINDASTE, PARA VERIFICAR CONDIÇÃO ABAIXO 
	IF VALTYPE(M->FP4_PERISS) == "N" .AND. ALLTRIM(SX3->X3_CAMPO) == "FP4_PERISS" 	// VERIFICAR SE TA POSICIONADO NO CAMPO	// SE O CAMPO ESTIVER SENDO EDITADO O VALOR ATUAL NÃO ESTÁ ATUALIZADO NO ACOLS. 
		NPERISS := M->FP4_PERISS
	ENDIF
ENDIF

NBASISS  := NVALEQU+NVALMOB+NVALDES+NVALTCP+NVALSEG
NVALISS  := LOCA00158(NBASISS,NPERISS,CTIPOISS)  //CALCULA O ISS DOS GUINDASTES

NPREDIAG := NPREDIA
NVALBASG := NVRHOR

NVALMOBG := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
NVALDESG := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
NVALTACG := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]
NVALPEDA := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VLPEDA"})]

NVALISSG := NVALISS
NVALSEGG := NVALSEG

NVALTOTG :=0

IF CTIPOISS == "I"  //I=INCLUSO, N=N/A, C=CLIENTE
	NVALTOTG :=NVALMOBG+NVALDESG+NVALSEGG+NVALBASGT+NVALTACG+NVALCOBR+NVALPEDA
ELSE
	NVALTOTG :=NVALMOBG+NVALDESG+NVALISSG+NVALSEGG+NVALBASGT+NVALTACG+NVALCOBR+NVALPEDA
ENDIF

SUMVALRES()
NVALRENTG := NVALTOTG-NVALCUSTG
NVALCUSIG := ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_CUSIND" })]
OVALRENTG:REFRESH()
OVALCUSIG:REFRESH()

IF LCALCITEM
	NVAMMOBG := NVALMOBG
	NVAMDESG := NVALDESG
	NVAMISSG := NVALISSG
	NVAMSEGG := NVALSEGG
	NVAMTACG := NVALTACG
	DO CASE
	CASE CTIPOISS == "I"
		NVAMISSG := 0
	CASE CTIPOISS == "N"
		NVAMISSG := NVALISSG
	CASE CTIPOISS == "C"
		NVAMISSG := NVALISSG
	CASE CTIPOISS == "X"
		NVAMISSG := 0
	ENDCASE
	DO CASE
	CASE CTIPOSEG == "I"
		NVAMSEGG :=0
	CASE CTIPOSEG == "N"
		NVAMSEGG :=NVALSEGG
	CASE CTIPOSEG == "C"
		NVAMSEGG :=NVALSEGG
	CASE CTIPOSEG == "X"
		NVAMSEGG :=0
	ENDCASE
ENDIF

NVAMTOTG := NVAMMOBG+NVAMDESG+NVAMISSG+NVAMSEGG+NVALBASGT+NVALTACG
IF FUNNAME() == "LOCA054"
	NRET := 0
ELSE
	NRET := NVALTOTG
ENDIF

IF ODLGGUI:NAT == NLI
	ODLGGUI:ACOLS[NLI][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VALAS" })] := NRET
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} VALPRCBASE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00178(CCAMPO) 
// ======================================================================= \\
// CHAMADA NO CAMPO: FP4_VRHOR - VALOR BASE ZA5 

LOCAL AAREA		:= GETAREA()
LOCAL AAREASB1	:= SB1->(GETAREA())
LOCAL AAREAZ_5	:= FQ1->(GETAREA())
LOCAL AAREADA1	:= DA1->(GETAREA())
LOCAL LRET		:= .T.
LOCAL CCODUSR	:= RETCODUSR()
LOCAL CPRODUTO 	:= ""
LOCAL CCODTAB 	:= ""

IF UPPER(CCAMPO) == "FP4_VRHOR"
	CPRODUTO := ODLGGUI:ACOLS[N, GDFIELDPOS("FP4_PRODUT", ODLGGUI:AHEADER)]
	CCODTAB  := ODLGGUI:ACOLS[N, GDFIELDPOS("FP4_CODTAB", ODLGGUI:AHEADER)]
	NVALOR   := 0 // removido na 94 POSICIONE('SB1' , 1 , XFILIAL('SB1')+CPRODUTO , 'B1_XVALMO') 
	NVALOR   := NVALOR/ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR"})]
	NVALOR   := NVALOR/0.01
	IF !EMPTY(NVALOR)
		ACOLS[N][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERMAO"})] := NVALOR
	ENDIF
ENDIF

DBSELECTAREA("FQ1")
DBSETORDER(1)
IF !DBSEEK(XFILIAL("FQ1")+CCODUSR+"LOCA00178")			// SE O USUÁRIO NAO TIVER NA SZ5, FAZ VALIDAÇÃO ABAIXO.
	DBSELECTAREA("DA1")
	DBSETORDER(1)//CODTAB+PROD
	IF DBSEEK(XFILIAL("DA1")+CCODTAB+CPRODUTO) .AND. !EMPTY(CCODTAB)
		IF M->FP4_VRHOR < DA1->DA1_PRCVEN
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O valor base, não pode ser menor que o preço de venda informado na tabela de preços."})

			LRET := .F. 
		ENDIF 
	ELSE 
		DBSELECTAREA("SB1") 
		DBSETORDER(1) 
		IF DBSEEK(XFILIAL("SB1")+CPRODUTO) 
			IF M->FP4_VRHOR < SB1->B1_PRV1 
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"O valor base, não pode ser menor que o preço de venda informado no cadastro deste produto."})

				LRET := .F. 
			ENDIF 
		ENDIF 
	ENDIF 
ENDIF 

RESTAREA(AAREASB1) 
RESTAREA(AAREAZ_5) 
RESTAREA(AAREADA1) 
RESTAREA(AAREA) 

RETURN LRET


/*/{PROTHEUS.DOC} GETPRCBASE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00179(CCAMPO)
// ======================================================================= \\
// --> FUNÇÃO CHAMADO NO GATILHO DO CAMPO FP4_PRODUT E FP4_CODTAB, PARA PREENCHER O VALOR BASE. 

LOCAL NRET		:= 0
LOCAL AAREA		:= GETAREA()
LOCAL AAREASB1	:= SB1->(GETAREA())
LOCAL AAREADA1	:= DA1->(GETAREA())
LOCAL CPROD		:= ""
LOCAL CCODTAB 	:= ""

IF     CCAMPO == "FP4_PRODUT"
	CPROD 	:= M->FP4_PRODUT
	CCODTAB := ODLGGUI:ACOLS[N, GDFIELDPOS("FP4_CODTAB", ODLGGUI:AHEADER)]
ELSEIF CCAMPO == "FP4_CODTAB"
	CPROD 	:= ODLGGUI:ACOLS[N, GDFIELDPOS("FP4_PRODUT", ODLGGUI:AHEADER)]
	CCODTAB := M->FP4_CODTAB
ENDIF

DBSELECTAREA("DA1")
DBSETORDER(1)//CODTAB+PROD
IF DBSEEK(XFILIAL("DA1")+CCODTAB+CPROD) .AND. !EMPTY(CCODTAB)
	NRET := DA1->DA1_PRCVEN
ELSE
	DBSELECTAREA("SB1")
	DBSETORDER(1)
	DBSEEK(XFILIAL("SB1")+CPROD)
	NRET := SB1->B1_PRV1
	IF EMPTY(CCODTAB)
		ODLGGUI:ACOLS[N, GDFIELDPOS("FP4_DESTAB", ODLGGUI:AHEADER)]	:= ""
	ENDIF
ENDIF

RESTAREA(AAREASB1)
RESTAREA(AAREADA1)
RESTAREA(AAREA)

RETURN NRET


/*/{PROTHEUS.DOC} VALTABPR
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00180()
// ======================================================================= \\
// --> CHAMADA NO  CAMPO : FP4_CODTAB 
LOCAL LRET		:= .T.
LOCAL AAREA		:= GETAREA()
LOCAL AAREADA0	:= DA0->(GETAREA())

DBSELECTAREA("DA0")
DBSETORDER(1)
IF DBSEEK(XFILIAL("DA0")+M->FP4_CODTAB)
	IF DA0->DA0_ATIVO == "2"//NÃO
		LRET := .F.
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Esta tabela de preço está inativa."})
	ENDIF
ELSE
   		LRET := .F.
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Esta tabela de preço não existe."})

ENDIF

RESTAREA(AAREADA0)
RESTAREA(AAREA)

RETURN LRET


/*/{PROTHEUS.DOC} VALTURNO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00181()
// ======================================================================= \\
// --> CHAMADA NO  CAMPO : FPE_PORCEN   ("%HR.EXTRA") 

LOCAL NVALBASE := ODLGGUI:ACOLS[ODLGGUI:NAT, GDFIELDPOS("FP4_VRHOR",ODLGGUI:AHEADER)]
LOCAL NPORCENT := 0

NPORCENT := (NVALBASE * M->FPE_PORCENT) / 100
OGETVT:ACOLS[N, GDFIELDPOS("FPE_VALTUR", OGETVT:AHEADER)] := NVALBASE + NPORCENT

RETURN .T.


/*/{PROTHEUS.DOC} VALHORAT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00182(CCAMPO) 
// ======================================================================= \\
// --> CHAMADA NOS CAMPOS: FPE_HRINIT E FPE_HOFIMT 

LOCAL LRET		:= .T.
LOCAL CHRINI	:= ""
LOCAL CHRFIM	:= ""
LOCAL CDIASEM	:= ""
LOCAL CHRINI2	:= ""
LOCAL CHRFIM2	:= ""
LOCAL CDIASEM2	:= ""
LOCAL LVLDHRTU	:= SUPERGETMV("MV_LOCX258",.F.,.T.) 
LOCAL _NX       := 0 

IF     CCAMPO == "FPE_HRINIT"
	CHRINI := M->FPE_HRINIT
	CHRFIM := OGETVT:ACOLS[N, GDFIELDPOS("FPE_HOFIMT", OGETVT:AHEADER)]
ELSEIF CCAMPO == "FPE_HOFIMT"
	CHRINI := OGETVT:ACOLS[N, GDFIELDPOS("FPE_HRINIT", OGETVT:AHEADER)]
	CHRFIM := M->FPE_HOFIMT
ENDIF

CDIASEM := OGETVT:ACOLS[N, GDFIELDPOS("FPE_DIASEM", OGETVT:AHEADER)]

IF CHRINI == "2400" .AND. CHRFIM == "2400"
	LRET := .F.
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A hora inicial deve ser diferente da hora final."})
ENDIF

IF CHRINI == "2400"
	CHRINI := "0000"
ENDIF 

IF LVLDHRTU
	IF !EMPTY(CHRFIM) .AND. LRET .AND. !EMPTY(CHRINI)
		IF CHRINI > CHRFIM .AND. LRET
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A hora final não pode ser inferior a hora inicial."})
			LRET := .F.
		ENDIF 
		IF LRET .AND. CHRFIM == CHRINI
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A hora inicial deve ser diferente da hora final."})
			LRET := .F.
		ENDIF 
	ENDIF 
ENDIF

IF LRET .AND. CHRINI > "2400"
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A hora inicial é inválida."})
	LRET := .F.
ENDIF

IF LRET .AND. CHRFIM > "2400"
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A hora final é inválida."})
	LRET := .F.
ENDIF

IF LRET
	FOR _NX := 1 TO LEN(OGETVT:ACOLS)
		IF !(OGETVT:ACOLS[_NX][LEN(OGETVT:AHEADER)+1])
			IF OGETVT:NAT <> _NX
				CHRINI2  := OGETVT:ACOLS[_NX, GDFIELDPOS("FPE_HRINIT", OGETVT:AHEADER)]
				CHRFIM2  := OGETVT:ACOLS[_NX, GDFIELDPOS("FPE_HOFIMT", OGETVT:AHEADER)]
				CDIASEM2 := OGETVT:ACOLS[_NX, GDFIELDPOS("FPE_DIASEM", OGETVT:AHEADER)]
				IF CHRINI2 == "2400"
					CHRINI2 := "0000"
				ENDIF
				IF LRET .AND. CHRINI >= CHRINI2 .AND. CHRINI < CHRFIM2 .AND. CDIASEM == CDIASEM2
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Conflito de horários com a linha: "+ALLTRIM(STR(_NX))})
					LRET := .F.
					EXIT
				ENDIF 
				IF LRET .AND. CHRFIM > CHRINI2 .AND. CHRFIM <= CHRFIM2 .AND. CDIASEM == CDIASEM2
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Conflito de horários com a linha: "+ALLTRIM(STR(_NX))})
					LRET := .F.
					EXIT
				ENDIF 
			ENDIF 
		ENDIF
	NEXT _NX 
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} FCALGUIT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALGUIT()
// ======================================================================= \\
// PROJETO GUINDASTE = VALORES TOTALIZADOS POR PROJETO

LOCAL NV1 	 	 := 0
LOCAL NMOBAUX    := 0
LOCAL NDESAUX  	 := 0
LOCAL NSEGAUX	 := 0
LOCAL NPESOAUX   := 0
LOCAL NCOBRAUX   := 0
LOCAL NTURNOAUX	 := 0
LOCAL COBRAAUX	 := ""
LOCAL CSEQGAUX   := ""
LOCAL LTURVAZIO  := .F.
LOCAL NCONT		 := 0
LOCAL ACOLSAUX	 := {}
LOCAL AHEADERAUX := {}
LOCAL CPROJET    := PROJETO()
LOCAL NI         := 0 
LOCAL NX         := 0 

IF !VALTYPE(ODLGGUI)=="O"  //SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

IF EMPTY(OTURNO_COLS)
	IF TYPE("NUSADO") == "U"
		NUSADO := 0
	ENDIF

	SX3->(DBSETORDER(1))
	SX3->(DBSEEK("FPE"))
	WHILE SX3->(!EOF()) .AND. SX3->X3_ARQUIVO == "FPE"
		IF X3USO(SX3->X3_USADO) .AND. CNIVEL >= SX3->X3_NIVEL
		  	IF ! SX3->X3_CAMPO $ "FPE_DIASEM|FPE_VROPER"
	         	 NUSADO++
		         AADD(AHEADERAUX, {TRIM(SX3->X3_TITULO),;    // 01 - TITULO
		                                SX3->X3_CAMPO  ,;    // 02 - NOME DO CAMPO
		                                SX3->X3_PICTURE,;    // 03 - MASCARA DO CAMPO
		                                SX3->X3_TAMANHO,;    // 04 - TAMANHO
		                                SX3->X3_DECIMAL,;    // 05 - DECIMAIS
		                                SX3->X3_VALID  ,;    // 06 - VALIDACAO
		                                SX3->X3_USADO  ,;    // 07 - USADO
		                                SX3->X3_TIPO   ,;    // 08 - TIPO DO CAMPO
		                                ""             ,;    // 09 - ALIAS
		                                SX3->X3_CONTEXT})    // 10 - VIRTUAL OU REAL
			ENDIF
	 	ENDIF
	    SX3->(DBSKIP())
	ENDDO

	LTURVAZIO:=.T.
	DBSELECTAREA("FPE")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FPE")+CPROJET)

	WHILE !FPE->(EOF()) .AND. FPE->FPE_PROJET == CPROJET
		NCONT++
		ACOLSAUX := {}
		AADD(OTURNO_COLS , {}) 
		AADD(ACOLSAUX , {FPE_PROJET , FPE_OBRA , FPE_FROTA , FPE_SEQGUI , FPE_TURNO , FPE_MINDIT , FPE_HRINIT , FPE_HOFIMT , FPE_VALTUR , FPE_PORCEN , FPE_TIPOSE , .F.}) 
		OTURNO_COLS[NCONT] := ACOLSAUX
		FPE->(DBSKIP())
	ENDDO
ENDIF

NVALBAST  := 0
NVALEQUT  := 0
NVALBASTT := 0
NVALTUR1T := 0
NVALTUR2T := 0
NVALTUR3T := 0
NVALTACT  := 0
NVALISST  := 0
NVALCOBRT := 0
NVALTOTT  := 0
NVALRENT  := 0
NVALCUST  := 0

FOR NX := 1 TO LEN(OGUI_COLS)
	COBRAAUX  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_OBRA"  })]
	CSEQGAUX  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_SEQGUI"})]

	NVALBAST  += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR" })]
	NMOBAUX   += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
	NDESAUX   += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
	NSEGAUX   += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})]
	NVALTACT  += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]

	NVALMOBT  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
	NVALDEST  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
	NVALSEGT  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})]
	CTIPOISST := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPISS" })]
	CTIPOSEGT := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPSEGU"})]
	CTIPOCAT  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
	NPREDIAT  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
	NVRHORT   := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR" })]
	NMINDIAT  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]
	NMINMEST  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINMES"})]
	NQTMEST   := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTMES" })]
	NQTDIAT   := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTDIA" })]
	NPERISST  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERISS"})]
	NPESOAUX  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]

	IF NQTMEST==0 .AND. NQTDIAT==0
		DO CASE
		CASE CTIPOCAT == "H"
			NV1 := (NPREDIAT*NVRHORT)		// *NMINDIA
		CASE CTIPOCAT == "D"
			NV1 := (NPREDIAT*NVRHORT)		// *NMINDIA
		CASE CTIPOCAT == "M"
			NV1 := (NPREDIAT*NVRHORT) 		// *NMINMES
		CASE CTIPOCAT == "F"
			NV1 := NVRHORT
		OTHERWISE
			NV1 := 0
		ENDCASE
	ELSE
		DO CASE
		CASE CTIPOCAT == "H"
			NV1 := (NQTMEST*NMINMEST*NVRHORT)+(NQTDIAT*NMINDIAT*NVRHORT)
		CASE CTIPOCAT == "D"
			NV1 := (NQTMEST*NMINMEST*NVRHORT)+(NQTDIAT*NMINDIAT*NVRHORT)
		CASE CTIPOCAT == "M"
			NV1 := (NQTMEST*NMINMEST*NVRHORT)+(NQTDIAT*NMINDIAT*NVRHORT)
		CASE CTIPOCAT == "F"
			NV1 := NVRHORT
		OTHERWISE
			NV1 := 0
		ENDCASE
	ENDIF

	NVALEQUT += NV1

	FOR NI := 1 TO LEN(ORES_COLS)
		IF OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_SEQGUI" })]==ORES_COLS[NI, GDFIELDPOS("FP6_SEQGUI",ODLGRES:AHEADER)]
			NCOBRAUX += ORES_COLS[NI, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
		ENDIF
	NEXT NI

	NBASISST := NTURNOAUX + NVALMOBT + NVALDEST + NPESOAUX + NVALSEGT + NCOBRAUX + NV1
	NISSAUX  := LOCA00158(NBASISST,NPERISST,CTIPOISST)  //CALCULA O ISS DOS GUINDASTES
	NVALISST += NISSAUX

	IF CTIPOISST=="I"  //I=INCLUSO, N=N/A, C=CLIENTE
		NVALTOTT += NVALMOBT + NVALDEST + NVALSEGT + NPESOAUX + 500.00	//+NCOBRAUX
	ELSE
		NVALTOTT += NVALMOBT + NVALDEST + NISSAUX + NVALSEGT + NPESOAUX + 500.00	//+NCOBRAUX
	ENDIF

NEXT NX

FOR NI := 1 TO LEN(ORES_COLS)
	NVALCUST  += ORES_COLS[NI, GDFIELDPOS("FP6_VALOR",ODLGRES:AHEADER)]
	NVALCOBRT += ORES_COLS[NI, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
NEXT NI

NVALEQUT += NVALCOBRT

NVALSEGT := NSEGAUX
NVALMOBT := NMOBAUX
NVALDEST := NDESAUX

NVALBASTT:= NVALEQUT  										// VR.BASE TOTAL (GUINDASTE)
NVALTOTT += NVALBASTT

NVALRENT := NVALTOTT-NVALCUST

OVALBAST:REFRESH()
OVALBASTT:REFRESH()
OVALTUR1T:REFRESH()
OVALTUR2T:REFRESH()
OVALTUR3T:REFRESH()
OVALMOBT:REFRESH()
OVALDEST:REFRESH()
OVALSEGT:REFRESH()
OVALTACT:REFRESH()
OVALISST:REFRESH()
OVALTOTT:REFRESH()
OVALCUST:REFRESH()

IF LTURVAZIO 
	OTURNO_COLS := {} 
ENDIF 

RETURN NIL 


/*/{PROTHEUS.DOC} FCALCGUIOB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCALCGUIOB()
// ======================================================================= \\
// PROJETO GUINDASTE = VALORES TOTALIZADOS POR OBRA

LOCAL NV1 	 	 := 0
LOCAL NMOBAUX    := 0
LOCAL NDESAUX  	 := 0
LOCAL NSEGAUX	 := 0
LOCAL NPESOAUX   := 0
LOCAL NCOBRAUX   := 0
LOCAL NTURNOAUX	 := 0
LOCAL LTURVAZIO  := .F.
LOCAL NCONT		 := 0
LOCAL ACOLSAUX	 := {}
LOCAL AHEADERAUX := {}
LOCAL CSEQGAUX	 := ""
LOCAL NUSADO	 := 0
LOCAL CPROJET    := PROJETO()
LOCAL NX         := 0 
LOCAL NI         := 0 

IF !VALTYPE(ODLGGUI)=="O"  //SE O OBJETO JÁ FOI CRIADO
	RETURN NIL
ENDIF

NVALBASOG := 0
NVALEQUO  := 0
NVALBASTO := 0
NVALTUR1O := 0
NVALTUR2O := 0
NVALTUR3O := 0
NVALTACO  := 0
NVALISSO  := 0
NVALCOBRO := 0
NVALTOTO  := 0
NVALRENO  := 0
NVALCUSO  := 0

IF EMPTY(ACOLSTURNO) .OR. EMPTY(OTURNO_COLS)
	SX3->(DBSETORDER(1))
	SX3->(DBSEEK("FPE"))
	WHILE SX3->(!EOF()) .AND. SX3->X3_ARQUIVO == "FPE"
		IF X3USO(SX3->X3_USADO) .AND. CNIVEL >= SX3->X3_NIVEL
		  	IF ! SX3->X3_CAMPO $ "FPE_DIASEM|FPE_VROPER"
	         	 NUSADO++
		         AADD(AHEADERAUX, {TRIM(SX3->X3_TITULO),;    // 01 - TITULO
		                                SX3->X3_CAMPO  ,;    // 02 - NOME DO CAMPO
		                                SX3->X3_PICTURE,;    // 03 - MASCARA DO CAMPO
		                                SX3->X3_TAMANHO,;    // 04 - TAMANHO
		                                SX3->X3_DECIMAL,;    // 05 - DECIMAIS
		                                SX3->X3_VALID  ,;    // 06 - VALIDACAO
		                                SX3->X3_USADO  ,;    // 07 - USADO
		                                SX3->X3_TIPO   ,;    // 08 - TIPO DO CAMPO
		                                ""             ,;    // 09 - ALIAS
		                                SX3->X3_CONTEXT})    // 10 - VIRTUAL OU REAL
			ENDIF
	 	ENDIF
	    SX3->(DBSKIP())
	ENDDO

	LTURVAZIO:=.T.
	DBSELECTAREA("FPE")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FPE")+CPROJET)

	WHILE !FPE->(EOF()) .AND. FPE->FPE_PROJET == CPROJET
		NCONT++
		ACOLSAUX := {}
		AADD(ACOLSTURNO , {})
		AADD(ACOLSAUX , {FPE_PROJET , FPE_OBRA , FPE_FROTA , FPE_SEQGUI , FPE_TURNO , FPE_MINDIT , FPE_HRINIT , FPE_HOFIMT , FPE_VALTUR , FPE_PORCEN , FPE_TIPOSE , .F.})
		ACOLSTURNO[NCONT] := ACOLSAUX
		FPE->(DBSKIP())
	ENDDO
ENDIF

FOR NX := 1 TO LEN(OGUI_COLS)
	IF COBRA == OGUI_COLS[NX, GDFIELDPOS("FP4_OBRA",ODLGGUI:AHEADER)]
		NVALBASOG += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR" })]
		NMOBAUX   += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
		NDESAUX   += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
		NSEGAUX   += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})]
		NVALTACO  += OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]

		NVALMOBO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRMOB" })]
		NVALDESO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRDES" })]
		NVALSEGO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRSEGU"})]
		CTIPOISSO := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPISS" })]
		CTIPOSEGO := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TPSEGU"})]
		CTIPOCAO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_TIPOCA"})]
		NPREDIAO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PREDIA"})]
		NVRHORO   := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRHOR" })]
		NMINDIAO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINDIA"})]
		NMINMESO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_MINMES"})]
		NQTMESO   := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTMES" })]
		NQTDIAO   := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_QTDIA" })]
		NPERISSO  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_PERISS"})]
		NPESOAUX  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_VRPESO"})]
		CSEQGAUX  := OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_SEQGUI"})]

		IF NQTMESO == 0 .AND. NQTDIAO == 0
			DO CASE
			CASE CTIPOCAO == "H"
				NV1 := (NPREDIAO*NVRHORO)	// * NMINDIA
			CASE CTIPOCAO == "D"
				NV1 := (NPREDIAO*NVRHORO)	// * NMINDIA
			CASE CTIPOCAO == "M"
				NV1 := (NPREDIAO*NVRHORO) 	// * NMINMES
			CASE CTIPOCAO == "F"
				NV1 := NVRHORO
			OTHERWISE
				NV1 := 0
			ENDCASE
		ELSE
			DO CASE
			CASE CTIPOCAO == "H"
				NV1 := (NQTMESO*NMINMESO*NVRHORO)+(NQTDIAO*NMINDIAO*NVRHORO)
			CASE CTIPOCAO == "D"
				NV1 := (NQTMESO*NMINMESO*NVRHORO)+(NQTDIAO*NMINDIAO*NVRHORO)
			CASE CTIPOCAO == "M"
				NV1 := (NQTMESO*NMINMESO*NVRHORO)+(NQTDIAO*NMINDIAO*NVRHORO)
			CASE CTIPOCAO == "F"
				NV1 := NVRHORO
			OTHERWISE
				NV1 := 0
			ENDCASE
		ENDIF

		NVALEQUO += NV1

		NCOBRAUX := 0
		FOR NI := 1 TO LEN(ORES_COLS)
			IF COBRA == ORES_COLS[NI, GDFIELDPOS("FP6_OBRA",ODLGRES:AHEADER)] .AND. OGUI_COLS[NX][ASCAN(ODLGGUI:AHEADER,{|X|ALLTRIM(X[2])=="FP4_SEQGUI" })]==ORES_COLS[NI, GDFIELDPOS("FP6_SEQGUI",ODLGRES:AHEADER)]
				NCOBRAUX += ORES_COLS[NI, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
			ENDIF
		NEXT NI

		NBASISSO := NTURNOAUX+NVALMOBO+NVALDESO+NPESOAUX+NVALSEGO+NCOBRAUX+NV1
		NISSAUX  := LOCA00158(NBASISSO,NPERISSO,CTIPOISSO)  //CALCULA O ISS DOS GUINDASTES
		NVALISSO += NISSAUX

		IF CTIPOISSO == "I"  //I=INCLUSO, N=N/A, C=CLIENTE
			NVALTOTO += NVALMOBO + NVALDESO + NVALSEGO + NPESOAUX		//+NCOBRAUX
		ELSE
			NVALTOTO += NVALMOBO + NVALDESO + NISSAUX + NVALSEGO + NPESOAUX		//+NCOBRAUX
		ENDIF

	ENDIF
NEXT NX

FOR NI := 1 TO LEN(ORES_COLS)
	IF COBRA==ORES_COLS[NI, GDFIELDPOS("FP6_OBRA",ODLGRES:AHEADER)]
		NVALCUSO  += ORES_COLS[NI, GDFIELDPOS("FP6_VALOR",ODLGRES:AHEADER)]
		NVALCOBRO += ORES_COLS[NI, GDFIELDPOS("FP6_VALCOB",ODLGRES:AHEADER)]
	ENDIF 
NEXT NI

NVALEQUO  += NVALCOBRO

NVALSEGO  := NSEGAUX
NVALMOBO  := NMOBAUX
NVALDESO  := NDESAUX

NVALBASTO := NVALEQUO 		 //VR.BASE TOTAL (GUINDASTE)
NVALTOTO  += NVALBASTO

NVALRENO  := NVALTOTO-NVALCUSO

OVALBASOG:REFRESH()
OVALBASTO:REFRESH()
OVALTUR1O:REFRESH()
OVALTUR2O:REFRESH()
OVALTUR3O:REFRESH()
OVALMOBO:REFRESH()
OVALDESO:REFRESH()
OVALSEGO:REFRESH()
OVALTACO:REFRESH()
OVALISSO:REFRESH()
OVALTOTO:REFRESH()
OVALCUSO:REFRESH()

IF LTURVAZIO 
	ACOLSTURNO := {} 
ENDIF 

RETURN NIL 


/*/{PROTHEUS.DOC} FCADZAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCADZAN(CALIAS) 
// ======================================================================= \\
// CADASTRO DE ESCOLTA - ZAN 

PRIVATE CCADASTRO := "CADASTRO DE ESCOLTA"
PRIVATE AROTINA   := MENUZAN()
PRIVATE CDELFUNC  := "U_A050VLDEL()"

DBSELECTAREA(CALIAS) 
DBSETORDER(1) 

MBROWSE(6,1,22,75,CALIAS) 

RETURN 


/*/{PROTHEUS.DOC} CADZANI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00183(CALIAS , NREG , NOPC) 
// ======================================================================= \\

LOCAL ACPOENCH   := {}
LOCAL CALIASE    := CALIAS
LOCAL AALTERENCH := {}
LOCAL LOK        := .F.
LOCAL ABUTTONS   := {}
LOCAL ATFOLDER	 := {}
LOCAL NX         := 0 

//>>MSNEWGETDADOS
LOCAL CLINOK     := "ALLWAYSTRUE"
LOCAL CTUDOOK    := "ALLWAYSTRUE"
LOCAL CINICPOS   := "+ZAN_ITEM"
LOCAL NFREEZE    := 000
LOCAL CFIELDOK   := "ALLWAYSTRUE"
LOCAL CSUPERDEL  := ""
LOCAL CDELOK     := "ALLWAYSTRUE"
//CAL AALTERGDA  := {}
LOCAL NUSADO     := 0
LOCAL NOPCX      := NOPC
LOCAL AHEADERZAN := {}
LOCAL ACOLSZAN   := {}
LOCAL NCOLS      := 0
LOCAL ACOMBO	 := {}
LOCAL ACOMBO2	 := {}
LOCAL ACOMBO3	 := {}
LOCAL LEDIT		 := NOPC==3 .OR. NOPC==4
//<<MSNEWGETDADOS

//POSIÇÕES
LOCAL AOBJECTS  := {}
LOCAL APOSOBJ   := {}
LOCAL AINFO		:= {}
LOCAL ASIZE		:= MSADVSIZE()
LOCAL NGD1
LOCAL NGD2
LOCAL NGD3
LOCAL NGD4

PRIVATE OTFOLDER   := NIL
PRIVATE ODLGZAN    := NIL
PRIVATE OGETD1     := NIL
PRIVATE OENCH      := NIL
PRIVATE CFILZAN    := ""
PRIVATE AALTERAZAN := {}
PRIVATE ATELA[0][0]
PRIVATE AGETS[0]

PRIVATE CCODIGO	:= IIF( NOPC==3 , CRIAVAR("ZAN_COD")    , ZAN->ZAN_COD    )
PRIVATE CALEMOA	:= IIF( NOPC==3 , CRIAVAR("ZAN_ALEMOA") , ZAN->ZAN_ALEMOA )
PRIVATE CBLQSER	:= IIF( NOPC==3 , CRIAVAR("ZAN_BLOQSR") , ZAN->ZAN_BLOQSR )
PRIVATE CTPROD	:= IIF( NOPC==3 , CRIAVAR("ZAN_TPROD")  , ZAN->ZAN_TPROD  )
PRIVATE CTPPIST	:= IIF( NOPC==3 , CRIAVAR("ZAN_TPPIST") , ZAN->ZAN_TPPIST )

PRIVATE OALEMOA
PRIVATE OBLQSER
PRIVATE OTPROD
PRIVATE OTPPIST

AADD( AOBJECTS, { 100, 25, .T., .T. } )
AADD( AOBJECTS, { 100, 75, .T., .T. } )
AINFO   := { ASIZE[1] , ASIZE[2] , ASIZE[3] , ASIZE[4] , 3 , 3 } 
APOSOBJ := MSOBJSIZE( AINFO , AOBJECTS , .T. )

// --> DEFINE AS POSICOES DA GETDADOS A PARTIR DO FOLDER
NGD1 := 2
NGD2 := 2
NGD3 := APOSOBJ[2,3]-APOSOBJ[2,1]-15
NGD4 := APOSOBJ[2,4]-APOSOBJ[2,2]-4

DBSELECTAREA("SX3")
DBSETORDER(1)
DBSEEK(CALIASE)
WHILE !SX3->(EOF()) .AND. SX3->X3_ARQUIVO == CALIASE
	IF !(SX3->X3_CAMPO $ "ZAN_FILIAL") .AND. CNIVEL >= SX3->X3_NIVEL .AND. X3USO(SX3->X3_USADO) .AND. ALLTRIM(SX3->X3_CAMPO) $ "ZAN_COD|ZAN_ALEMOA|ZAN_BLOQSR|ZAN_TPROD|ZAN_TPPIST"
		AADD(ACPOENCH,SX3->X3_CAMPO)
	ENDIF
	SX3->(DBSKIP())
ENDDO
AALTERENCH := ACLONE(ACPOENCH)

//>>>ITENS:MSNEWGETDADOS ZAN
DBSELECTAREA("SX3")
DBSETORDER(1)
DBSEEK("ZAN")
AHEADERZAN := {}
WHILE !SX3->(EOF()).AND.(X3_ARQUIVO == "ZAN" )
	IF X3USO(X3_USADO).AND. CNIVEL >= X3_NIVEL .AND. !(ALLTRIM(SX3->X3_CAMPO) $  "ZAN_COD|ZAN_ALEMOA|ZAN_BLOQSR|ZAN_TPROD|ZAN_TPPIST")
		NUSADO++ //:= NUSADO+1 

		AADD(AHEADERZAN,{ ALLTRIM(X3_TITULO),;
					X3_CAMPO   ,;
					X3_PICTURE ,;
					X3_TAMANHO ,;
					X3_DECIMAL ,;
					X3_VALID   ,;
					X3_USADO   ,;
					X3_TIPO    ,;
					X3_F3      ,;
					X3_CONTEXT } )
	ENDIF
	SX3->(DBSKIP())
ENDDO

IF NOPC == 3 // INCLUIR
	ACOLSZAN            := {ARRAY(NUSADO+1)}
	ACOLSZAN[1,NUSADO+1] := .F.
	FOR NX := 1 TO NUSADO
		ACOLSZAN[1,NX] := CRIAVAR(AHEADERZAN[NX,2])
	NEXT NX
	ACOLSZAN[1][1] := '0001'
ELSE
	ACOLSZAN:={}
	DBSELECTAREA("ZAN")
	DBSETORDER(1)
	DBSEEK(XFILIAL("ZAN")+ZAN->ZAN_COD)
	WHILE !ZAN->(EOF()) .AND. ZAN->ZAN_FILIAL == XFILIAL("ZAN") .AND. ZAN->ZAN_COD == CCODIGO
		AADD(ACOLSZAN,ARRAY(NUSADO+1))
		NCOLS++
		FOR NX := 1 TO NUSADO
			IF (AHEADERZAN[NX][10] != "V")
				ACOLSZAN[NCOLS][NX] := FIELDGET(FIELDPOS(AHEADERZAN[NX][2]))
			ELSE
				ACOLSZAN[NCOLS][NX] := CRIAVAR(AHEADERZAN[NX][2],.T.)
			ENDIF
		NEXT NX
		ACOLSZAN[NCOLS][NUSADO+1] := .F.
		DBSELECTAREA("ZAN")
		AADD(AALTERAZAN,RECNO())
		ZAN->(DBSKIP())
	ENDDO
ENDIF

ODLGZAN := MSDIALOG():NEW(ASIZE[7],ASIZE[1],ASIZE[6],ASIZE[5],CCADASTRO,,,,,,,,,.T.)
	AADD(ACOMBO,"S=SIM")
	AADD(ACOMBO,"N=NAO")
	
	// 1=MUNICIPAL;2=ESTADUAL;3=FEDERAL
	AADD(ACOMBO2,"M=MUNICIPAL")
	AADD(ACOMBO2,"E=ESTADUAL")
	AADD(ACOMBO2,"F=FEDERAL")
	// 1=SIMPLES;2=DUPLA;3=AMBAS
	AADD(ACOMBO3,"S=SIMPLES")
	AADD(ACOMBO3,"D=DUPLA")
	AADD(ACOMBO3,"A=AMBAS")
	
	@ 0.6,01.0  SAY OEMTOANSI("Código") OF ODLGZAN
	@ 0.5,06.0  MSGET    CCODIGO	PICTURE PESQPICT("ZAN","ZAN_COD")  VALID CHECKSX3("ZAN_COD") WHEN(.F.) 
	@ 0.6,12.0  SAY      OEMTOANSI("ALEMOA ?")       OF ODLGZAN
	@ 0.5,17.0  COMBOBOX OALEMOA VAR CALEMOA ITEMS ACOMBO  SIZE 50,010 VALID FZANVAL("ALEMOA")   WHEN(LEDIT) 
	@ 0.6,24.0  SAY      OEMTOANSI("Bloq.Serra ?")   OF ODLGZAN
	@ 0.5,29.0  COMBOBOX OBLQSER VAR CBLQSER ITEMS ACOMBO  SIZE 50,010 VALID FZANVAL("BLOQSR")   WHEN(LEDIT) 
	@ 0.6,36.0  SAY      OEMTOANSI("Tipo Rodovia ?") OF ODLGZAN
	@ 0.5,41.0  COMBOBOX OTPROD  VAR CTPROD  ITEMS ACOMBO2 SIZE 50,010 WHEN(LEDIT)
	@ 0.6,48.0  SAY      OEMTOANSI("Tipo Pista ?")   OF ODLGZAN
	@ 0.5,53.0  COMBOBOX OTPPIST VAR CTPPIST ITEMS ACOMBO3 SIZE 50,010 WHEN(LEDIT)

	ATFOLDER := {"ITENS"} 
	OTFOLDER := TFOLDER():NEW(APOSOBJ[2,1],APOSOBJ[2,2],ATFOLDER,,ODLGZAN,,,,.T.,,APOSOBJ[2,4]-APOSOBJ[2,2],APOSOBJ[2,3]-APOSOBJ[2,1])
	OGETD1   := MSNEWGETDADOS():NEW(NGD1,NGD2,NGD3,NGD4, IIF(NOPCX==2, 0, GD_UPDATE + GD_INSERT + GD_DELETE),;
								CLINOK,CTUDOOK,CINICPOS,/*AALTERGDA*/,NFREEZE,MAXGETDAD,CFIELDOK, CSUPERDEL,;
								CDELOK, OTFOLDER:ADIALOGS[1], AHEADERZAN, ACOLSZAN)

	ODLGZAN:LCENTERED := .T.
ACTIVATE MSDIALOG ODLGZAN ON INIT (ENCHOICEBAR(ODLGZAN,{||IIF(OBRIGATORIO(AGETS,ATELA) .AND. VALIDZAN(NOPC),(LOK:=.T.,ODLGZAN:END()),.F.)},{||ODLGZAN:END()},,@ABUTTONS))

IF LOK .AND. NOPC != 2
	BEGIN TRANSACTION
		GRAVAZAN(NOPC)
		EVALTRIGGER()
		IF __LSX8
			CONFIRMSX8()
		ENDIF
	END TRANSACTION
ELSE
	IF __LSX8 
		ROLLBACKSX8() 
	ENDIF 
ENDIF 

RETURN NIL 


/*/{PROTHEUS.DOC} FZANVAL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FZANVAL(COPC)
// ======================================================================= \\

IF     COPC == "ALEMOA"
	IF CALEMOA == "S"
		CBLQSER := "N"
		OBLQSER:SETENABLE(.F.)
		OBLQSER:REFRESH()
	ELSE
		OBLQSER:SETENABLE(.T.)
		OBLQSER:REFRESH()
	ENDIF
ELSEIF COPC == "BLOQSR"
	IF CBLQSER == "S"
		CALEMOA := "N"
		OALEMOA:SETENABLE(.F.)
		OALEMOA:REFRESH()
	ELSE
		OALEMOA:SETENABLE(.T.)
		OALEMOA:REFRESH()
	ENDIF
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} VALIDZAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION VALIDZAN(NOPC)
// ======================================================================= \\
// VALIDAÇÃO BOTÃO CONFIRMAR

LOCAL AAREA		:= GETAREA()
LOCAL AAREAZAN	:= ZAN->(GETAREA())
LOCAL LRET		:= .T.

IF NOPC <> 3 .AND. NOPC <> 4
	RETURN LRET
ENDIF

DBSELECTAREA("ZAN")
DBSETORDER(2)
IF DBSEEK(XFILIAL("ZAN")+CALEMOA+CBLQSER+CTPROD) //.AND. CTPPIST == "A"//AMBAS
	WHILE !ZAN->(EOF()) .AND. ZAN->(ZAN_ALEMOA+ZAN_BLOQSR+ZAN_TPROD) == CALEMOA+CBLQSER+CTPROD
		IF ZAN->ZAN_TPPIST == CTPPIST .OR. CTPPIST == "A" .OR. ZAN->ZAN_TPPIST == "A"
			IF CCODIGO != ZAN->ZAN_COD
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Já existe um cadastro com esses dados, troque uma das chaves principais (ALEMOA,BLOQ.SERRA,TIPO ROD.,TIPO PISTA)"})
				LRET := .F.
				EXIT
			ENDIF
		ENDIF
		ZAN->(DBSKIP())
	ENDDO
ENDIF

RESTAREA(AAREAZAN)
RESTAREA(AAREA)

RETURN LRET 


/*/{PROTHEUS.DOC} ZANVALID
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00184(CCAMPO)
// ======================================================================= \\
// --> CHAMADA NO  CAMPO : ZAN_NIVEL 

LOCAL LRET	 := .T.
LOCAL NNIVEL := M->ZAN_NIVEL
LOCAL NX     := 0 

IF CCAMPO == "ZAN_NIVEL"
	FOR NX := 1 TO LEN(OGETD1:ACOLS)
		IF OGETD1:ACOLS[NX,GDFIELDPOS("ZAN_NIVEL", OGETD1:AHEADER)] == NNIVEL .AND. NX !=OGETD1:NAT
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Este nível já foi informado."})
			LRET := .F.
			EXIT
		ENDIF
	NEXT NX
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} GRAVAZAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GRAVAZAN(NOPC)
// ======================================================================= \\

LOCAL   NUSADOZAN := 0
LOCAL   NX        := 0 
LOCAL   NI        := 0 

PRIVATE BCAMPO    := { |NFIELD| FIELDNAME(NFIELD) }

NUSADOZAN := LEN(OGETD1:AHEADER) + 1

IF     NOPC == 3 			// INCLUI
	DBSELECTAREA("ZAN")
	DBSETORDER(1)
	FOR NX := 1 TO LEN(OGETD1:ACOLS)
	 //	IF !OGET02:ACOLS[NX][NUSADO]
		IF !OGETD1:ACOLS[1,LEN(OGETD1:AHEADER)+1]
				RECLOCK("ZAN",.T.)
			FOR NI := 1 TO LEN(OGETD1:AHEADER)
				FIELDPUT(FIELDPOS(TRIM(OGETD1:AHEADER[NI,2])),OGETD1:ACOLS[NX,NI])
			NEXT NI 
			ZAN->ZAN_FILIAL := XFILIAL("ZAN")
			ZAN->ZAN_COD  	:= CCODIGO
			ZAN->ZAN_ALEMOA	:= CALEMOA
			ZAN->ZAN_BLOQSR	:= CBLQSER
			ZAN->ZAN_TPROD	:= CTPROD
			ZAN->ZAN_TPPIST	:= CTPPIST
			ZAN->(MSUNLOCK()) 
		ENDIF
	NEXT NX

ELSEIF NOPC == 4 			// ALTERA
	DBSELECTAREA("ZAN")
	DBSETORDER(1)
	DBSEEK(XFILIAL("ZAN")+CCODIGO)
	WHILE !ZAN->(EOF()) .AND. ZAN->(ZAN_FILIAL+ZAN_COD) == XFILIAL("ZAN")+CCODIGO
	    RECLOCK("ZAN",.F.)
	    ZAN->(DBDELETE()) 
	    ZAN->(MSUNLOCK()) 
		ZAN->(DBSKIP())
	ENDDO

	FOR NX := 1 TO LEN(OGETD1:ACOLS)
		IF !OGETD1:ACOLS[NX][NUSADOZAN] //SE A LINHA NAO ESTIVER DELETADA
			RECLOCK("ZAN",.T.)
			FOR NI := 1 TO LEN(OGETD1:AHEADER)
				FIELDPUT(FIELDPOS(TRIM(OGETD1:AHEADER[NI,2])),OGETD1:ACOLS[NX,NI])
			NEXT NI 
			ZAN->ZAN_FILIAL := XFILIAL("ZAN")
			ZAN->ZAN_COD  	:= CCODIGO
			ZAN->ZAN_ALEMOA	:= CALEMOA
			ZAN->ZAN_BLOQSR	:= CBLQSER
			ZAN->ZAN_TPROD	:= CTPROD
			ZAN->ZAN_TPPIST	:= CTPPIST
			LGRAVOU := .T.
		ENDIF
		ZAN->(MSUNLOCK())
	NEXT NX

ELSEIF NOPC == 5 			// EXCLUI
	DBSELECTAREA("ZAN")
	DBSETORDER(1)
	DBSEEK(XFILIAL("ZAN")+CCODIGO)
	WHILE !ZAN->(EOF()) .AND. ZAN->(ZAN_FILIAL+ZAN_COD) == XFILIAL("ZAN")+CCODIGO
	    RECLOCK("ZAN",.F.)
	    ZAN->(DBDELETE()) 
	    ZAN->(MSUNLOCK()) 
		ZAN->(DBSKIP())
	ENDDO

ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} MENUZAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION MENUZAN()
// ======================================================================= \\

LOCAL AROTINA := {}

AADD(AROTINA , {"PESQUISAR"  , "AXPESQUI"  , 0 , 1})
AADD(AROTINA , {"VISUALIZAR" , "LOCA00183" , 0 , 2})
AADD(AROTINA , {"INCLUIR"    , "LOCA00183" , 0 , 3})
AADD(AROTINA , {"ALTERAR"    , "LOCA00183" , 0 , 4})
AADD(AROTINA , {"EXCLUIR"    , "LOCA00183" , 0 , 5})

RETURN(AROTINA)


/*/{PROTHEUS.DOC} GETSTRZAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETSTRZAN(CTIPORO , CTIPOPI , CCAMPO , CVAZIO) 
// ======================================================================= \\

LOCAL AAREA		:= GETAREA()
LOCAL CQUERY	:= ""
LOCAL LSEGUE	:= .F.
LOCAL CRET		:= "N"

LOCAL NCOMPZAN 	:= 0
LOCAL NLARGZAN 	:= 0
LOCAL NALTUZAN  := 0
LOCAL NPESOZAN  := 0

IF     CVAZIO == "V"   // VAZIO
	// CONJ. TRANSP
	NCOMPZAN  := N2COMP
	NLARGZAN  := N2LARG
	NALTUZAN  := N2ALTU
 	NPESOZAN  := N2PESO
ELSEIF CVAZIO == "C"   // CARREGADO
	// DIMENS. TOT
	NCOMPZAN  := N3COMP
	NLARGZAN  := N3LARG
	NALTUZAN  := N3ALTU
 	NPESOZAN  := N3PESO
ENDIF

IF SELECT("TRB01") > 0
	TRB01->(DBCLOSEAREA())
ENDIF
CQUERY := " SELECT ZAN.* "
CQUERY += " FROM "+RETSQLNAME("ZAN")+" ZAN "
CQUERY += " WHERE ZAN.D_E_L_E_T_<>'*' "
CQUERY += "   AND ZAN.ZAN_FILIAL = '"+XFILIAL("ZAN")+"' "
CQUERY += "   AND ZAN.ZAN_ALEMOA = 'N' AND ZAN.ZAN_BLOQSR = 'N' "
CQUERY += "   AND ZAN.ZAN_TPPIST IN ('"+CTIPOPI+"','A') "
CQUERY += "   AND ZAN.ZAN_TPROD  = '"+CTIPORO+"' "
CQUERY += " ORDER BY ZAN.ZAN_NIVEL DESC "
CQUERY := CHANGEQUERY(CQUERY)
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TRB01" , .F. , .T.) 

WHILE TRB01->(!EOF())
	LSEGUE := .F.
	IF  (NCOMPZAN >= TRB01->ZAN_COMPDE .AND. NCOMPZAN <= TRB01->ZAN_COMPAT) .OR. ;
		(NLARGZAN >= TRB01->ZAN_LARGDE .AND. NLARGZAN <= TRB01->ZAN_LARGAT) .OR. ;
		(NALTUZAN >= TRB01->ZAN_ALTUDE .AND. NALTUZAN <= TRB01->ZAN_ALTUAT) .OR. ;
		(NPESOZAN >= TRB01->ZAN_PESODE .AND. NPESOZAN <= TRB01->ZAN_PESOAT)
		LSEGUE := .T.
	ENDIF
	IF ! LSEGUE
		TRB01->(DBSKIP())
		LOOP
	ENDIF
	IF     CCAMPO == "FPD_CET" .AND. TRB01->ZAN_UTLCET == "S"
		CRET := "S"
		EXIT
	ELSEIF CCAMPO == "FPD_DER" .AND. TRB01->ZAN_UTLDER == "S"
		CRET := "S"
		EXIT
	ELSEIF CCAMPO == "FPD_DNIT" .AND. TRB01->ZAN_UTLDNT == "S"
		CRET := "S"
		EXIT
	ENDIF

	TRB01->(DBSKIP())
ENDDO

IF SELECT("TRB01") > 0
	TRB01->(DBCLOSEAREA())
ENDIF

RESTAREA(AAREA)

RETURN CRET


/*/{PROTHEUS.DOC} GETINTZAN
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETINTZAN(CTIPORO , CTIPOPI , CCAMPO , NDISTAN , CVAZIO)
// ======================================================================= \\

LOCAL AAREA		:= GETAREA()
LOCAL CQUERY	:= ""
LOCAL LSEGUE	:= .F.
LOCAL NRET		:= 0

LOCAL NCOMPZAN 	:= 0
LOCAL NLARGZAN 	:= 0
LOCAL NALTUZAN  := 0
LOCAL NPESOZAN  := 0

IF CVAZIO == "V"   //VAZIO
	//CONJ. TRANSP
	NCOMPZAN  := N2COMP
	NLARGZAN  := N2LARG
	NALTUZAN  := N2ALTU
 	NPESOZAN  := N2PESO
ELSEIF CVAZIO == "C"   //CARREGADO
	//DIMENS. TOT
	NCOMPZAN  := N3COMP
	NLARGZAN  := N3LARG
	NALTUZAN  := N3ALTU
 	NPESOZAN  := N3PESO
ENDIF

IF SELECT("TRB01") > 0
	TRB01->(DBCLOSEAREA())
ENDIF
CQUERY := " SELECT ZAN.* "
CQUERY += " FROM "+RETSQLNAME("ZAN")+" ZAN "
CQUERY += " WHERE  ZAN.D_E_L_E_T_ <> '*' "
CQUERY += "   AND  ZAN.ZAN_FILIAL =  '"+XFILIAL("ZAN")+"' "
CQUERY += "   AND  ZAN.ZAN_ALEMOA =  'N' AND ZAN.ZAN_BLOQSR = 'N' "
CQUERY += "   AND  ZAN.ZAN_TPPIST IN ('"+CTIPOPI+"','A') "
CQUERY += "   AND  ZAN.ZAN_TPROD  =  ('"+CTIPORO+"') "
CQUERY += " ORDER BY ZAN.ZAN_NIVEL DESC "
CQUERY := CHANGEQUERY(CQUERY)
DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TRB01" , .F. , .T.) 

WHILE TRB01->(!EOF())
	LSEGUE := .F.
	IF  (NCOMPZAN >= TRB01->ZAN_COMPDE .AND. NCOMPZAN <= TRB01->ZAN_COMPAT)  .OR.  (NLARGZAN >= TRB01->ZAN_LARGDE .AND. NLARGZAN <= TRB01->ZAN_LARGAT) .OR. ; 
		(NALTUZAN >= TRB01->ZAN_ALTUDE .AND. NALTUZAN <= TRB01->ZAN_ALTUAT)  .OR.  (NPESOZAN >= TRB01->ZAN_PESODE .AND. NPESOZAN <= TRB01->ZAN_PESOAT)
		LSEGUE := .T.
	ENDIF
	IF !LSEGUE
		TRB01->(DBSKIP())
		LOOP
	ENDIF
	IF CCAMPO == "FPD_CRED" .AND. CVAZIO == "C"
		NRET := TRB01->ZAN_QTCRED
		EXIT
	ELSEIF CCAMPO == "FPD_TEMPO"
		NRET := NDISTAN / IIF( TRB01->ZAN_KMDIA != 0, TRB01->ZAN_KMDIA, 1 )
		EXIT
	ENDIF
	TRB01->(DBSKIP())
ENDDO

IF SELECT("TRB01") > 0
	TRB01->(DBCLOSEAREA())
ENDIF

RESTAREA(AAREA)

RETURN NRET


/*/{PROTHEUS.DOC} FDUPLITRA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FDUPLITRA()
// ======================================================================= \\
// --> CHAMADA: MENU - "DUPLICA VIAGEM" 

LOCAL NX
LOCAL _F
LOCAL CCAMPO
LOCAL CCAMPOGET
LOCAL LOK       := .F.
LOCAL _NNUMDUP  := 0

IF !OFOLDER:NOPTION==NFOLDERTRA
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Favor selecionar a ABA viagens."})
	RETURN .F.
ENDIF

//@ 0,0   TO 90,250 MSDIALOG ODLGQ TITLE "DUPLICA A VIAGEM SELECIONADA"
DEFINE MSDIALOG ODLGQ TITLE "DUPLICA A VIAGEM SELECIONADA" FROM 0,0 TO 90,250

	@ 00,01 TO 03,15
	@ 001,002 SAY "Qquantidade de linhas a duplicar:"
	@ 001,012 GET _NNUMDUP PICTURE "999" WHEN FWHEN()
	@ 025,060 BMPBUTTON TYPE 1 ACTION ( LOK := .T., CLOSE(ODLGQ) )
	@ 025,085 BMPBUTTON TYPE 2 ACTION CLOSE(ODLGQ)
ACTIVATE MSDIALOG ODLGQ CENTERED

IF ! LOK .OR. _NNUMDUP < 1
	RETURN .F.
ENDIF

IF ! MSGYESNO("DUPLICA A VIAGEM " +CSEQTRA+ " - "+ ALLTRIM(STR(_NNUMDUP)) + " VEZES ??" , "GPO - LOCC001.PRW") 
	RETURN .F.
ENDIF

FOR _F := 1 TO _NNUMDUP
	AADD(ODLGTRA:ACOLS,ACLONE(ODLGTRA:ACOLS[ODLGTRA:NAT]))

	CCAMPO    := "ZA6_SEQTRA"
	CCAMPOGET := ODLGTRA:ACOLS[LEN(ODLGTRA:ACOLS)-1][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	ODLGTRA:ACOLS[LEN(ODLGTRA:ACOLS)][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))

	CCAMPO    := "ZA6_OBRA"
	CCAMPOGET := ODLGTRA:ACOLS[LEN(ODLGTRA:ACOLS)-1][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]
	ODLGTRA:ACOLS[LEN(ODLGTRA:ACOLS)][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])==CCAMPO})]   := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
	ODLGTRA:ACOLS[LEN(ODLGTRA:ACOLS)][ASCAN(ODLGTRA:AHEADER,{|X|ALLTRIM(X[2])=="ZA6_AS"})] := "" 

	// DUPLICA CARGAS
	FOR NX := 1 TO LEN(OCAR_COLS)
		IF OCAR_COLS[NX,ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"})] == COBRA .AND. OCAR_COLS[NX,ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] == CSEQTRA
			AADD(OCAR_COLS,ACLONE(OCAR_COLS[NX]))

			OCAR_COLS[LEN(OCAR_COLS)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_OBRA"})]   := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			OCAR_COLS[LEN(OCAR_COLS)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_SEQTRA"})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			OCAR_COLS[LEN(OCAR_COLS)][ASCAN(ODLGCAR:AHEADER,{|X|ALLTRIM(X[2])=="ZA7_AS"})]     := ""
		ENDIF
	NEXT NX

	// DUPLICA CONJ.TRANSP.
	FOR NX := 1 TO LEN(OCON_COLS)
		IF OCON_COLS[NX,ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"})] == COBRA .AND. OCON_COLS[NX,ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] == CSEQTRA
			AADD(OCON_COLS,ACLONE(OCON_COLS[NX]))

			OCON_COLS[LEN(OCON_COLS)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_OBRA"})]   := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			OCON_COLS[LEN(OCON_COLS)][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_SEQTRA"})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
		ENDIF
	NEXT NX

	// DUPLICA TRECHOS
	FOR NX := 1 TO LEN(OTRE_COLS)
		IF OTRE_COLS[NX,ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"})] == COBRA .AND. OTRE_COLS[NX,ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})] == CSEQTRA
			AADD(OTRE_COLS,ACLONE(OTRE_COLS[NX]))

			OTRE_COLS[LEN(OTRE_COLS)][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_OBRA"})]   := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			OTRE_COLS[LEN(OTRE_COLS)][ASCAN(ODLGTRE:AHEADER,{|X|ALLTRIM(X[2])=="FPD_SEQTRA"})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
		ENDIF
	NEXT NX

	IF SUPERGETMV("MV_LOCX227",.F.,.T.)
		// DUPLICA RESPONSABILIDADES
		FOR NX := 1 TO LEN(ORES_COLS)
			IF ORES_COLS[NX,ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == COBRA .AND. ORES_COLS[NX,ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] == CSEQTRA
				AADD(ORES_COLS,ACLONE(ORES_COLS[NX]))

				ORES_COLS[LEN(ORES_COLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})]   := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
				ORES_COLS[LEN(ORES_COLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQGUI"})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			ENDIF
		NEXT NX
	ENDIF

	// DUPLICA CUSTOS
	FOR NX := 1 TO LEN(OCUS_COLS)
		IF OCUS_COLS[NX,ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})] == COBRA .AND. OCUS_COLS[NX,ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})] == CSEQTRA
			AADD(OCUS_COLS,ACLONE(OCUS_COLS[NX]))

			OCUS_COLS[LEN(OCUS_COLS)][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_OBRA"})]   := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
			OCUS_COLS[LEN(OCUS_COLS)][ASCAN(ODLGCUS:AHEADER,{|X|ALLTRIM(X[2])=="FQ8_SEQTRA"})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
		ENDIF
	NEXT NX
NEXT _F

RETURN .T.


/*/{PROTHEUS.DOC} VALIDZAP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00185(CCAMPO)		// VALIDAÇÃO TABELA ZAP
// ======================================================================= \\
// --> CHAMADA NOS CAMPOS: ZAP_DE E ZAP_ATE 

LOCAL LRET := .T.
/*
LOCAL AAREA		:= GETAREA()
LOCAL AAREAZAP	:= ZAP->(GETAREA())

IF M->ZAP_DE > M->ZAP_ATE .AND. ALLTRIM(CCAMPO) == "ZAP_ATE"
	MSGALERT("O 'KM DE' DEVE SER MENOR QUE O 'KM ATE'." , "GPO - LOCC001.PRW") 
	RETURN .F.
ENDIF

DBSELECTAREA("ZAP")
DBSETORDER(3)
DBSEEK(XFILIAL("ZAP")+M->ZAP_UF)

WHILE !ZAP->(EOF()) .AND. ZAP->ZAP_FILIAL == XFILIAL("ZAP") .AND. ZAP->ZAP_UF == M->ZAP_UF
	IF M->ZAP_DE <= ZAP->ZAP_ATE
		MSGALERT("A KM DE/ATÉ JÁ FOI INFORMADA PARA O UF: "+M->ZAP_UF , "GPO - LOCC001.PRW") 
		LRET := .F.
		EXIT
	ENDIF
	ZAP->(DBSKIP())
ENDDO

RESTAREA(AAREAZAP)
RESTAREA(AAREA)
*/
RETURN LRET


/*/{PROTHEUS.DOC} CALCSISTEM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION CALCSISTEM(AHEADER,ACOLS)
// ======================================================================= \\

LOCAL NDISTAN := 0
LOCAL CTIPORO := ""
LOCAL CTIPOPI := ""
LOCAL NTEMPO  := 0
LOCAL NCRED	  := 0
LOCAL NRESULT := 0
LOCAL CETAPA  := ""
LOCAL LPORTO  := .F.
LOCAL NTAP	  := 0 //SUPERGETMV("MV_LOCX076",.F.,45)
LOCAL NTAPFAT := 0 //GETMV("MV_LOCX076FAT")
LOCAL CBLOQSR := ""
LOCAL CALEMOA := ""
LOCAL CCET	  := ""
LOCAL NQTEIXO := 0
LOCAL CORITRE := ""
LOCAL CDESTRE := ""
LOCAL CORIG1  := ""
LOCAL CDEST1  := ""
LOCAL CVAZIO  := ""
LOCAL NX      := 0 

LOCAL NALTUCALC := 0
LOCAL NPESOCALC := 0

FOR NX := 1 TO LEN(ODLGCON:ACOLS)
	NQTEIXO += ODLGCON:ACOLS[NX][ASCAN(ODLGCON:AHEADER,{|X|ALLTRIM(X[2])=="FP8_QTEIXO"})]
NEXT NX

FOR NX := 1 TO LEN(ACOLS)
	NDISTAN := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DISTAN"})]
	CTIPORO := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]
	CTIPOPI := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPOPI"})]
	NTEMPO  := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TEMPO" })]
	NCRED	:= ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_CRED"  })]
	CETAPA  := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ETAPA" })]
	CDER    := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DER"   })]
	CDNIT   := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DNIT"  })]
	CCET    := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_CET"   })]
	CTPROD  := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_TIPORO"})]
	CESTDE  := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTDE" })]
	CESTATE := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ESTATE"})]
	NQTDPED := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_QTDPED"})]
	NVALPED := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_VALPED"})]
	CVAZIO  := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_VAZIO" })]
	NRESULT := 0
	LPORTO  := .F.

	CORIG1 := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ORIGEM" })]
	CDEST1 := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DESTIN" })]

	CORITRE := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_DE"    })]
	CDESTRE := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ATE"   })]
	CROTA   := ACOLS[NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPD_ROTA"  })]

	IF     CVAZIO == "V"
		NALTUCALC := N2ALTU
		NPESOCALC := N2PESO
	ELSEIF CVAZIO == "C"
		NALTUCALC := N3ALTU
		NPESOCALC := N3PESO
	ENDIF

	DBSELECTAREA("FP3")
	DBSETORDER(1)
	IF DBSEEK(XFILIAL("FP3")+CORIG1+CDEST1+CROTA+CETAPA)
		CBLOQSR := FP3->FP3_TEMBLO
		CALEMOA := FP3->FP3_TEMALE
	ENDIF

	NTEMPO  := ARREDTEMPO(ROUND(NTEMPO,2))

	NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_CRED",NDISTAN,CVAZIO)
	NRESULT := (NRESULT * ROUND(NTEMPO,0)) * NCRED
	ADDRESP("01" , NRESULT , CETAPA) 

	IF CDER == "S"			// CALCULO DER
		NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_DER",NDISTAN,CVAZIO)
		NRESULT := (NRESULT * NDISTAN)
		ADDRESP("02" , NRESULT , CETAPA) 
	ELSE
		ADDRESP("02" , 0       , CETAPA) 
	ENDIF

	IF CDNIT == "S"			// CALCULO DNIT
		NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_DNIT",NDISTAN,CVAZIO)
		NRESULT := (NRESULT * NDISTAN)
		ADDRESP("03" , NRESULT , CETAPA) 
	ELSE
		ADDRESP("03" , 0       , CETAPA) 
	ENDIF

	IF CTPROD == "F"		// CALCULO TUV
		NRESULT := GETCALCTUV(CESTDE , CESTATE , NDISTAN , NPESOCALC) 
		ADDRESP("04" , NRESULT , CETAPA)
	ENDIF

	IF CTPROD == "E"		// CALCULO TAP
		NRESULT := (NPESOCALC - NTAP) * NTAPFAT * NQTDPED * NVALPED
		ADDRESP("05" , NRESULT , CETAPA)
	ENDIF

	IF CBLOQSR == "S"		// CALCULO BLOQ. SERRA
		NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_BLOQSR",NDISTAN,CVAZIO)
		ADDRESP("06" , NRESULT , CETAPA)
	ELSE
		ADDRESP("06" , 0       , CETAPA)
	ENDIF

	IF CALEMOA == "S"		// CALCULO ALEMOA
		NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_ALEMOA",NDISTAN,CVAZIO)
		ADDRESP("07" , NRESULT , CETAPA)
	ELSE
		ADDRESP("07" , 0       , CETAPA)
	ENDIF

	IF CTIPORO == "M"		// CALCULO TAXAS MUNICIPAIS
		ADDRESP("08" , 0 , CETAPA , NALTUCALC) 
	ENDIF

	// CALCULO PEDAGIO
	NRESULT := (NQTDPED * NVALPED) * NQTEIXO
	ADDRESP("09" , NRESULT , CETAPA)

	// CALCULO LICENÇA
	NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_LICENC",NDISTAN,CVAZIO)
	ADDRESP("10" , NRESULT , CETAPA)

	// CALCULO TAXA PORTUÁRIA
	IF !EMPTY(CORITRE) .AND. !EMPTY(CDESTRE)
		DBSELECTAREA("FP2")
		DBSETORDER(1)
		IF DBSEEK(XFILIAL("FP2")+CORITRE)
			IF FP2->FP2_PORTO == "S"
				LPORTO := .T.
			ENDIF
		ENDIF
		IF DBSEEK(XFILIAL("FP2")+CDESTRE)
			IF FP2->FP2_PORTO == "S"
				LPORTO := .T.
			ENDIF
		ENDIF
		IF LPORTO
			NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_PORTO",CVAZIO)
			ADDRESP("11" , NRESULT , CETAPA) 
		ENDIF
	ENDIF

	IF CCET == "S"			// CALCULO CET
		NRESULT := GETCALC(CTIPORO,CTIPOPI,"FPD_CET",NDISTAN,CVAZIO)
		NRESULT := (NRESULT * ROUND(NTEMPO,0))
		ADDRESP("13" , NRESULT , CETAPA)
	ELSE
		ADDRESP("13" , 0       , CETAPA) 
	ENDIF
NEXT NX

RETURN NIL 


/*/{PROTHEUS.DOC} ARREDTEMPO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION ARREDTEMPO(NTEMPO)
// ======================================================================= \\

LOCAL NRET := 0
LOCAL CVAL := STR(NTEMPO)

CVAL := SUBSTR(CVAL,AT(".",CVAL))			// AT(".",C1) > 1
IF AT(".",CVAL) > 0
	CVAL := SUBSTR(CVAL,AT(".",CVAL)+1) 
	IF LEN(CVAL) == 1
		CVAL += "0"
	ENDIF
	IF     VAL(CVAL) > 50 .AND. VAL(CVAL) <> 0 
		NRET := ROUND(NTEMPO,0) 
	ELSEIF VAL(CVAL) < 50 .AND. VAL(CVAL) <> 0 
		NRET := ROUND(NTEMPO+1,0) 
	ENDIF
ELSE
	NRET := ROUND(NTEMPO,0)
ENDIF

RETURN NRET


/*/{PROTHEUS.DOC} ADDRESP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION ADDRESP(CID , NCUSTO , CETAPA , NALT) 
// ======================================================================= \\

LOCAL AAREA		:= GETAREA()
LOCAL AAREAZAB	:= FP7->(GETAREA())
LOCAL CCAMPOGET := ""
LOCAL NPOSCOD   := ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})
LOCAL NPOSETA	:= ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_TRECHO"})
LOCAL NPOS		:= 0
LOCAL NPOS2		:= 0

DBSELECTAREA("FP7")
DBSETORDER(2)
DBSEEK(XFILIAL("FP7")+CID)

WHILE !FP7->(EOF()) .AND. FP7->(FP7_FILIAL+FP7_ID) == XFILIAL("FP7")+CID
	NPOS := ASCAN(ODLGRES:ACOLS,{|X| ALLTRIM(X[NPOSCOD])+ALLTRIM(X[NPOSETA]) == ALLTRIM(FP7_CODIGO)+ALLTRIM(CETAPA)})

	IF CID == "08"
		IF NALT > FP7->FP7_ALTURA
			NCUSTO := FP7->FP7_VLR
		ENDIF
	ENDIF

	IF CID == "10"
		NPOS2 := ASCAN(ODLGRES:ACOLS,{|X| ALLTRIM(X[NPOSCOD]) == ALLTRIM(FP7_CODIGO)})
		IF NPOS2 > 0
			FP7->(DBSKIP())
			LOOP
		ENDIF
	ENDIF

	IF NPOS > 0//SE JÁ EXISTIR
		IF NCUSTO <= 0
			ODLGRES:ACOLS[NPOS][LEN(ODLGRES:AHEADER)+1]:=.T.
		ELSE
			ODLGRES:ACOLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7_CODIGO
			ODLGRES:ACOLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7_DESCRI
			ODLGRES:ACOLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := FP7_RESPON
			ODLGRES:ACOLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR" })] := NCUSTO
			ODLGRES:ACOLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := IIF(FP7_RESPON=="L",NCUSTO,0)
			ODLGRES:ACOLS[NPOS][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_TRECHO"})] := CETAPA
		ENDIF
	ELSE
		IF NCUSTO <= 0//SENÃO TIVER CUSTO, NAO DEVE CRIAR
			FP7->(DBSKIP())
			LOOP
		ENDIF

		IF !EMPTY(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})])
			AADD(ODLGRES:ACOLS,ACLONE(ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)]))
			CCAMPOGET := ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQRES"})]
			ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_SEQRES"})] := STRZERO(VAL(CCAMPOGET)+1,LEN(CCAMPOGET))
		ENDIF

		ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_CODIGO"})] := FP7_CODIGO
		ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_DESCRI"})] := FP7_DESCRI
		ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_RESPON"})] := FP7_RESPON
		ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALOR" })] := NCUSTO
		ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_VALCOB"})] := IIF(FP7_RESPON=="L",NCUSTO,0)
		ODLGRES:ACOLS[LEN(ODLGRES:ACOLS)][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_TRECHO"})] := CETAPA
	ENDIF

	FP7->(DBSKIP())
ENDDO

ODLGRES:REFRESH()

RESTAREA(AAREAZAB)
RESTAREA(AAREA)

RETURN NIL


/*/{PROTHEUS.DOC} GETCALC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETCALC(CTIPORO , CTIPOPI , CCAMPO , NDISTAN , CVAZIO) 
// ======================================================================= \\

LOCAL AAREA		:= GETAREA()
LOCAL CQUERY	:= ""
LOCAL LSEGUE	:= .F.
LOCAL NRET		:= 0

LOCAL NCOMPZAN 	:= 0
LOCAL NLARGZAN 	:= 0
LOCAL NALTUZAN  := 0
LOCAL NPESOZAN  := 0

IF     CVAZIO == "V" 		//VAZIO
	// CONJ. TRANSP
	NCOMPZAN  := N2COMP
	NLARGZAN  := N2LARG
	NALTUZAN  := N2ALTU
 	NPESOZAN  := N2PESO
ELSEIF CVAZIO == "C" 		// CARREGADO
	// DIMENS. TOT
	NCOMPZAN  := N3COMP
	NLARGZAN  := N3LARG
	NALTUZAN  := N3ALTU
 	NPESOZAN  := N3PESO
ENDIF

IF SELECT("TRB01") > 0
	TRB01->(DBCLOSEAREA())
ENDIF
CQUERY     := " SELECT ZAN.* "
CQUERY     += " FROM "+RETSQLNAME("ZAN")+" ZAN "
CQUERY     += " WHERE  ZAN.D_E_L_E_T_<>'*' "
CQUERY     +=   " AND  ZAN.ZAN_FILIAL = '"+XFILIAL("ZAN")+"' "
IF CCAMPO == "FPD_ALEMOA"
	CQUERY +=   " AND  ZAN.ZAN_ALEMOA = 'S' "
ELSE
	CQUERY +=   " AND  ZAN.ZAN_ALEMOA = 'N' "
ENDIF
IF CCAMPO == "FPD_BLOQSR"
	CQUERY +=   " AND  ZAN.ZAN_BLOQSR = 'S' "
ELSE
	CQUERY +=   " AND  ZAN.ZAN_BLOQSR = 'N' "
ENDIF
CQUERY     +=   " AND  ZAN.ZAN_TPPIST IN ('"+CTIPOPI+"','A') "
CQUERY     +=   " AND  ZAN.ZAN_TPROD = ('"+CTIPORO+"') "
CQUERY     += " ORDER BY ZAN.ZAN_NIVEL DESC "
CQUERY     := CHANGEQUERY(CQUERY)
DBUSEAREA(.T.,"TOPCONN",TCGENQRY(,,CQUERY), "TRB01",.F.,.T.)

WHILE TRB01->(!EOF())
	LSEGUE := .F.
	IF  (NCOMPZAN >= TRB01->ZAN_COMPDE .AND. NCOMPZAN <= TRB01->ZAN_COMPAT)  .OR.  (NLARGZAN >= TRB01->ZAN_LARGDE .AND. NLARGZAN <= TRB01->ZAN_LARGAT) .OR. ;
		(NALTUZAN >= TRB01->ZAN_ALTUDE .AND. NALTUZAN <= TRB01->ZAN_ALTUAT)  .OR.  (NPESOZAN >= TRB01->ZAN_PESODE .AND. NPESOZAN <= TRB01->ZAN_PESOAT)
		LSEGUE := .T.
	ENDIF

	IF !LSEGUE
		TRB01->(DBSKIP())
		LOOP
	ENDIF

	IF     CCAMPO == "FPD_CRED"
		NRET := TRB01->ZAN_VRCRED
	ELSEIF CCAMPO == "FPD_DER"
		NRET := TRB01->ZAN_KMVDER
	ELSEIF CCAMPO == "FPD_DNIT"
		NRET := TRB01->ZAN_KMVDNT
	ELSEIF CCAMPO == "FPD_BLOQSR"
		NRET := TRB01->ZAN_VLRLB
	ELSEIF CCAMPO == "FPD_ALEMOA"
		NRET := TRB01->ZAN_VLRLB
	ELSEIF CCAMPO == "FPD_LICENC"
		NRET := TRB01->ZAN_VLRLIC
	ELSEIF CCAMPO == "FPD_PORTO"
		NRET := TRB01->ZAN_VLRPOR
	ELSEIF CCAMPO == "FPD_CET"
		NRET := TRB01->ZAN_VLRCET
	ENDIF

	IF NRET != 0
		EXIT
	ENDIF

	TRB01->(DBSKIP())
ENDDO

IF SELECT("TRB01") > 0
	TRB01->(DBCLOSEAREA())
ENDIF

RESTAREA(AAREA)

RETURN NRET


/*/{PROTHEUS.DOC} GETCALCTUV
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETCALCTUV(CESTDE , CESTATE , NDISTAN , NPESO)
// ======================================================================= \\
/*
LOCAL AAREA		:= GETAREA()
LOCAL AAREAZAP	:= ZAP->(GETAREA())
LOCAL CUF		:= ""
LOCAL NVALOR	:= 0
LOCAL NUFIR	    := 0
LOCAL NDIF  	:= 0

IF CESTDE == CESTATE
	CUF := CESTDE
ENDIF

DBSELECTAREA("ZAP")
DBSETORDER(3)
IF !EMPTY(CUF)
	IF DBSEEK(XFILIAL("ZAP")+CUF)
		WHILE !ZAP->(EOF()) .AND. ZAP->ZAP_UF == CUF
			IF NDISTAN >= ZAP->ZAP_DE .AND. NDISTAN <= ZAP->ZAP_ATE
				NVALOR := ZAP->ZAP_VALOR
				NUFIR  := ZAP->ZAP_UFIR
				NDIF   := NPESO - ZAP->ZAP_PESO
				EXIT
			ENDIF
			ZAP->(DBSKIP())
		ENDDO
	ELSE
		DBSEEK(XFILIAL("ZAP"))
		WHILE !ZAP->(EOF()) 	// .AND. ZAP->ZAP_UF == M->ZAP_UF
			IF NDISTAN >= ZAP->ZAP_DE .AND. NDISTAN <= ZAP->ZAP_ATE
				NVALOR := ZAP->ZAP_VALOR
				NUFIR  := ZAP->ZAP_UFIR
				NDIF   := NPESO - ZAP->ZAP_PESO
				EXIT
			ENDIF
			ZAP->(DBSKIP())
		ENDDO
	ENDIF
ELSE
	DBSEEK(XFILIAL("ZAP"))
	WHILE !ZAP->(EOF()) 		// .AND. ZAP->ZAP_UF == M->ZAP_UF
		IF NDISTAN >= ZAP->ZAP_DE .AND. NDISTAN <= ZAP->ZAP_ATE
			NVALOR := ZAP->ZAP_VALOR
			NUFIR  := ZAP->ZAP_UFIR
			NDIF   := NPESO - ZAP->ZAP_PESO
			EXIT
		ENDIF
		ZAP->(DBSKIP())
	ENDDO
ENDIF

NRET := (NDIF * NVALOR) * NUFIR

RESTAREA(AAREAZAP)
RESTAREA(AAREA)
*/
NRET := 0
RETURN NRET


/*/{PROTHEUS.DOC} DELETZBB
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION DELETZBB(CINDICE)
// ======================================================================= \\

LOCAL AAREA    := GETAREA()
LOCAL AAREAZBB := FPE->(GETAREA())

DBSELECTAREA("FPE")
DBSETORDER(2)
DBSEEK(XFILIAL("FPE")+CINDICE)

WHILE !FPE->(EOF()) .AND. FPE->(FPE_PROJET+FPE_OBRA+FPE_SEQGUI) == CINDICE
	RECLOCK("FPE",.F.)
	FPE->(DBDELETE()) 
	FPE->(MSUNLOCK()) 
	FPE->(DBSKIP())
ENDDO

RESTAREA(AAREAZBB)
RESTAREA(AAREA)

RETURN NIL


/*/{PROTHEUS.DOC} PRINTREGS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION PRINTREGS()
// ======================================================================= \\

LOCAL OREPORT := REPORTENCA()

IF OREPORT <> NIL
	OREPORT:NDEVICE      := 1
	OREPORT:NENVIRONMENT := 1
	OREPORT:PRINTDIALOG()
ENDIF

RETURN NIL


/*/{PROTHEUS.DOC} REPORTENCA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION REPORTENCA()
// ======================================================================= \\

LOCAL OREPORT	:= NIL
LOCAL OSECTION1 := NIL

OREPORT   := TREPORT():NEW("LOCA001", OEMTOANSI("INCONSISTENCIAS"), /*CPERG*/, {|OREPORT| LOCC001IMP(OREPORT)})

OSECTION1 := TRSECTION():NEW(OREPORT, OEMTOANSI("FROTA"), {} )
OSECTION1:SETHEADERSECTION(.T.)
TRCELL():NEW(OSECTION1,'CFROTA'     , /*"PDA"*/,	"FROTA"		, "@!"/*"@R 99.999.999/9999-99"*/  , 40 ,.F. , )
TRCELL():NEW(OSECTION1,'CDATINI'    , /*"PDA"*/,	"DATA INI."	, "@!"/*"@R 99.999.999/9999-99"*/  , 10 ,.F. , )
TRCELL():NEW(OSECTION1,'CDATFIM'    , /*"PDA"*/,	"DATA FIM"	, "@!"/*"@R 99.999.999/9999-99"*/  , 10 ,.F. , )

RETURN(OREPORT)


/*/{PROTHEUS.DOC} LOCC001IMP
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION LOCC001IMP(OREPORT)
// ======================================================================= \\
// --> CHAMADA: MENU - "INCONSISTENCIAS" 

LOCAL AAREA     := GETAREA()
LOCAL OSECTION1 := OREPORT:SECTION(1)
LOCAL NX        := 0
LOCAL NY        := 0
LOCAL CQUERY	:= ""
LOCAL AERROR	:= {}
LOCAL AFROTA	:= {}
LOCAL AENCAV    := {}
LOCAL LREVIS	:= .F.

IF SELECT("TR02") > 0
	TR02->(DBCLOSEAREA())
ENDIF

IF     FP0->FP0_TIPOSE == "T"
	DBSELECTAREA("FQ5")
	DBSETORDER(8) 				// PROJETO
	IF DBSEEK(XFILIAL("FQ5")+SUBSTR(FP0->FP0_PROJET,1,9))//SE GEROU O CONTRATO
		LREVIS    := .T.
		DDTANTINI := FQ5->FQ5_DATINI
		DDTANTFIM := FQ5->FQ5_DATFIM
	ENDIF

	CQUERY := " SELECT DISTINCT ZAE.FP8_PROJET, ZAE.FP8_OBRA,ZAE.FP8_SEQTRA, ZAE.FP8_TRANSP,ZAE.FP8_SEQCAR,ZA6.ZA6_DTINI, ZA6.ZA6_DTFIM, ZA6.ZA6_VIAGEM,ZA6.ZA6_PROJET,ZA6.ZA6_OBRA "
	CQUERY += " FROM "+RETSQLNAME("FP8")+" ZAE "
	CQUERY += " LEFT OUTER JOIN "+RETSQLNAME("ZA7")+" ZA7 "
	CQUERY += " ON (ZA7.ZA7_FILIAL = ZAE.FP8_FILIAL AND ZA7.ZA7_PROJET = ZAE.FP8_PROJET AND ZA7.ZA7_OBRA = ZAE.FP8_OBRA AND ZA7.ZA7_SEQTRA = ZAE.FP8_SEQTRA AND ZA7.ZA7_SEQCAR = ZAE.FP8_SEQCAR AND ZA7.D_E_L_E_T_<>'*' ) "
	CQUERY += " LEFT OUTER JOIN "+RETSQLNAME("ZA6")+" ZA6 "
	CQUERY += " ON (ZA6.ZA6_FILIAL = ZA7.ZA7_FILIAL AND ZA6.ZA6_PROJET = ZA7.ZA7_PROJET AND ZA6.ZA6_OBRA = ZA7.ZA7_OBRA AND ZA6.ZA6_SEQTRA = ZA7.ZA7_SEQTRA AND ZA6.D_E_L_E_T_<>'*') "
	CQUERY += " WHERE ZAE.D_E_L_E_T_<>'*' "
	CQUERY += " AND ZAE.FP8_FILIAL = '"+XFILIAL("FP8")+"' "
	CQUERY += " AND ZAE.FP8_PROJET = '"+FP0->FP0_PROJETO+"' "
	CQUERY := CHANGEQUERY(CQUERY)
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TR02" , .F. , .T.)

	TCSETFIELD("TR02","ZA6_DTINI","D",08,00)
	TCSETFIELD("TR02","ZA6_DTFIM","D",08,00)

	WHILE !TR02->(EOF())
	    LJUNTO := .F.
	    DBSELECTAREA("ZA7")
	    DBSETORDER(1)
	    IF DBSEEK(XFILIAL("ZA7")+TR02->FP8_PROJET+TR02->FP8_OBRA+TR02->FP8_SEQTRA+TR02->FP8_SEQCAR)
	    	IF !EMPTY(ZA7->ZA7_JUNTO)
	    		LJUNTO := .T.
	    	ENDIF
	    ENDIF

	    IF !LJUNTO				// SE TIVER CAMPO JUNTO DESCONSIDERA VALIDAÇÃO
		    DBSELECTAREA("FPM")
		    DBSETORDER(5)
		    DBSEEK(XFILIAL("FPM")+TR02->FP8_TRANSP)

		    WHILE !FPM->(EOF()) .AND. ALLTRIM(FPM->FPM_FROTA) == ALLTRIM(TR02->FP8_TRANSP)
		    	IF ALLTRIM(FPM->FPM_STATUS) == "1"
		    		FPM->(DBSKIP())
		    		LOOP
		    	ENDIF

		    	IF LREVIS		// AS 2º VEZ
		    		IF ALLTRIM(FPM->FPM_STATUS) == "9" .OR. ALLTRIM(FPM->FPM_STATUS) == "M"
			    		FPM->(DBSKIP())
			    		LOOP
			    	ENDIF
			    	IF ALLTRIM(TR02->ZA6_PROJET+TR02->ZA6_OBRA+TR02->FP8_TRANSP) == ALLTRIM(FPM->FPM_PROJET+FPM->FPM_OBRA+FPM->FPM_FROTA)
			    		FPM->(DBSKIP())
			    		LOOP
			    	ENDIF
			    	IF DTOS(FPM->FPM_DTPROG) >= DTOS(TR02->ZA6_DTINI) .AND. DTOS(FPM->FPM_DTPROG) <= DTOS(TR02->ZA6_DTFIM)
			    		AENCAV := {FPM->FPM_FROTA,FPM->FPM_DTPROG,FPM->FPM_AS,FPM->FPM_PROJET,FPM->FPM_OBRA}
			    		NPOS := ASCAN(AFROTA,{|X| X[1]+X[4]+X[5] == TR02->FP8_TRANSP+TR02->FP8_SEQTRA+TR02->FP8_SEQCAR})
						IF NPOS > 0
			    			AADD(AFROTA[NPOS,6],AENCAV)
			    		ELSE
			    			AADD(AFROTA,{TR02->FP8_TRANSP,TR02->ZA6_DTINI,TR02->ZA6_DTFIM,TR02->FP8_SEQTRA,TR02->FP8_SEQCAR,{AENCAV}})
			    		ENDIF
			    	ENDIF
			    ELSE
			    	IF DTOS(FPM->FPM_DTPROG) >= DTOS(TR02->ZA6_DTINI) .AND. DTOS(FPM->FPM_DTPROG) <= DTOS(TR02->ZA6_DTFIM)
			    		AENCAV := {FPM->FPM_FROTA,FPM->FPM_DTPROG,FPM->FPM_AS,FPM->FPM_PROJET,FPM->FPM_OBRA}
			    		NPOS := ASCAN(AFROTA,{|X| X[1]+X[4]+X[5] == TR02->FP8_TRANSP+TR02->FP8_SEQTRA+TR02->FP8_SEQCAR})
						IF NPOS > 0
			    			AADD(AFROTA[NPOS,6],AENCAV)
			    		ELSE
			    			AADD(AFROTA,{TR02->FP8_TRANSP,TR02->ZA6_DTINI,TR02->ZA6_DTFIM,TR02->FP8_SEQTRA,TR02->FP8_SEQCAR,{AENCAV}})
			    		ENDIF
			    	ENDIF
		    	ENDIF

		    	FPM->(DBSKIP())
		    ENDDO
		ENDIF

		TR02->(DBSKIP())
	ENDDO

ELSEIF FP0->FP0_TIPOSE == "E"
	DBSELECTAREA("FQ5")
	DBSETORDER(8)				// PROJETO
	IF DBSEEK(XFILIAL("FQ5")+SUBSTR(FP0->FP0_PROJETO,1,9))//SE GEROU O CONTRATO
		LREVIS 		:= .T.
	ENDIF

	CQUERY := " SELECT ZA5.FP4_PROJET, ZA5.FP4_OBRA,ZA5.FP4_SEQGUI, ZA5.FP4_GUINDA, ZA5.FP4_DTINI, ZA5.FP4_DTFIM, ZA5.FP4_AS "
	CQUERY += " FROM "+RETSQLNAME("FP4")+" ZA5 "
	CQUERY +=        " LEFT OUTER JOIN "+RETSQLNAME("ST9")+" ST9 "
	CQUERY +=                     " ON (ST9.T9_FILIAL = ZA5.FP4_FILIAL AND ST9.T9_CODBEM = ZA5.FP4_GUINDA AND ST9.D_E_L_E_T_<>'*') "
	CQUERY += " WHERE  ZA5.D_E_L_E_T_ <> '*' "
	CQUERY += "   AND  ZA5.FP4_FILIAL =  '"+XFILIAL("FP4")  +"' "
	CQUERY += "   AND  ZA5.FP4_PROJET =  '"+FP0->FP0_PROJETO+"' "
	CQUERY += "   AND  ST9.T9_TIPOSE  =  'T' "
	CQUERY := CHANGEQUERY(CQUERY)
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CQUERY) , "TR02" , .F. , .T.) 

	TCSETFIELD("TR02","FP4_DTINI","D",08,00)
	TCSETFIELD("TR02","FP4_DTFIM","D",08,00)

	WHILE !TR02->(EOF())

		DBSELECTAREA("FPM")
		DBSETORDER(5)
		DBSEEK(XFILIAL("FPM")+TR02->FP4_GUINDA)

		WHILE !FPM->(EOF()) .AND. ALLTRIM(FPM->FPM_FROTA) == ALLTRIM(TR02->FP4_GUINDA)
	    	IF ALLTRIM(FPM->FPM_STATUS) == "1"
	    		FPM->(DBSKIP())
	    		LOOP
	    	ENDIF

	    	IF LREVIS//AS 2º VEZ
	    		IF ALLTRIM(FPM->FPM_STATUS) == "9" .OR. ALLTRIM(FPM->FPM_STATUS) == "M"
		    		FPM->(DBSKIP())
		    		LOOP
		    	ENDIF
		    	IF ALLTRIM(TR02->FP4_PROJET+TR02->FP4_OBRA+TR02->FP4_GUINDA+TR02->FP4_AS) == ALLTRIM(FPM->FPM_PROJET+FPM->FPM_OBRA+FPM->FPM_FROTA+FPM->FPM_AS)
		    		FPM->(DBSKIP())
		    		LOOP
		    	ENDIF
		    	IF DTOS(FPM->FPM_DTPROG) >= DTOS(TR02->FP4_DTINI) .AND. DTOS(FPM->FPM_DTPROG) <= DTOS(TR02->FP4_DTFIM)
		    		AENCAV := {FPM->FPM_FROTA,FPM->FPM_DTPROG,FPM->FPM_AS,FPM->FPM_PROJET,FPM->FPM_OBRA}
		    		NPOS   := ASCAN(AFROTA,{|X| X[1]+X[4]+X[5] == TR02->FP4_GUINDA+TR02->FP4_OBRA+TR02->FP4_SEQGUI})
					IF NPOS > 0
		    			AADD(AFROTA[NPOS,6],AENCAV)
		    		ELSE
		    			AADD(AFROTA,{TR02->FP4_GUINDA,TR02->FP4_DTINI,TR02->FP4_DTFIM,TR02->FP4_OBRA,TR02->FP4_SEQGUI,{AENCAV}})
		    		ENDIF
		    	ENDIF
		    ELSE
		    	IF DTOS(FPM->FPM_DTPROG) >= DTOS(TR02->FP4_DTINI) .AND. DTOS(FPM->FPM_DTPROG) <= DTOS(TR02->FP4_DTFIM)
		    		AENCAV := {FPM->FPM_FROTA,FPM->FPM_DTPROG,FPM->FPM_AS,FPM->FPM_PROJET,FPM->FPM_OBRA}
		    		NPOS   := ASCAN(AFROTA,{|X| X[1]+X[4]+X[5] == TR02->FP4_GUINDA+TR02->FP4_OBRA+TR02->FP4_SEQGUI})
					IF NPOS > 0
		    			AADD(AFROTA[NPOS,6],AENCAV)
		    		ELSE
		    			AADD(AFROTA,{TR02->FP4_GUINDA,TR02->FP4_DTINI,TR02->FP4_DTFIM,TR02->FP4_OBRA,TR02->FP4_SEQGUI,{AENCAV}})
		    		ENDIF
		    	ENDIF
	    	ENDIF

	    	FPM->(DBSKIP())
	    ENDDO

		TR02->(DBSKIP())
	ENDDO

ENDIF

OREPORT:SETMETER(LEN(AFROTA))
OSECTION1:INIT()
OREPORT:PRINTSHEADER()
FOR NX := 1 TO LEN(AFROTA)
	OREPORT:INCMETER()
	OSECTION1:CELL('CFROTA' ):SETVALUE(AFROTA[NX,1])
	OSECTION1:CELL('CDATINI'):SETVALUE(DTOC(AFROTA[NX,2]))
	OSECTION1:CELL('CDATFIM'):SETVALUE(DTOC(AFROTA[NX,3]))
	OSECTION1:PRINTLINE()
	AERROR := AFROTA[NX,6]
	FOR NY := 1 TO LEN(AERROR)
		OREPORT:PRINTTEXT("		ENCAVALADO: "+AERROR[NY,1]+" - "+DTOC(AERROR[NY,2])+" - AS/PROJETO/OBRA: ("+ALLTRIM(AERROR[NY,3])+" / "+ALLTRIM(AERROR[NY,4])+")",OREPORT:ROW(),10)
		OREPORT:SKIPLINE()
	NEXT NY
	OREPORT:THINLINE()
NEXT NX

OSECTION1:FINISH()

RESTAREA(AAREA)

RETURN NIL


/*/{PROTHEUS.DOC} DELETVIAGE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION DELETVIAGE()
// ======================================================================= \\
// --> FUNÇÃO CRIADA PARA DELETAR VIAGENS, QUE TEM RELAÇÃO COM AS OUTRAS ABAS.

LOCAL CINDICE  := ""
LOCAL AAREA	   := GETAREA()
LOCAL AAREAZA7 := ZA7->(GETAREA())
LOCAL AAREAZAE := FP8->(GETAREA())
LOCAL AAREAZAM := FPD->(GETAREA())
LOCAL AAREAZAA := FP6->(GETAREA())
LOCAL AAREAZA9 := FQ8->(GETAREA())
LOCAL NX       := 0 

FOR NX := 1 TO LEN(ADELVIAG)
	CINDICE := ADELVIAG[NX,1]+ADELVIAG[NX,2]+ADELVIAG[NX,3]
	DBSELECTAREA("ZA7")
	DBSETORDER(1)
	DBSEEK(XFILIAL("ZA7")+CINDICE)
	WHILE !ZA7->(EOF()) .AND. ZA7->(ZA7_FILIAL+ZA7_PROJET+ZA7_OBRA+ZA7_SEQTRA) == XFILIAL("ZA7")+CINDICE
		RECLOCK("ZA7",.F.)
		ZA7->(DBDELETE()) 
		ZA7->(MSUNLOCK()) 
		ZA7->(DBSKIP())
	ENDDO

	DBSELECTAREA("FP8")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP8")+CINDICE)
	WHILE !FP8->(EOF()) .AND. FP8->(FP8_FILIAL+FP8_PROJET+FP8_OBRA+FP8_SEQTRA) == XFILIAL("FP8")+CINDICE
		RECLOCK("FP8",.F.)
		FP8->(DBDELETE()) 
		FP8->(MSUNLOCK()) 
		FP8->(DBSKIP())
	ENDDO

	DBSELECTAREA("FPD")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FPD")+CINDICE)
	WHILE !FPD->(EOF()) .AND. FPD->(FPD_FILIAL+FPD_PROJET+FPD_OBRA+FPD_SEQTRA) == XFILIAL("FPD")+CINDICE
		RECLOCK("FPD",.F.)
		FPD->(DBDELETE()) 
		FPD->(MSUNLOCK()) 
		FPD->(DBSKIP())
	ENDDO

	DBSELECTAREA("FP6")
	DBSETORDER(2)
	DBSEEK(XFILIAL("FP6")+CINDICE)
	WHILE !FP6->(EOF()) .AND. FP6->(FP6_FILIAL+FP6_PROJET+FP6_OBRA+FP6_SEQGUI) == XFILIAL("FP6")+CINDICE
		RECLOCK("FP6",.F.)
		FP6->(DBDELETE()) 
		FP6->(MSUNLOCK()) 
		FP6->(DBSKIP())
	ENDDO

	DBSELECTAREA("FQ8")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FQ8")+CINDICE)
	WHILE !FQ8->(EOF()) .AND. FQ8->(FQ8_FILIAL+FQ8_PROJET+FQ8_OBRA+FQ8_SEQTRA) == XFILIAL("FQ8")+CINDICE
		RECLOCK("FQ8",.F.)
		FQ8->(DBDELETE()) 
		FQ8->(MSUNLOCK()) 
		FQ8->(DBSKIP())
	ENDDO
NEXT NX

RESTAREA(AAREAZA7)
RESTAREA(AAREAZAE)
RESTAREA(AAREAZAM)
RESTAREA(AAREAZAA)
RESTAREA(AAREAZA9)
RESTAREA(AAREA)

RETURN NIL


/*/{PROTHEUS.DOC} GETVALPROJ
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETVALPROJ(CPROJET , CTIPO) 
// ======================================================================= \\

LOCAL AAREA     := GETAREA()
LOCAL NRET		:= 0
LOCAL NHRTURNO	:= 0
LOCAL _NVALFEC
LOCAL _NVALCOB
LOCAL _NVLPRET
LOCAL AAREAZA6
LOCAL _NQTVIAG
LOCAL AAREAZA9
LOCAL _NVRFRET
LOCAL AVALFECH := {}
LOCAL AVALCOBR := {}
LOCAL AVIAGEM  := {}
LOCAL NPOSOBR
LOCAL _NW      := 0 

IF CTIPO == "T" 		// TRANSPORTE
	_NVALFEC := 0
	DBSELECTAREA("FQ8")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FQ8")+CPROJET)
	WHILE !FQ8->(EOF()) .AND. FQ8->(FQ8_FILIAL+FQ8_PROJET) == XFILIAL("FQ8")+CPROJET
		_NVALFEC += FQ8->FQ8_VALFEC
		NPOSOBR := ASCAN( AVALFECH, {|X| X[1] == FQ8->FQ8_OBRA} )
		IF NPOSOBR == 0
			AADD( AVALFECH, { FQ8->FQ8_OBRA, 0 } )
			NPOSOBR := LEN( AVALFECH )
		ENDIF
		AVALFECH[NPOSOBR][2] += FQ8->FQ8_VALFEC
		FQ8->(DBSKIP())
	ENDDO

	_NVALCOB := 0
	DBSELECTAREA("FP6")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP6")+CPROJET)
	WHILE !FP6->(EOF()) .AND. FP6->(FP6_FILIAL+FP6_PROJET) == XFILIAL("FP6")+CPROJET
		_NVALCOB += FP6->FP6_VALCOB
		NPOSOBR := ASCAN( AVALCOBR, {|X| X[1] == FP6->FP6_OBRA} )
		IF NPOSOBR == 0
			AADD( AVALCOBR, { FP6->FP6_OBRA, 0 } )
			NPOSOBR := LEN( AVALCOBR )
		ENDIF
		AVALCOBR[NPOSOBR][2] += FP6->FP6_VALCOB
		FP6->(DBSKIP())
	ENDDO

	IF FP0->FP0_STATUS == "1"				// VERDE
		_NVLPRET := _NVALFEC + _NVALCOB		// VALOR PRETENDIDO
		_NQTVIAG := 0

		AAREAZA6 := ZA6->( GETAREA() )
		ZA6->( DBSETORDER(1) )				// ZA6_FILIAL+ZA6_PROJET+ZA6_OBRA+ZA6_SEQTRA
		ZA6->( DBSEEK( XFILIAL('ZA6') + CPROJET, .T. ) )
		WHILE ! ZA6->( EOF() ) .AND. ZA6->ZA6_FILIAL == XFILIAL("ZA6") .AND. ZA6->ZA6_PROJET == CPROJET
			_NQTVIAG += ZA6->ZA6_QTVIAG
			NPOSOBR := ASCAN( AVIAGEM, {|X| X[1] == ZA6->ZA6_OBRA} )
			IF NPOSOBR == 0
				AADD( AVIAGEM , {ZA6->ZA6_OBRA,0} )
				NPOSOBR := LEN( AVIAGEM )
			ENDIF
			AVIAGEM[NPOSOBR][2] += ZA6->ZA6_QTVIAG
			ZA6->(DBSKIP())
		ENDDO 
		ZA6->( RESTAREA( AAREAZA6 ) )

		NRET     := 0
		FOR _NW := 1 TO LEN( AVALFECH )
			_NVLPRET := AVALFECH[_NW][2]
			XXX := ASCAN(AVALCOBR, {|X| ALLTRIM(X[1]) == ALLTRIM(AVALFECH[_NW][1])})
			IF XXX > 0
				_NVLPRET += AVALCOBR[XXX][2]
			ENDIF
			_NQTVIAG := 0
			XXX := ASCAN(AVIAGEM, {|X| ALLTRIM(X[1]) == ALLTRIM(AVALFECH[_NW][1])})
			IF XXX > 0
				_NQTVIAG += AVIAGEM[XXX][2]
			ENDIF
			_NQTVIAG := IIF( _NQTVIAG == 0, 1, _NQTVIAG )
			NRET += (_NVLPRET * _NQTVIAG)
		NEXT _NW 

	ELSEIF FP0->FP0_STATUS == "5"			// PRETO
		_NVRFRET := 0						// VALOR FECHADO
		AAREAZA9 := FQ8->( GETAREA() )
		FQ8->( DBSEEK( XFILIAL('FQ8') + CPROJET, .T. ) )
		WHILE ! FQ8->( EOF() ) .AND. FQ8->FQ8_FILIAL == XFILIAL("FQ8") .AND. FQ8->FQ8_PROJET == CPROJET
			_NVRFRET += FQ8->FQ8_VRFRET
			FQ8->(DBSKIP())
		ENDDO 
		FQ8->( RESTAREA( AAREAZA9 ) )
		NRET := _NVRFRET

	ELSE
		NRET := _NVALFEC + _NVALCOB

	ENDIF

ELSEIF CTIPO == "E" //GUINDASTE - EQUIPAMENTO
	DBSELECTAREA("FP4")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP4")+CPROJET)
	WHILE !FP4->(EOF()) .AND. FP4->(FP4_FILIAL+FP4_PROJET) == XFILIAL("FP4")+CPROJET
		IF FP4->FP4_TIPOCA == "F"
			NRET += FP4->FP4_VRHOR
		ELSE
			NRET += (FP4->FP4_QTDIA*FP4->FP4_MINDIA) * FP4->FP4_VRHOR
			NRET += FP4->FP4_VRMOB + FP4->FP4_VRDES
		ENDIF
		FP4->(DBSKIP())
	ENDDO

	DBSELECTAREA("FPE")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FPE")+CPROJET)
	WHILE !FPE->(EOF()) .AND. FPE->(FPE_FILIAL+FPE_PROJET) == XFILIAL("FPE")+CPROJET
		NHRTURNO := 0	// GETHORASTURNO(FPE->FPE_HRINIT,FPE->FPE_HOFIMT)
		NRET 	 += (VAL(FPE->FPE_MINDIT)*NHRTURNO) * FPE->FPE_VALTUR
		FPE->(DBSKIP())
	ENDDO

	DBSELECTAREA("FP6")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP6")+CPROJET)
	WHILE !FP6->(EOF()) .AND. FP6->(FP6_FILIAL+FP6_PROJET) == XFILIAL("FP6")+CPROJET
		NRET += FP6->FP6_VALCOB
		FP6->(DBSKIP())
	ENDDO

ELSEIF CTIPO == "L" // LOCAÇAO
	DBSELECTAREA("FPA")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FPA")+CPROJET)
	WHILE !FPA->(EOF()) .AND. FPA->(FPA_FILIAL+FPA_PROJET) == XFILIAL("FPA")+CPROJET
		NRET += FPA->FPA_VRHOR
		IF FPA->FPA_TPGUIM == "C"
			NRET += FPA->FPA_GUIMON
		ENDIF
		IF FPA->FPA_TPGUID == "C"
			NRET += FPA->FPA_GUIDES
		ENDIF
		FPA->(DBSKIP())
	ENDDO

	DBSELECTAREA("FP6")
	DBSETORDER(1)
	DBSEEK(XFILIAL("FP6")+CPROJET)
	WHILE !FP6->(EOF()) .AND. FP6->(FP6_FILIAL+FP6_PROJET) == XFILIAL("FP6")+CPROJET
		NRET += FP6->FP6_VALCOB
		FP6->(DBSKIP())
	ENDDO

ENDIF

RESTAREA( AAREA )

RETURN NRET


/*/{PROTHEUS.DOC} ZBBLINOK
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00186(ACOLS,AHEADER,NAT)  //VALIDA A LINHA DO OGETVT:ACOLS
// ======================================================================= \\

LOCAL NMINDIA
LOCAL LRET      := .T.

DEFAULT ACOLS   := ACLONE(OGETVT:ACOLS)
DEFAULT AHEADER := ACLONE(OGETVT:AHEADER)
DEFAULT NAT     := OGETVT:NAT

IF LRET
	NMINDIA := ACOLS[NAT][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FPE_MINDIT"})]  //C(5)
	IF !FVALIDAHEX(VAL(NMINDIA)/100)
		LRET := .F.
	ENDIF
ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} ZBBTUDOK
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00187() 	// VALIDA TODAS AS LINHAS DO OGETVT:ACOLS
// ======================================================================= \\

LOCAL LRET   := .T.

RETURN(LRET)


/*/{PROTHEUS.DOC} FVALIDAHEX
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FVALIDAHEX(NHORA)
// ======================================================================= \\

LOCAL CHORA := STRTRAN(STRZERO(NHORA,5,2),".",":")
LOCAL LRET  := .T.

DO CASE
CASE NHORA < 00.00 .OR. NHORA > 23.59
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Hora: "+CHORA+" Inválida."})
	LRET := .F.

CASE SUBS(CHORA,1,2) < "00" .OR. SUBS(CHORA,1,2) > "24"
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Hora: "+CHORA+" Inválida."})
	LRET := .F.

CASE SUBS(CHORA,4,2) < "00" .OR. SUBS(CHORA,4,2) > "59"
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Hora: "+CHORA+" Inválida."})
	LRET := .F.
ENDCASE

RETURN LRET


/*/{PROTHEUS.DOC} BLOQCLASS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION BLOQCLASS(CCODCLASS)
// ======================================================================= \\

LOCAL AAREAANT := GETAREA()
LOCAL NTAMANHO := LEN( ALLTRIM( CODCLVAL(CCODCLASS) ) )

CCODCLASS := ALLTRIM( CODCLVAL(CCODCLASS) )

DBSELECTAREA("CTH")
DBSETORDER(1)
IF DBSEEK( XFILIAL("CTH")+CCODCLASS )
	RECLOCK("CTH",.F.)
//	REPLACE CTH_BLOQ   WITH "1" 
	REPLACE CTH_DTEXSF WITH DDATABASE+180 
	CTH->(MSUNLOCK())

	DBSELECTAREA("CTH")
	DBSETORDER(5)
	DBSEEK(XFILIAL("CTH")+CCODCLASS)
	WHILE !EOF() .AND. SUBSTR(ALLTRIM(CTH->CTH_CLSUP),1,NTAMANHO) ==CCODCLASS
		RECLOCK("CTH",.F.)
	//	REPLACE CTH_BLOQ   WITH "1"
		REPLACE CTH_DTEXSF WITH DDATABASE+180
		CTH->(MSUNLOCK())
		DBSKIP() 
	ENDDO 
ENDIF 

RESTAREA(AAREAANT)

RETURN NIL


/*/{PROTHEUS.DOC} CODCLVAL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION CODCLVAL(CVAR)
// ======================================================================= \\

LOCAL CRET := SPACE(20)

IF LEN(ALLTRIM(CVAR)) >11
	IF SUBSTR(ALLTRIM(CVAR),12,1) == "/"
		CRET := SUBSTR(ALLTRIM(CVAR),1,11)
	ELSE
		CRET := SUBSTR(ALLTRIM(CVAR),1,12)
	ENDIF
ELSE
	CRET := CVAR
ENDIF

RETURN CRET


/*/{PROTHEUS.DOC} ZA0F12
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00188()
// ======================================================================= \\

IF PERGF12("LOCP060")
	DO CASE
	CASE MV_PAR01==1 
		CFILTROF12 := "SEM NF RETORNO"
	CASE MV_PAR01==2 
		CFILTROF12 := "COM NF RETORNO"
	OTHERWISE 
		CFILTROF12 := "AMBOS"
	ENDCASE

	OPLA_COLS  := {}
	OPLA_COLS0 := {}
	OPLACOLRET := {}

	XFOLDERPLA()
ENDIF

RETURN



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³FUNCAO    ³ PERGF12   ³ AUTOR ³ IT UP BUSINESS     ³ DATA ³ 28/11/2016 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³DESCRICAO ³ PERGUNTA DE FILTRO DA TECLA F12, NA MANUTENÇÃO DO PROJETO. ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/{PROTHEUS.DOC} PERGF12
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION PERGF12(CPERG)

LOCAL _NPADRAO  := 3
LOCAL APERGS    := {}
LOCAL ARET      := {}
LOCAL LRET      := .F.

DO CASE
CASE ALLTRIM(UPPER(CFILTROF12)) == "SEM NF RETORNO"
	_NPADRAO := 1
CASE ALLTRIM(UPPER(CFILTROF12)) == "COM NF RETORNO"
	_NPADRAO := 2
OTHERWISE
	_NPADRAO := 3
ENDCASE

AADD( APERGS ,{2,"FILTRO",_NPADRAO,{"SEM NF RETORNO", "COM NF RETORNO", "AMBOS" }, 60,"",.T.})

IF PARAMBOX(APERGS ,"PARAMETROS ",ARET, /*4*/, /*5*/, /*6*/, /*7*/, /*8*/, /*9*/, /*10*/, .F.)
	IF VALTYPE(ARET[01]) == "C"
		DO CASE
		CASE ALLTRIM(UPPER(ARET[01])) == "SEM NF RETORNO"
			MV_PAR01 := 1
		CASE ALLTRIM(UPPER(ARET[01])) == "COM NF RETORNO"
			MV_PAR01 := 2
		OTHERWISE
			MV_PAR01 := 3
		ENDCASE
	ELSE
		MV_PAR01 := ARET[01]
	ENDIF

	LRET := .T.
ENDIF

RETURN (LRET)


/*/{PROTHEUS.DOC} XFOLDERPLA
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION XFOLDERPLA()
// ======================================================================= \\

LOCAL NSTYLE	:= GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL NINDICE
LOCAL CFILTRO
LOCAL CPROJET  := PROJETO()
LOCAL ACOLSF12 , AHEADERF12 

FOBRA()

NSTYLE     := IIF(NOPCMANU==2,0,NSTYLE)  		// 2=VISUALIZAR

CALIAS     := "FPA"
CCHAVE     := XFILIAL(CALIAS) + CPROJET
CCONDICAO  := 'FPA_FILIAL+FPA_PROJET=="' + CCHAVE + '"'
NINDICE    := 1  								// FPA_FILIAL+FPA_PROJET+FPA_OBRA+FPA_SEQGRU
CFILTRO    := CCONDICAO

AHEADERF12 := ODLGPLA:AHEADER
ACOLSF12   := FCOLS(AHEADERF12,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

IF LEN(ACOLSF12)==1
	CCAMPO    := "FPA_OBRA"
	CCAMPOGET := ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]   := COBRA
		OPLA_COLS0[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})] := COBRA
	ENDIF

	CCAMPO    := "FPA_SEQGRU"
	CCAMPOGET := ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]
	IF EMPTY(CCAMPOGET)
		ACOLSF12[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})]   := STRZERO(1,LEN(CCAMPOGET))
		OPLA_COLS0[1][ASCAN(AHEADERF12,{|X|ALLTRIM(X[2])==CCAMPO})] := STRZERO(1,LEN(CCAMPOGET))
	ENDIF
ENDIF

ODLGPLA:ACOLS := ACLONE(ACOLSF12)
ODLGPLA:OBROWSE:REFRESH()

FACUMUPLA()
FTRAZPLA()

RETURN NIL 



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³FUNCAO    ³ GRPACESS  ³ AUTOR ³ IT UP BUSINESS     ³ DATA ³ 10/01/2017 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³DESCRICAO ³ RETORNA OS GRUPOS DE PRODUTO DE ACESSÓRIO/ANDAIME.         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/{PROTHEUS.DOC} GRPACESS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00189()

LOCAL   _AAREAOLD := GETAREA()
LOCAL   _CGRPACE  := ""
LOCAL   _CQUERY   := ""

IF SBM->(FIELDPOS("BM_XACESS")) > 0
	_CQUERY := " SELECT DISTINCT BM_GRUPO" + CRLF
	_CQUERY += " FROM " + RETSQLNAME("SBM") + " SBM" + CRLF
	_CQUERY += " WHERE  BM_FILIAL = '" + XFILIAL("SBM") + "'" + CRLF
	_CQUERY +=   " AND  BM_XACESS = '1'" + CRLF
	_CQUERY +=   " AND  SBM.D_E_L_E_T_ = ''"
	IF SELECT("TRBSBM") > 0
		TRBSBM->(DBCLOSEAREA())
	ENDIF
	TCQUERY _CQUERY NEW ALIAS "TRBSBM"

	WHILE TRBSBM->(!EOF())
		IF EMPTY(_CGRPACE)
			_CGRPACE := TRBSBM->BM_GRUPO
		ELSE
			_CGRPACE += ";" + TRBSBM->BM_GRUPO
		ENDIF
		TRBSBM->(DBSKIP())
	ENDDO
	TRBSBM->(DBCLOSEAREA())

ELSE
	_CGRPACE := SUPERGETMV("MV_LOCX014",.F.,"")
ENDIF

RESTAREA( _AAREAOLD )

RETURN _CGRPACE


/*/{PROTHEUS.DOC} FCFOLDER
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION FCFOLDER(ATITLES , POPC) 
// ======================================================================= \\

DEFAULT ATITLES := {}
DEFAULT POPC    := 2

IF POPC <> 0									// NÃO FOR FOLLOW-UP
	DO CASE
	CASE FP0->FP0_TIPOSE == "T"					// ==> TRANSPORTE
		AADD(ATITLES , "DADOS DO &"+SUPERGETMV("MV_LOCX248",.F.,"PROJETO")) 
		NFOLDERPRO := LEN(ATITLES)

		AADD(ATITLES , "&VIAGENS") 
		NFOLDERTRA := LEN(ATITLES)

		AADD(ATITLES , "&CARGAS" ) 
		NFOLDERCAR := LEN(ATITLES)

		IF SUPERGETMV("MV_LOCX225",.F.,.T.)
			AADD(ATITLES , "C&ONJ.TRANSPORTADOR") 
			NFOLDERCON := LEN(ATITLES) 
		ENDIF 

		AADD(ATITLES , "&TRECHOS") 
		NFOLDERTRE := LEN(ATITLES)

	CASE FP0->FP0_TIPOSE == "E"					// ==> EQUIPAMENTO
		AADD(ATITLES , "DADOS DO &"+SUPERGETMV("MV_LOCX248",.F.,"PROJETO")) 
		NFOLDERPRO := LEN(ATITLES)

		AADD(ATITLES , "L&OCALIDADES") 
		NFOLDEROBR := LEN(ATITLES)

		AADD(ATITLES , "&LOCAÇÃO") 
		NFOLDERGUI := LEN(ATITLES)

		IF SUPERGETMV("MV_LOCX225",.F.,.T.)
			AADD(ATITLES , "C&ONJ.TRANSPORTADOR") 
			NFOLDERCNJ := LEN(ATITLES)
		ENDIF
		AADD(ATITLES , "ORI&GEM/DESTINO") 
		NFOLDERROT := LEN(ATITLES)

		AADD(ATITLES , "&TRECHOS") 
		NFOLDERTRE := LEN(ATITLES)

	CASE FP0->FP0_TIPOSE == "L"					// ==> LOCACAO
		AADD(ATITLES , "Dados do &"+SUPERGETMV("MV_LOCX248",.F.,"Projeto")) 
		NFOLDERPRO := LEN(ATITLES)

		AADD(ATITLES , "L&ocalidades") 
		NFOLDEROBR := LEN(ATITLES)

		AADD(ATITLES , "&Locação") 
		NFOLDERPLA := LEN(ATITLES)

		IF SUPERGETMV("MV_LOCX225",.F.,.T.)
			AADD(ATITLES , "C&onj.Tranportador") 
			NFOLDERCNP := LEN(ATITLES) 
		ENDIF

	ENDCASE

	IF SUPERGETMV("MV_LOCX227",.F.,.T.)
		AADD(ATITLES , "&Responsabilidades") 
		NFOLDERRES := LEN(ATITLES) 
	ENDIF

	AADD(ATITLES , "&Base de Cálculo") 
	NFOLDERCUS := LEN(ATITLES)
	IF SUPERGETMV("MV_LOCX226",.F.,.T.)
		AADD(ATITLES , "&Documentos") 
		NFOLDERDOC := LEN(ATITLES) 
	ENDIF
ENDIF

AADD(ATITLES , "&Follow-up") 
NFOLDERFOL := LEN(ATITLES)

IF EXISTBLOCK("LC01ATIT") // --> PONTO DE ENTRADA PARA ALTERAR DESCRIÇÃO DAS ABAS
   ATITLES := EXECBLOCK("LC01ATIT",.T.,.T.,{ATITLES}) 
ENDIF

RETURN ATITLES


/*/{PROTHEUS.DOC} GETNFREM
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
STATIC FUNCTION GETNFREM( _CAS , _AREMESSA , _LREMESSA ) 
// ======================================================================= \\
LOCAL   _AAREAOLD := GETAREA()
LOCAL   _ARET     := {}
LOCAL   _CQUERY   := ""

DEFAULT _CAS      := ""
DEFAULT _AREMESSA := {}
DEFAULT _LREMESSA := .T.

IF SELECT("TRBREM") > 0
	TRBREM->(DBCLOSEAREA())
ENDIF

IF _LREMESSA
	_CQUERY := " SELECT D2_DOC NOTA , D2_SERIE SERIE , D2_ITEM ITEM , D2_EMISSAO EMISSAO " + CRLF
	_CQUERY += " FROM " + RETSQLNAME("SC6") + " SC6 "
	_CQUERY += "        INNER JOIN " + RETSQLNAME("SC5") + " SC5 ON  C5_FILIAL  = '" + XFILIAL("SC5") + "'"         + CRLF
	_CQUERY += "                                                 AND C5_NUM     = C6_NUM AND C5_XTIPFAT = 'R'"      + CRLF
	_CQUERY += "                                                 AND SC5.D_E_L_E_T_ = '' "                          + CRLF
	_CQUERY += "        INNER JOIN " + RETSQLNAME("SD2") + " SD2 ON  D2_FILIAL  = '" + XFILIAL("SD2") + "'"         + CRLF
	_CQUERY += "                                                 AND D2_DOC     = C6_NOTA AND D2_SERIE  = C6_SERIE" + CRLF
	_CQUERY += "                                                 AND D2_PEDIDO  = C6_NUM  AND D2_ITEMPV = C6_ITEM"  + CRLF
	_CQUERY += "                                                 AND SD2.D_E_L_E_T_ = '' "                          + CRLF
	_CQUERY += " WHERE  C6_FILIAL  =  '" + XFILIAL("SC6") + "'"                                                     + CRLF
	_CQUERY += "   AND  C6_XAS     =  '" + _CAS           + "'"                                                     + CRLF
	_CQUERY += "   AND  C6_NOTA    <> '' "                                                                          + CRLF
	_CQUERY += "   AND  C6_BLQ NOT IN ('R','S') "                                                                   + CRLF
	_CQUERY += "   AND  SC6.D_E_L_E_T_ = '' "                                                                       + CRLF
	_CQUERY += "  ORDER BY EMISSAO DESC , SD2.R_E_C_N_O_ DESC " 
ELSE
	_CQUERY := " SELECT   D1_DOC NOTA , D1_SERIE SERIE , D1_ITEM ITEM , D1_EMISSAO EMISSAO" + CRLF
	_CQUERY += " FROM " + RETSQLNAME("SD1") + " SD1 "                                       + CRLF
	_CQUERY += " WHERE    D1_FILIAL  = '" + XFILIAL("SD1") + "'"                            + CRLF
	_CQUERY += "   AND    D1_NFORI   = '" + _AREMESSA[1]   + "'"                            + CRLF
	_CQUERY += "   AND    D1_SERIORI = '" + _AREMESSA[2]   + "'"                            + CRLF
	_CQUERY += "   AND    D1_ITEMORI = '" + _AREMESSA[3]   + "'"                            + CRLF
	_CQUERY += "   AND    SD1.D_E_L_E_T_ = '' "                                             + CRLF
	_CQUERY += " ORDER BY EMISSAO DESC , SD1.R_E_C_N_O_ DESC " 
ENDIF

TCQUERY _CQUERY NEW ALIAS "TRBREM"

IF TRBREM->(!EOF())
	AADD( _ARET, TRBREM->NOTA		   )
	AADD( _ARET, TRBREM->SERIE		   )
	AADD( _ARET, TRBREM->ITEM		   )
	AADD( _ARET, STOD(TRBREM->EMISSAO) )
ENDIF

TRBREM->(DBCLOSEAREA())

RESTAREA( _AAREAOLD )

RETURN _ARET


/*/{PROTHEUS.DOC} FDELZA5
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00190()
// ======================================================================= \\

LOCAL _LRET := .T.

IF EXISTBLOCK("LC01DEL5") 						// --> PONTO DE ENTRADA PARA VALIDAÇÕES ADICIONAIS NA DELEÇÃO DAS LINHAS DA ZA5
   _LRET := EXECBLOCK("LC01DEL5",.T.,.T.,{ODLGGUI}) 
ENDIF

ODLGGUI:OBROWSE:REFRESH()

RETURN _LRET



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPROGRAMA  ³ LOCCRAT   º AUTOR ³ IT UP BUSINESS     º DATA ³ 28/06/2007 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDESCRICAO ³ VISUALIZAR VIA ORÇAMENTO                                   º±±
±±º          ³ CHAMADA: MENU - "R.A.T" DO FONTE LOCC001.PRW              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUSO       ³ ESPECIFICO GPO                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/{PROTHEUS.DOC} LOCCRAT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00191()

PRIVATE COBRA := "001" 

DBSELECTAREA("FP5")
DBSETORDER(1)
FP5->(DBCLEARFILTER())
FP5->(DBSETFILTER({|| ALLTRIM(FP5->FP5_PROJET) == ALLTRIM(FP0->FP0_PROJET) .AND. ALLTRIM(FP5->FP5_OBRA) == ALLTRIM(COBRA) },"ALLTRIM(FP5->FP5_PROJET) == ALLTRIM(FP0->FP0_PROJET) .AND. ALLTRIM(FP5->FP5_OBRA) == ALLTRIM(COBRA) "))
FP5->(DBGOTOP()) 

IF !EMPTY(FP5->FP5_PROJET) 
	LOCA00192(2)	
ELSE 
    
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"Não existe RAT para este projeto."})
ENDIF

RETURN 



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPROGRAMA  ³ LOCRAT    º AUTOR ³ IT UP BUSINESS     º DATA ³ 28/06/2007 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDESCRICAO ³ VISUALIZAR VIA ORÇAMENTO                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUSO       ³ ESPECIFICO GPO                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/{PROTHEUS.DOC} LOCRAT
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00192(NOPC)

LOCAL NSTYLE      := 0
LOCAL ASIZE       := MSADVSIZE()
LOCAL NPOS        := 0 
LOCAL ATEMP       := {}
LOCAL ACPOSNAO    := {"FP5_FILIAL","FP5_PROJET","FP5_OBRA","FP5_OBS","FP5_DTVIS",;
                      "FP5_DADOS ","FP5_GESTOR","FP5_RESPON","FP5_EMISSA","FP5_INLOCO",;
                      "FP5_PRAZO ","FP5_SEQTRA","FP5_VRSERV","FP5_OPER  ","FP5_COD   ",;
                      "FP5_SITUAC","FP5_DTREAL","FP5_REVISA","FP5_COMPLE","FP5_OBSOPE",;
                      "FP5_OBSEQU","FP5_OBSACE","FP5_OBSERV","FP5_CODCLI","FP5_LOJA","FP5_NOMCLI","FP5_PRIORI","FP5_TPPROJ","FP5_TPSERV"}

PRIVATE AHEADER   := {}
PRIVATE ACOLS     := {}
PRIVATE CPRIORI   := ""
PRIVATE CTPROJ    := ""
PRIVATE CTSERV    := ""
PRIVATE NTPROJ    := 1
PRIVATE NTSERV    := 1
PRIVATE OPRIORI
PRIVATE OTPROJ
PRIVATE OTSERV
PRIVATE ATJTEMP   := {}
PRIVATE ATSERV    := {}
PRIVATE ATPROJ    := {}
PRIVATE CPROJETO  := FP0->FP0_PROJET
PRIVATE CCODRAT   := IIF(EMPTY(FP5->FP5_COD),GETSXENUM("FP5","FP5_COD"),FP5->FP5_COD)
PRIVATE CCODREV   := IIF(NOPC==6,IIF(EMPTY(FP5->FP5_REVISA),STRZERO(1,3),STRZERO(VAL(FP5->FP5_REVISA)+1,3)),FP5->FP5_REVISA)
PRIVATE CCOMPLE   := IIF(NOPC==8,IIF(EMPTY(FP5->FP5_COMPLE),STRZERO(1,3),STRZERO(VAL(FP5->FP5_COMPLE)+1,3)),FP5->FP5_COMPLE)

PRIVATE CHORA     := TIME()
PRIVATE CGESTOR   := CRIAVAR("A3_COD")
PRIVATE CRESPON   := CRIAVAR("FP5_RESPON")
PRIVATE DDATAVIS  := CTOD("  /  /  ") 			// FP5_DTVIS  - DATA DA VISTORIA
PRIVATE DPRAZO    := CTOD("  /  /  ") 			// FP5_PRAZO  - PRAZO PARA EXECUÇÃO DA VISTORIA
PRIVATE DREALIZA  := CTOD("  /  /  ") 			// FP5_DTREAL - DATA DA REALIZAÇÃO DA VISTORIA
PRIVATE DEMISSAO  := DDATABASE        			// EMISSAO DA VISTORIA
PRIVATE CINLOCO   := ""
PRIVATE AINLOCO   := {" ","S=SIM","N=NÃO"}
PRIVATE AEMAIL    := {" ","S=SIM","N=NAO"}
PRIVATE CEMAIL    := ""
PRIVATE CSITUA    := ""
PRIVATE ASITUA    := {" ","V=VISTORIADO","N=NAO VISTORIADO","C=COMPLEMENTAR","R=REVISADO","X=CANCELADO"}
PRIVATE CDESENH   := CRIAVAR("FP5_DESEN")
PRIVATE NVLRSERV  := CRIAVAR("FP5_VRSERV")
PRIVATE CCHAVE    := IIF(EMPTY(FP5->FP5_COD) , XFILIAL("FP5")+CPROJETO+COBRA+SPACE(6)+CCODREV+CCOMPLE , XFILIAL("FP5")+CPROJETO+COBRA+CCODRAT+CCODREV+CCOMPLE )

PRIVATE BCOND     := IIF(EMPTY(FP5->FP5_COD) , ; 
                     {|| XFILIAL("FP5") + FP5->FP5_PROJET + FP5->FP5_OBRA  + FP5->FP5_COD + FP5->FP5_REVISA + FP5->FP5_COMPLE == XFILIAL("FP5") + CPROJETO + COBRA + SPACE(6) + CCODREV + CCOMPLE } , ;
                     {|| XFILIAL("FP5") + FP5->FP5_PROJET + FP5->FP5_OBRA  + FP5->FP5_COD + FP5->FP5_REVISA + FP5->FP5_COMPLE == XFILIAL("FP5") + CPROJETO + COBRA + CCODRAT  + CCODREV + CCOMPLE }   )

PRIVATE NINDICE   := 1
PRIVATE LINCLUI	  := IIF(NOPC==3 , .T. , .F.)
PRIVATE LALTERA	  := IIF(NOPC==4 , .T. , .F.)
PRIVATE LEDITA	  := IIF(LINCLUI .OR. LALTERA , .T. , .F.) 
PRIVATE CTITULO   := "R.A.T"
PRIVATE COBSSERV  := ""     					// FP1_ESCOPO
PRIVATE COBS      := ""     					// FP5_OBS
PRIVATE COBSOPER  := ""     					// FP5_OBSOPE
PRIVATE COBSEQUIP := ""     					// FP5_OBSEQU
PRIVATE COBSACESS := ""     					// FP5_OBSACE
PRIVATE OBUTOBS
PRIVATE OBUTPRJ

PRIVATE ATELA[0][0] , AGETS[0]
PRIVATE OFONT1    := TFONT():NEW("ARIAL",08,14,,.T.,,,,.T.,.F.)
PRIVATE OGETZA8   := NIL
PRIVATE AGETZA8	  := {}

REGTOMEMORY("FP5",.T.) 							// CABECALHO MEDICAO

NSTYLE  := 0
CCODCLI := FP0->FP0_CLI
CLOJA   := FP0->FP0_LOJA    
				 
DBSELECTAREA("SA1")
DBSETORDER(1)
MSSEEK(XFILIAL("SA1")  + CCODCLI + CLOJA )

CNOMECLI  := ALLTRIM(SA1->A1_NOME)
CCONTATO  := ALLTRIM(SA1->A1_CONTATO)
CTELEFONE := "("+ALLTRIM(SA1->A1_DDD)+") "+ALLTRIM(SA1->A1_TEL)
CNUMERFAX := "("+ALLTRIM(SA1->A1_DDD)+") "+ALLTRIM(SA1->A1_FAX)
CCLIENTE  := CCODCLI + "/" + CLOJA + "-" + CNOMECLI

// LOCAL DA OBRA
IF FP0->FP0_TIPOSE $ "T"
	DBSELECTAREA("ZA6")
	DBSETORDER(1)
	MSSEEK( XFILIAL("ZA6") + CPROJETO + COBRA )
	CLOCAL   := ZA6->ZA6_NOMORI
	CENDER   := ZA6->ZA6_ENDORI
	CBAIRR   := ZA6->ZA6_BAIORI
	CMUNIC   := ZA6->ZA6_MUNORI
	CESTAD   := ZA6->ZA6_ESTORI
	CCONTATO := ZA6->ZA6_CONORI
	CTELE    := "("+ALLTRIM(ZA6->ZA6_DDDORI)+") "+ALLTRIM(ZA6->ZA6_TELORI)
	COBS     := ZA6->ZA6_OBSVIA
	DDATAVIS := ZA6->ZA6_DTVIS
	DPRAZO   := ZA6->ZA6_DTVIS
	COBSSERV := ZA6->ZA6_OBSVIA
ELSE
	DBSELECTAREA("FP1")
	DBSETORDER(1)
	MSSEEK( XFILIAL("FP1") + CPROJETO + COBRA )
	CLOCAL   := FP1->FP1_NOMORI
	CENDER   := FP1->FP1_ENDORI
	CBAIRR   := FP1->FP1_BAIORI
	CMUNIC   := FP1->FP1_MUNORI
	CESTAD   := FP1->FP1_ESTORI
	CCONTATO := FP1->FP1_CONORI
	CTELE    := "("+ALLTRIM(FP1->FP1_DDDORI)+") "+ALLTRIM(FP1->FP1_TELORI)
	COBS     := FP1->FP1_ESCOPO
	DDATAVIS := FP1->FP1_DTVIS
	DPRAZO   := FP1->FP1_DTVIS
	COBSSERV := FP1->FP1_ESCOPO
ENDIF

CGESTOR   := FP5->FP5_GESTOR
CNOMEGE   := SA3->(POSICIONE("SA3",1,XFILIAL("SA3") + CGESTOR , "A3_NOME" ) )
COBS      := FP5->FP5_OBS
COBSOPER  := FP5->FP5_OBSOPE
COBSEQUIP := FP5->FP5_OBSEQU
COBSACESS := FP5->FP5_OBSACE
CSITUA    := FP5->FP5_SITUAC
DINCLUSA  := CTOD("//")

SX3->(DBSETORDER(2))
IF SX3->(DBSEEK("FP0_TIPOSE")) 					// SE EXISTIR O CAMPO
	IF     FP0->FP0_TIPOSE $ "G"
		CTSERV := "G=EQUIPAMENTOS"				// ALLTRIM(SX3->X3_CBOX) //ARMAZENA COMBO DO CAMPO
	ELSEIF FP0->FP0_TIPOSE $ "T"
		CTSERV := "T=TRANSPORTE"
	ELSE 
		CTSERV := "P=PLATAFORMA" 
	ENDIF
ELSE
	CTSERV := "T=TRANSPORTE;G=EQUIPAMENTOS" 	// ARMAZENA SEGUNDO DOCUMENTAÇÃO //CASO CONTRARIO
ENDIF

ATJTEMP := SEPARA(CTSERV,";")    				// CONSTROI ARRAY DE ACORDO COM O COMBO DO CAMPO
ATSERV  := ACLONE(ATJTEMP)           			// COPIA ARRAY PARA ARRAY STATIC
NTSERV  := IIF( ALLTRIM(FP5->FP5_TPSERV) <> "",ASCAN(ATSERV,{|X| SUBSTR(X,1,1) == ALLTRIM(FP5->FP5_TPSERV) }) , ASCAN(ATSERV,{|X| SUBSTR(X,1,1) == ALLTRIM(FP0->FP0_TIPOSE) }) )

SX3->(DBSETORDER(2))
IF SX3->(DBSEEK("FP0_TPRAT"))       			// SE EXISTIR O CAMPO
	CTPROJ := ALLTRIM(SX3->X3_CBOX) 			// ARMAZENA COMBO DO CAMPO
ELSE                                 			// CASO CONTRARIO
	CTPROJ := "E=ENGENHARIA;P=PROJETOS" 		// ARMAZENA SEGUNDO DOCUMENTAÇÃO
ENDIF

ATJTEMP := SEPARA(CTPROJ,";")    				// CONSTROI ARRAY DE ACORDO COM O COMBO DO CAMPO
ATPROJ  := ACLONE(ATJTEMP)           			// COPIA ARRAY PARA ARRAY STATIC
NTPROJ  := IIF(EMPTY(FP5->FP5_TPPROJ) , "" , FP5->FP5_TPPROJ) 
CPRIORI := FP5->FP5_PRIORI
	
//IF !EMPTY(FP5->FP5_COD)
	CRESPON  := FP5->FP5_RESPON
	CINLOCO  := FP5->FP5_INLOCO
	DDATAVIS := FP5->FP5_DTVIS
	DPRAZO   := FP5->FP5_PRAZO
	DREALIZA := FP5->FP5_DTREAL
	DINCLUSA := FP5->FP5_EMISSA
	NVLRSERV := FP5->FP5_VRSERV
	IF !EMPTY(FP5->FP5_OBSERV)
		COBSSERV := FP5->FP5_OBSERV
	ENDIF
//ENDIF
		
SET KEY VK_F11 TO TELAOBS()
SET KEY VK_F12 TO TELAPRJ()
	
DEFINE MSDIALOG OTELA FROM 0, 0 TO ASIZE[6],ASIZE[5] TITLE CTITULO OF GETWNDDEFAULT() PIXEL 
	OPANEL := TPANEL():NEW(0, 0, "", OTELA,, .F., .F.,,,0,160, .F., .F. )
	OPANEL:ALIGN:= CONTROL_ALIGN_TOP
	
	OPANEL4 := TPANEL():NEW(0, 0, "",OTELA,, .F., .F.,,,0,120, .F., .F. )
	OPANEL4:ALIGN:= CONTROL_ALIGN_TOP
	
	@ 005 ,005 TO 070,500 OF OPANEL PIXEL 
	
	@ 010 ,010 SAY   OEMTOANSI("Nro. Projeto")            SIZE 100,8  OF OPANEL PIXEL  FONT OFONT1
	@ 010 ,060 MSGET OPROJETO  VAR CPROJETO  WHEN .F.      SIZE 170,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 010, 230 BUTTON OBUTPRJ PROMPT "F12"                 SIZE 12,10  OF OPANEL PIXEL  ACTION TELAPRJ()  
	
	@ 010 ,245 SAY   OEMTOANSI("Obra")                    SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 010 ,265 MSGET OOBRA     VAR COBRA     WHEN .F.      SIZE 040,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 010 ,310 SAY   OEMTOANSI("Nro. RAT")                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 010 ,340 MSGET OCODRAT   VAR CCODRAT   WHEN .F.      SIZE 030,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 010 ,375 SAY   OEMTOANSI("Revisão")                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 010 ,405 MSGET OCODREV   VAR CCODREV   WHEN .F.      SIZE 030,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 010 ,440 SAY   OEMTOANSI("Comp")                    SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 010 ,465 MSGET OCOMPLE   VAR CCOMPLE   WHEN .F.      SIZE 030,8  OF OPANEL PIXEL  FONT OFONT1

	@ 025 ,010 SAY   OEMTOANSI("Local")                  SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 025 ,060 MSGET OLOCAL    VAR CLOCAL    WHEN .F.      SIZE 130,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 025 ,200 SAY   OEMTOANSI("Cliente")                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 025 ,230 MSGET OCLIENTE  VAR CCLIENTE  WHEN .F.      SIZE 265,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 040 ,010 SAY   OEMTOANSI("Endereço")               SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 040 ,060 MSGET OENDER    VAR CENDER    WHEN .F.      SIZE 130,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 040 ,200 SAY   OEMTOANSI("Bairro")                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 040 ,230 MSGET OBAIRR    VAR CBAIRR    WHEN .F.      SIZE 080,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 040 ,315 SAY   OEMTOANSI("Municipio")              SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 040 ,350 MSGET OMUNIC    VAR CMUNIC    WHEN .F.      SIZE 060,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 040 ,410 SAY   OEMTOANSI("Estado")                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 040 ,440 MSGET OESTAD    VAR CESTAD    WHEN .F.      SIZE 055,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 055 ,010 SAY   OEMTOANSI("Contato")                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 055 ,060 MSGET OCONTATO  VAR CCONTATO  WHEN .F.      SIZE 130,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 055 ,200 SAY   OEMTOANSI("Fone")                   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 055 ,230 MSGET OTELE     VAR CTELE     WHEN .F.      SIZE 080,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 080 ,010 SAY   OEMTOANSI("Gestor")                 SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 080 ,070 MSGET OGESTOR   VAR CGESTOR   F3 "SA3"      SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 080 ,150 MSGET ONOMEGE   VAR CNOMEGE   WHEN .F.      SIZE 080,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 080 ,245 SAY   OEMTOANSI("Responsável")            SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 080 ,290 MSGET ORESPON   VAR CRESPON   F3 "ENGRAT"   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 080 ,365 SAY   OEMTOANSI("IN LOCO")                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 080 ,395 COMBOBOX OINLOCO VAR CINLOCO  ITEMS AINLOCO SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 095 ,010 SAY   OEMTOANSI("Data Prog. Vistoria")    SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 095 ,070 MSGET ODATAVIS  VAR DDATAVIS                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 095 ,150 SAY   OEMTOANSI("Situação")               SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 095 ,200 COMBOBOX OSITUA VAR CSITUA    ITEMS ASITUA  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 095 ,270 SAY   OEMTOANSI("Envia E-mail")           SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 095 ,320 COMBOBOX OEMAIL VAR CEMAIL    ITEMS AEMAIL  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 110 ,010 SAY   OEMTOANSI("Prazo da vistoria" )     SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 110 ,070 MSGET OPRAZO    VAR DPRAZO                  SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 110 ,150 SAY   OEMTOANSI("Hora")                   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 110 ,200 MSGET OHORA  VAR CHORA                      SIZE 040,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 110 ,260 SAY   OEMTOANSI("Prioridade")             SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 110 ,310 MSGET OPRIORI  VAR CPRIORI    F3 "PRIRAT"   SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 110 ,380 SAY   OEMTOANSI("TP Projeto")             SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 110 ,430 COMBOBOX OTPROJ VAR NTPROJ    ITEMS ATPROJ  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 125 ,010 SAY   OEMTOANSI("DT Reali. Vistoria")     SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 125 ,070 MSGET OREALIZA  VAR DREALIZA                SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 125 ,150 SAY   OEMTOANSI("Valor")                  SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 125 ,200 MSGET OVLRSERV  VAR NVLRSERV PICTURE("@E 999,999,999.99")  SIZE 070,8  OF OPANEL PIXEL FONT OFONT1
	
	@ 125 ,280 SAY   OEMTOANSI("TP Serviço")             SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 125 ,330 COMBOBOX OTSERV VAR CTSERV    ITEMS ATSERV  SIZE 050,8  OF OPANEL PIXEL  FONT OFONT1
	
	@ 140 ,010 SAY   OEMTOANSI("DT Inclusão RAT")        SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1
	@ 140 ,070 MSGET OINCLUSA  VAR DINCLUSA   WHEN .F.     SIZE 070,8  OF OPANEL PIXEL  FONT OFONT1

	@ 140, 200 BUTTON OBUTOBS PROMPT "Observações <F11>"   SIZE 70,10 ACTION TELAOBS() OF OPANEL PIXEL
		
	// --> MONTANDO AHEADER PARA GETDADOS
	ATEMP   := LOCA036("FP5",ACPOSNAO)
	AHEADER := ACLONE(ATEMP[1])

	// --> MONTANDO ACOLS  PARA GETDADOS
	ATEMP   := LOCA03601("FP5" , AHEADER , 4 , NINDICE , CCHAVE , BCOND) 
	ACOLS   := ACLONE(ATEMP[1]) 
	
	IF EMPTY(ACOLS)
		ACOLS0:={}
		FOR NPOS:=1 TO LEN(AHEADER)
			FP5->(AADD(ACOLS0,CRIAVAR(AHEADER[NPOS,2])))
		NEXT NPOS 
		AADD(ACOLS0,.F.  )  					// DELETED
		AADD(ACOLS,ACOLS0)
	ENDIF
	
	ACOLS[1][1] := "001"
	
	OGETZA8 := MSNEWGETDADOS():NEW(10, 10, 100, 100, NSTYLE, "ALLWAYSTRUE", "ALLWAYSTRUE",'+FP5_ITEM' ,,,,, MAXGETDAD,, OPANEL4, AHEADER, ACOLS )
	OGETZA8:OBROWSE:ALIGN:= CONTROL_ALIGN_ALLCLIENT
ACTIVATE MSDIALOG OTELA CENTERED ON INIT ENCHOICEBAR(OTELA ,{||IF(NOPC<>2,FSALVAR1(OTELA),.T.),OTELA:END()},{||ROLLBACKSX8(),OTELA:END() })
	
SET KEY VK_F11 TO
	
FP5->(DBSETFILTER({|| FP5_ITEM == "001" } , " FP5_ITEM == '001' "))
	
RETURN



/*                                                                                                                     
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ                                 
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPROGRAMA  ³ LCGATCLI  º AUTOR ³ IT UP BUSINESS     º DATA ³ 02/05/2019 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDESCRICAO ³ FUNÇÃO PARA GATILHAR O NOME CORRETO DO CLIENTE SEM MEXER   º±±
±±º          ³ NO V0                                                      º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUSO       ³ ESPECIFICO GPO                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß                     
*/

/*/{PROTHEUS.DOC} LCGATCLI
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00193(CCAMPO)

LOCAL LRET := .T.

IF     CCAMPO == "FP0_CLINOM"
	M->FP0_CLINOM := POSICIONE("SA1" , 1 , XFILIAL("SA1")+M->FP0_CLI+M->FP0_LOJA , "A1_NREDUZ")

ELSEIF CCAMPO == "FP1_CLIORI"
	CCLI := M->FP1_CLIORI
	CLOJ := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_LOJORI"})]
	ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := POSICIONE("SA1" , 1 , XFILIAL("SA1")+CCLI+CLOJ , "A1_NREDUZ") 

ELSEIF CCAMPO == "FP1_LOJORI"
	CCLI := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_CLIORI"})]
	CLOJ := M->FP1_LOJORI
	ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_NOMORI"})] := POSICIONE("SA1" , 1 , XFILIAL('SA1')+CCLI+CLOJ , "A1_NREDUZ") 

ENDIF

RETURN LRET


/*/{PROTHEUS.DOC} LOCF3T9STS
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

// ======================================================================= \\
FUNCTION LOCA00194()
// ======================================================================= \\

LOCAL CRET      := ""
LOCAL AAREAXXX  := GETAREA() 
LOCAL CALIASST9 := GETNEXTALIAS()

BEGINSQL ALIAS CALIASST9 
	SELECT TQY.TQY_STATUS
	FROM   %TABLE:TQY% TQY
	WHERE  TQY.TQY_FILIAL = %XFILIAL:TQY%
	  AND  TQY.TQY_STTCTR = '00'
	  AND  TQY.%NOTDEL%
ENDSQL

WHILE (CALIASST9)->(!EOF())
	CRET := CRET + (CALIASST9)->TQY_STATUS + "*" 
	(CALIASST9)->(DBSKIP())
ENDDO

(CALIASST9)->(DBCLOSEAREA())

RESTAREA(AAREAXXX) 

RETURN CRET



// FRANK ZWARG FUGA
// 31/08/2020 - CRIAÇÃO DE LINHAS NA ZAG PARA COMPOR OS ITENS DO PRODUTO ACABADO.
// O SISTEMA ESTA PREPARADO PARA ATÉ 4 NÍVEIS DE SUBGRUPOS NA ESTRUTURA DO PRODUTO, UM PA QUE TEM OUTRO PA ATÉ 4 NÍVEIS
// TRATAMENTO APENAS PARA LOCAÇÃO E CHAMADA VIA FPA_PRODUT
/*
AO DIGITAR UM PRODUTO ATRAVÉS DO VALID DO CAMPO FAREMOS AS SEGUINTES VERIFICAÇÕES:
1- SE O PRODUTO CONTÉM ESTRUTRA NA SG1 FAREMOS AS VALIDAÇÕES ABAIXO
2- SE O CAMPO FPA_SEQGRU ESTIVER VAZIO SIGNIFICA QUE A ESTRUTURA AINDA NÃO FOI EXPANDIDA PARA A ZAG,
   NESTE CASO CRIAREMOS AUTOMATICAMENTE OS ITENS FILHOS
3- SE O CAMPO FPA_SEQGRU ESTIVER PREENCHIDO FAREMOS A VERIFICAÇÃO DE TODOS OS ITENS FILHOS NA ZAG, SE FALTAR ALGUM
	PERGUNTAREMOS SE O USUÁRIO DESEJA INCLUÍ-LO, SE A ESTRUTURA SE ALTERNOR FICANDO COM ITENS A MENOS APENAS APRESENTAREMOS
	UMA MENSAGEM, MAS NÃO DELETAREMOS A LINHA DA ZAG. (ESTE ITEM NAO FOI ATENDIDO AINDA NESTE VERSAO)
4- AO DELETAR UMA LINHA DA ZAG QUE TENHA REFERÊNCIA A ITENS FILHOS, PERGUNTAREMOS SE O USUÁRIO DESEJA ELIMINAR TAMBÉM
	OS ITENS FILHOS (EM TODOS OS NIVEIS). ANTES DE DELETAR TUDO VERIFICAR SE JÁ EXISTE AS GERADA PARA ALGUM ITEM FILHO
	SE EXISTIR NÃO PERMITIR A EXCLUSÃO DOS ITENS FILHOS. DO CONTRÁRIO SERÁ UM PROCESSO MANUAL
5- AO ALTERAR UM ITEM PA, VERIFICAR SE EXISTE ITENS FILHOS, SE EXISTIR PERGUNTAR SE DESEJA ELIMINAR ELES
	SÓ PERMITIR ELIMINAR SE NENHUM DELES ESTIVER COM AS GERADA. DO CONTRÁRIO SERÁ UM PROCESSO MANUAL
6- AO TENTAR DELETAR UM ITEM FILHO, APRESENTAR UMA CONFIRMAÇÃO DO USUÁRIO.
7- SE UM ITEM JÁ TEVE ESTRUTURA E NÃO TEM MAIS, AO ALTERAR VERIFICAR SE DESEJA EXCLUIR OS ITENS FILHOS,
	LEVAR EM CONSIDERAÇÃO SE JÁ TEM AS APROVADA, SE TIVER NÃO PERMITIR A EXCLUSAO AUTOMATICA.
8- O CAMPO QUANTIDADE DEVE FICAR DISPONIVEL PARA EDICAO SOMENTE SE NÃO USAR O PARAMETRO MV_LOCX028
9- A QUANTIDADE SERÁ DIGITADA NA VALIDACAO DO PRODUTO
10- NA EXPLOSÃO DOS ITENS FILHOS TEMOS QUE VER SE O PRODUTO FILHO É UM ACESSORIO, SE FOR PODEMOS ESCOLHER ENTRE AGLUTINAR A QUANTIDADE EM UMA LINHA
	UNICA (SE FORMA MAIOR DO QUE 1 PELA ESTRUTURA E QUANTIDADE DIGITADA), OU DO CONTRÁRIO NÃO SENDO UM ACESSORIO, VAMOS TER QUE CRIAR VÁRIAS LINHAS NA ZAG
*/

/*/{PROTHEUS.DOC} ITMONTAEST
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


FUNCTION LOCA00195()
LOCAL AAREA 	:= GETAREA()
LOCAL _LRET 	:= .T.
LOCAL _AESTRUT	:= {}
LOCAL APERGS	:= {}
LOCAL ARET		:= {}
LOCAL NQUANTI 	:= ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
LOCAL CGRPAND
LOCAL CPRODUTO  := ALLTRIM(M->FPA_PRODUT)
LOCAL _NX
LOCAL _NY
LOCAL CSEQ
LOCAL CAS
LOCAL _CESTRUT
LOCAL _LDEL
LOCAL _LFORCA 	:= .F.
LOCAL _NATORI   := ODLGPLA:NAT

PRIVATE NESTRU  := 0 // UTILIZADO NA FUNCAO RECURSIVA PARA LOCALIZAR A ESTRUTURA DO PRODUTO.

IF SUPERGETMV("MV_LOCX028",,.F.) // SE O SISTEMA TRABALHA COM O PROCESSO DE CRIAÇÃO DOS ITENS FILHOS.
	//IF SUPERGETMV("MV_LOCX217",,4) > 4
	//	MSGALERT("O SISTEMA ESTA PREPARADO PARA ESTRUTURAS COM ATÉ 4 NÍVEIS.","ATENÇÃO!")
	//ELSE
		// TRATAMENTO PARA INCLUSÃO E ALTERAÇÃO SOMENTE NO LOCC001 - LOCAÇÃO.
		SG1->(DBSETORDER(1))
		IF SG1->(DBSEEK(XFILIAL("SG1")+CPRODUTO))
			//_AESTRUT := ITMONTA2()

			// QUANDO O PRODUTO TEM ESTRUTURA SOLICITAMOS A QUANTIDADE NESTA INTERFACE, E NÃO DISPONIBILIZAMOS A ALTERAÇÃO PELO CAMPO FPA_QUANT
			APERGS := {}
			AADD( APERGS ,{1,"QUANTIDADE: "	, NQUANTI, PESQPICT( "FPA", "FPA_QUANT" )		,".T.",,".F.", 50, .F.}) // REMOVIDO A CONSULTA PADRÃO A PEDIDO DO RENAN
			ARET 	  := {}       
			_CTESDEMO := ""
			WHILE PARAMBOX(APERGS ,"QUANTIDADE",ARET,,,,,,,,.F.) 
				IF LEN(ARET) == 0
					LOOP
				ENDIF         

				IF !EMPTY(ARET[1])
					NQUANTI := ARET[1]
				ENDIF 
				EXIT
			ENDDO

			// CONTROLE PARA NÃO ALTERAR A QUANTIDADE DE ITENS FILHOS.
			IF !EMPTY(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1))
				IF NQUANTI <> ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]

					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A quantidade de produtos que fazem parte da estrutura não podem sofrer alterações."})
					
					NQUANTI := ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
				ENDIF
			ENDIF

			IF NQUANTI == 0
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 				{"A quantidade precisa ser maior do que zero."})

				RESTAREA(AAREA)
				ODLGPLA:NAT := _NATORI 
				RETURN .F.
			ELSE
				// SE A QUANTIDADE FOR MAIOR DO QUE 1, SÓ É VALIDO QUANDO FOR DO TIPO ACESSORIO.
				IF SBM->(FIELDPOS("BM_XACESS")) > 0
					CGRPAND := LOCA00189()
				ELSE
					CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
				ENDIF

				SB1->(DBSETORDER(1))
				SB1->(DBSEEK(XFILIAL("SB1")+CPRODUTO))
				IF ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)
					IF NQUANTI > 1
						RESTAREA(AAREA)

						Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Este produto não aceita quantidade maior do que 1."})
						ODLGPLA:NAT := _NATORI 
						RETURN .F.
					ENDIF
				ENDIF

				// SE FOR UM ITEM PAI, E POSSIBILITAR A QUANTIDADE MAIOR DO QUE 1 TEMOS QUE ESTORNAR OS ITENS FILHOS E EXPLODIR NOVAMENTE A ESTRTURA.
				_CESTRUT := ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3))
				_LDEL := .T.
				_NITEM := ODLGPLA:NAT
				IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == "" .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3)) <> ""
					IF NQUANTI <> ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})] .AND. !EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})])
						IF MSGYESNO("PARA ALTERAR A QUANTIDADE FAZ-SE NECESSÁRIO DELETAR OS ITENS FILHOS, VOCÊ CONCORDA?","ATENÇÃO!")
							// VERIFICAR SE OS ITENS PODEM SER EXCLUIDOS
							FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
								IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
									IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
										IF EMPTY( ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM"})])
											CAS := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]
											IF !EMPTY(CAS)
												IF ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+CAS,9,"")) <> "9"
													_LDEL := .F.
												ENDIF
											ENDIF
										ELSE
											_LDEL := .F.
										ENDIF
									ENDIF
								ENDIF
							NEXT
							IF _LDEL
								FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
									IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
										IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
											ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .T.
										ENDIF
									ENDIF
								NEXT
								_LFORCA := .T.
								
								ODLGPLA:NAT := _NITEM
								ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := ""
								ODLGPLA:REFRESH()

							ELSE
								ODLGPLA:NAT := _NATORI 
								RETURN .F.
							ENDIF

							// SE POSITIVO DELETAR OS ITENS

							// CRIAR A NOVA ESTRUTUR
						ENDIF
					ENDIF
				ENDIF	
				
			ENDIF
			ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})] := NQUANTI

			// QUANDO O RETORNO DO SUBSTRING ABAIXO É BRANCO, SIGNIFICA QUE A ESTRUTURA AINDA NÃO FOI EXPLODIDA NA ZAG
			// NESTE CASO VAMOS CRIAR AS LINHAS NA ZAG COM BASE NA EXPLOSÃO DA ESTRUTURA DA SG1.
			IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == "" .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3)) == ""
				_AESTRUT := ITMONTA2(CPRODUTO, NQUANTI)
				NFIXA := ODLGPLA:NAT
				CPRODOLD := M->FPA_PRODUT
				_NITEM := ODLGPLA:NAT
				ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
				CSEQ := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
				FOR _NX := 1 TO LEN(_AESTRUT)
					ODLGPLA:ADDLINE(.T.)
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})] := _AESTRUT[_NX][1]
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]	:= _AESTRUT[_NX][2]
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]	:= ODLGPLA:ACOLS[NFIXA][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})]
					ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := CSEQ + "." + STRZERO(_NX,3,0)
					ODLGPLA:REFRESH()
					ODLGPLA:OBROWSE:REFRESH()
				NEXT

				M->FPA_PRODUT := CPRODOLD
				ODLGPLA:NAT   := NFIXA
				
				ACOLS := ODLGPLA:ACOLS
				ODLGPLA:REFRESH()
				ODLGPLA:OBROWSE:REFRESH()
				
				
				IF NFIXA+1 <= LEN(ODLGPLA:ACOLS)
					FOR _NX:=(NFIXA+1) TO LEN(ODLGPLA:ACOLS)
						ODLGPLA:NAT := _NX
						RUNTRIGGER(2,_NX,NIL,,"FPA_PRODUT")
						//RUNTRIGGER(2,_NX,NIL,,"FPA_CODTAB") 
						LOCA00141(.T.)

						// TRATAMENTO PARA AUTOMATIZAR ALGUNS CAMPOS
						IF EXISTBLOCK("LOCA017") 						// --> PONTO DE ENTRADA PARA ALTERAÇÃO DE CORES DA LEGENDA
							EXECBLOCK("LOCA017" , .T. , .T. , {ODLGPLA, _NX }) 
						ENDIF						

					NEXT
				ENDIF

				IF _LFORCA
					ODLGPLA:ADDLINE(.T.)
					ODLGPLA:REFRESH()
					ODLGPLA:OBROWSE:REFRESH()
				ENDIF

				ODLGPLA:NAT := NFIXA

				M->FPA_PRODUT := CPRODOLD
			ENDIF


		ELSE
			// VERIFICAR SE O CAMPO FPA_SEQEST ESTA PREENCHIDO, SE ESTIVER SIGNIFICA QUE JÁ HOUVE UMA ESTRUTURA
			// CADASTRADA NA SG1 NO PASSADO, NESTE CASO TEMOS QUE PERGUNTAR SE O USUÁRIO DESEJA EXCLUIR A MESMA,
			// ISTO NO CASO DE NÃO HAVER AS NOS ITENS FILHOS JÁ APROVADAS.
			IF !EMPTY(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
			ELSE
				//ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})] := ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQGRU"})]
			ENDIF
		ENDIF
	//ENDIF
ENDIF
RESTAREA(AAREA)
ODLGPLA:NAT := _NATORI 

ODLGPLA:REFRESH()
ODLGPLA:OBROWSE:REFRESH()
RETURN _LRET

// MONTAGEM DA ESTRUTURA DOS PRODUTOS
// FRANK Z FUGA EM 31/08/2020
// JA VEM POSICIONADO DA FUNCAO ITMONTAEST


/*/{PROTHEUS.DOC} ITMONTA2
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

STATIC FUNCTION ITMONTA2(CPRODUTO, NQUANT)
LOCAL _ATEMP 		:= {}
LOCAL _ARESULTADO	:= {}
LOCAL _AAREA 		:= GETAREA()
LOCAL AAREASB1		:= SB1->(GETAREA())
LOCAL AAREASG1		:= SG1->(GETAREA())
LOCAL CNOMEARQ   	:= ''
LOCAL OTEMPTABLE 	:= NIL
LOCAL _NX
LOCAL _NY
LOCAL _NZ
LOCAL _NP
LOCAL _ANIVEL1		:= {}
LOCAL _ANIVEL2		:= {}
LOCAL _ANIVEL3		:= {}
LOCAL _ATEMP1 		:= {}
LOCAL _CSALDO		:= "" // FRANK 22/09/2020 - CONTROLE DO SALDO EM ESTOQUE PARA TODOS OS ITENS DA ESTRUTURA
LOCAL _NSALDO		:= 0

PRIVATE NESTRU   	:= 0

_ATEMP := {}

SB1->(DBSETORDER(1))	
SB1->(DBSEEK(XFILIAL("SB1")+CPRODUTO))
CPRODUTO := SB1->B1_COD

CNOMEARQ := ESTRUT2(SB1->B1_COD,NQUANT,,@OTEMPTABLE,.T.)

ESTRUT->(DBGOTOP())

WHILE !ESTRUT->(EOF())
	// O ULTIMO PARAMETRO É PARA INDICAR A ORDEM DE APRESENTACAO
	AADD(_ATEMP,{ESTRUT->NIVEL, ESTRUT->CODIGO, ESTRUT->COMP, ESTRUT->QUANT, ESTRUT->TRT, ESTRUT->GROPC, ESTRUT->OPC, "", ""})
	ESTRUT->(DBSKIP())
ENDDO

FIMESTRUT2(NIL,OTEMPTABLE)


// SE O NIVEL FOR 1 PEGAR O _ATEMP == CPRODUTO
FOR _NX := 1 TO LEN(_ATEMP)
	IF ALLTRIM(_ATEMP[_NX][2]) == ALLTRIM(CPRODUTO)
		// NIVEL 1 DA ESTRUTURA
		//              CÓDIGO DO PRODUTO, QUANTIDADE
		AADD(_ARESULTADO,{_ATEMP[_NX][03],_ATEMP[_NX][04],1,_ATEMP[_NX][01],_ATEMP[_NX][02]})

	ENDIF
NEXT

_NCONTA := 1
// SE O NIVEL FOR > 1 PEGAR A COMPARACAO COM O NIVEL ANTERIOR
FOR _NX := 1 TO 100 // TRATAMENTO DE ATÉ 1000 NÍVEIS DE ESTRUTURA.
	_NCONTA ++
	_ATEMP1 := _ARESULTADO
	FOR _NY := 1 TO LEN(_ATEMP1)
		FOR _NZ := 1 TO LEN(_ATEMP)
			IF ALLTRIM(_ATEMP1[_NY][01]) == ALLTRIM(_ATEMP[_NZ][02])
				// NIVEL 2 DA ESTRUTURA
				_LENCONTROU := .F.
				FOR _NP := 1 TO LEN(_ARESULTADO)
					IF _ARESULTADO[_NP][01] == _ATEMP[_NZ][03] .AND. _ARESULTADO[_NP][02] == _ATEMP[_NZ][04]
						_LENCONTROU := .T.
					ENDIF
				NEXT
				IF !_LENCONTROU
					AADD(_ARESULTADO,{_ATEMP[_NZ][03],_ATEMP[_NZ][04], _NCONTA, _ATEMP[_NZ][01],_ATEMP[_NZ][02]})
				ENDIF
			ENDIF
		NEXT
	NEXT
NEXT



// TRATAMENTO PARA AGLUTINAR AS QUANTIDADES
// QUANDO FOR MAIOR DO QUE 1 TEMOS QUE LEVAR EM CONSIDERAÇÃO SE O PRODUTO PERTENCE A UM GRUPO QUE ACEITA QUANTIDADE > 1
_ATEMP 			:= _ARESULTADO
_ARESULTADO 	:= {}

// SE NÃO ACEITAR QUANTIDADES MAIORES DO QUE 1, OU SEJA, SE NÃO PERMITIR PRODUTOS AGLUTINADOS NA LINHA DA ZAG
// SEPARAREMOS TODOS OS ITENS QUE ESTÃO COM QUANTIDADE MAIOR DO QUE 1 EM LINHAS DISTINTAS.
IF SUPERGETMV("MV_LOCX006",,"S") == "N" 
	// AQUI VAMOS SEPARAR TODOS OS ITENS COM QUANTIDADE MAIOR DO QUE 1 E CRIAR AS LINHAS COM QTD 1.
	FOR _NX := 1 TO LEN(_ATEMP)
		IF _ATEMP[_NX][02] == 1
			AADD(_ARESULTADO,{_ATEMP[_NX][01],_ATEMP[_NX][02],_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
		ELSE
			FOR _NY := 1 TO _ATEMP[_NX][02]
				AADD(_ARESULTADO,{_ATEMP[_NX][01],1,_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
			NEXT
		ENDIF
	NEXT
ELSE
	// SE FOR AGLUTINAR, TEMOS QUE VERIFICAR QUAIS PRODUTOS ACEITAM QUANTIDADE MAIOR DO QUE 1, DOS QUE NÃO ACEITAREM
	// TEMOS QUE CRIAR VÁRIAS LINHAS DE 1 NA QUANTIDADE.
	FOR _NX := 1 TO LEN(_ATEMP)
		IF _ATEMP[_NX][02] == 1
			AADD(_ARESULTADO,{_ATEMP[_NX][01],_ATEMP[_NX][02],_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
		ELSE
			// SE A QUANTIDADE FOR > 0
			// VER QUAIS OS GRUPOS DE PRODUTOS QUE ACEITAM QTD > 0
			IF SBM->(FIELDPOS("BM_XACESS")) > 0
				CGRPAND := LOCA00189()
			ELSE
				CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
			ENDIF

			SB1->(DBSETORDER(1))
			SB1->(DBSEEK(XFILIAL("SB1")+ALLTRIM(_ATEMP[_NX][01])))
			IF ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)
				// SEPARAR POR LINHAS COM 1 NA QTD.
				FOR _NY := 1 TO _ATEMP[_NX][02]
					AADD(_ARESULTADO,{_ATEMP[_NX][01],1,_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
				NEXT
			ELSE
				AADD(_ARESULTADO,{_ATEMP[_NX][01],_ATEMP[_NX][02],_ATEMP[_NX][04],_ATEMP[_NX][05],"","",_ATEMP[_NX][02]})
			ENDIF
		ENDIF
	NEXT
ENDIF

// TRATAMENTO DO SALDO EM ESTOQUE - 22/09/2020 (FRANK)
/*
IF LEN(_ARESULTADO) > 0
	FOR _NX := 1 TO LEN(_ARESULTADO)
		SB1->(DBSETORDER(1))
		SB1->(DBSEEK(XFILIAL("SB1")+ALLTRIM(_ATEMP[_NX][01])))
		IF SB1->B1_XRENSAL == "S"
			_NSALDO := CALCEST(SB1->B1_COD, SB1->B1_LOCPAD, DDATABASE + 1, SB1->B1_FILIAL)[1]
			IF _NSALDO < _ARESULTADO[_NX][2]
				IF _CSALDO <> ""
					_CSALDO += "; "
				ENDIF
				_CSALDO += ALLTRIM(_ATEMP[_NX][01])
			ENDIF
		ENDIF
	NEXT
	//IF !EMPTY(_CSALDO)
	//	MSGALERT("PRODUTOS: "+_CSALDO,"SALDO INSUFICIENTE DE ESTOQUE.")
	//ENDIF
ENDIF
*/

// ORDEM DE APRESENTAÇÃO




SG1->(RESTAREA(AAREASG1))
SB1->(RESTAREA(AAREASB1))

RESTAREA(_AAREA)
RETURN _ARESULTADO


// FRANK ZWARG FUGA - 13/08/2020
// X3_WHEN DO CAMPO FPA_QUANT

/*/{PROTHEUS.DOC} ITZAGQTD
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00196()
LOCAL CGRPAND
LOCAL CPRODUTO 	
LOCAL _AAREA 	:= GETAREA()
LOCAL _LRET		:= .T.

CPRODUTO := ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]

IF SBM->(FIELDPOS("BM_XACESS")) > 0
	CGRPAND := LOCA00189()
ELSE
	CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
ENDIF

SB1->(DBSETORDER(1))
IF !SB1->(DBSEEK(XFILIAL("SB1")+CPRODUTO))
	IF M->FPA_QUANT > 1
		_LRET := .F.
	ENDIF
ELSE
	IF ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)
		IF M->FPA_QUANT > 1
			_LRET := .F.
		ENDIF
	ELSE	
		_LRET := .T.
	ENDIF
ENDIF

IF !_LRET
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"A quantidade não pode ser superior a 1."})
ENDIF

RESTAREA(_AAREA)

RETURN _LRET

// VALIDA SE PODE ALTERAR O CONTEÚDO DO CAMPO FPA_QUANT
// FRANK ZWARG FUGA EM 31/08/2020
// EM DECORRÊNCIA DE SE ESTOURAR A ESTRUTURA DO PRODUTO, AGORA TRATAMOS A QUANTIDADE.
// SE FOR UM ITEM QUE NÃO TEM ESTRUTURA POSSIBILITAMOS O FORMATO PADRÃO, PORÉM SE FOR UM ITEM COM ESTRUTURA,
// A QUANTIDADE SÓ PODE SER DIGITADA NA INTERFACE DE DIGITAÇÃO DO CÓDIGO DO PRODUTO.


/*/{PROTHEUS.DOC} ITVALPX
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA00197()
LOCAL _LRET 	:= .T.
LOCAL CPRODUTO 	:= ALLTRIM(ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})])
LOCAL NQUANTI 	:= ODLGPLA:ACOLS[ODLGPLA:NAT,ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
LOCAL AAREA 	:= GETAREA()

IF SUPERGETMV("MV_LOCX028",,.F.) .AND. SUPERGETMV("MV_LOCX030",,.F.) // SE O SISTEMA TRABALHA COM O PROCESSO DE CRIAÇÃO DOS ITENS FILHOS.
	SG1->(DBSETORDER(1))
	IF SG1->(DBSEEK(XFILIAL("SG1")+CPRODUTO))
		IF M->FPA_QUANT <> NQUANTI
			Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Este produto tem estrutura definida, portanto somente via edição do código do produto é possível digitar a quantidade."})
			_LRET := .F.
		ENDIF
	ENDIF	
ENDIF

RESTAREA(AAREA)
RETURN _LRET


// TRATAMENTO NA DELEÇÃO DE UMA LINHA NA ZAG PARA DELETAR AUTOMATICAMENTE OS ITENS FILHOS.
// FRANK ZWARG FUGA - 01/09/2020

/*/{PROTHEUS.DOC} ITDELFIL
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


FUNCTION LOCA00198()
LOCAL _NX
LOCAL _NITEM 	:= ODLGPLA:NAT
LOCAL _CESTRUT 
LOCAL _LDEL  	:= .T.
LOCAL CPRODUTO 	:= ALLTRIM(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})])
LOCAL CAS
LOCAL _LRET := .T.
IF SUPERGETMV("MV_LOCX028",,.F.) .AND. SUPERGETMV("MV_LOCX030",,.F.)// SE O SISTEMA TRABALHA COM O PROCESSO DE CRIAÇÃO DOS ITENS FILHOS.

	IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
		IF !MSGYESNO("ESTE ITEM REFERE-SE A UM ITEM FILHO DA ESTRUTURA DE PRODUTOS.","CONFIRMA A EXCLUSÃO?")
			RETURN  .F.
		ENDIF
	ENDIF

	SG1->(DBSETORDER(1))
	IF SG1->(DBSEEK(XFILIAL("SG1")+CPRODUTO))
		// VERIFICAR SE É O ITEM PAI.
		_CESTRUT := ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3))
		IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[ODLGPLA:NAT][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == "" .AND. !EMPTY(_CESTRUT)
			IF MSGYESNO("ESTE ITEM É FORMADOR DE ESTRTURA DE PRODUTOS, DESEJA EXCLUIR TODOS OS ITENS FILHOS?","ATENÇÃO!")
				// VERIFICAR SE A LINHA DO ITEM FILHO PODE SER DELETADA			
				FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
					IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
						IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
							IF EMPTY( ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM"})])
								CAS := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_AS"})]
								IF !EMPTY(CAS)
									IF ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+CAS,9,"")) <> "9"
										_LDEL := .F.
									ENDIF
								ENDIF
							ELSE
								_LDEL := .F.
							ENDIF
						ENDIF
					ENDIF
				NEXT
				IF _LDEL
					FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
						IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
							IF SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],1,3) == _CESTRUT .AND. ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) <> ""
								ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .T.
							ENDIF
						ENDIF
					NEXT
					ODLGPLA:REFRESH()
					ODLGPLA:NAT := _NITEM
				ELSE
					Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	   					Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	 					{"Os itens filhos precisa ser excluídos manualmente, pois nem todos estão na situação de exclusão."})

					IF !MSGYESNO("DESEJA EXCLUIR MESMO ASSIM O ITEM PAI?","EXCLUSÃO MANUAL DOS ITENS FILHOS.")
						_LRET := .F.
					ENDIF
				ENDIF
			ENDIF

		ENDIF	
	ENDIF
ENDIF
RETURN _LRET


// NOTAS FISCAIS DE RETORNO
// FRANK ZWARG FUGA - 09/09/2020
// APRESENTAÇÃO DAS NOTAS DE RETORNO, CUSTOMIZAÇÃO NECESSÁRIA PARA OS CASOS EM QUE EXISTE O RETORNO PARCIAL.

/*/{PROTHEUS.DOC} ITRETO
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


FUNCTION LOCA00199()
LOCAL CALIAS 	:= "FQZ"
LOCAL CCHAVE
LOCAL CCONDICAO
LOCAL _AAREA	:= GETAREA()
LOCAL ODLG
LOCAL NSTYLE	:= 2
LOCAL _NENVIO	:= 0
LOCAL _NRETORNO	:= 0
LOCAL _NSALDO
LOCAL _NNOTAS  	:= 0
LOCAL _NX
LOCAL _CTEMP
LOCAL CSQL
LOCAL _LOK 		:= .F.
LOCAL _CFILX 
LOCAL _CDOCX 
LOCAL _CSERI
LOCAL _CFORN
LOCAL _LOJAX
LOCAL _CITEM
LOCAL _DDATA
PRIVATE ODLGX

IF FP0->FP0_TIPOSE == "L"
	CCHAVE    := XFILIAL(CALIAS)+FP0->FP0_PROJET
	CCONDICAO := 'FQZ_FILIAL+FQZ_PROJET=="'+CCHAVE+'"'
	NINDICE   := 2 					
	CFILTRO   := CCONDICAO //+ ".AND. FQZ_MSBLQL == '2' "
	AHEADER   := FHEADER(CALIAS)
	
	FOR _NX := 1 TO LEN(AHEADER)
		IF AHEADER[_NX][02] == "FQZ_RETIRA"
			AHEADER[_NX][14] := "A"	
		ELSE
			AHEADER[_NX][14] := "V"	
		ENDIF
	NEXT

	ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)

	FOR _NX := 1 TO LEN(ACOLS)
		SB1->(DBSETORDER(1))
		SB1->(DBSEEK(XFILIAL("SB1")+ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_COD"})]))
		_CTEMP := SB1->B1_DESC
		ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DESC"})] := _CTEMP

      	IF SF1->F1_TIPO $ "D#B"
			SA1->(DBSETORDER(1))
            SA1->(DBSEEK(XFILIAL("SA1")+SF1->F1_FORNECE+SF1->F1_LOJA))
            _CTEMP := SA1->A1_NOME
        ELSE
        	SA2->(DBSETORDER(1))
            SA2->(DBSEEK(XFILIAL("SA2")+SF1->F1_FORNECE+SF1->F1_LOJA))
            _CTEMP := SA2->A2_NOME
        ENDIF
		ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_NOME"})] := _CTEMP

		_NRETORNO := ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_QTD"})]
	NEXT

	_NNOTAS := LEN(ACOLS)

	// ENCONTRAR A QUANTIDADE DE ITENS ENVIADOS SC6.
	IF SELECT("TRB") > 0 
		TRB->(DBCLOSEAREA()) 
	ENDIF 
	CSQL := " SELECT C6_QTDVEN AS TOT "
	CSQL += " FROM "+RETSQLNAME("SC6") + " SC6 "
	CSQL += " WHERE  SC6.C6_FILIAL = '"+FPA->FPA_FILREM+"' "
	CSQL +=   " AND  SC6.C6_NOTA ='"+FPA->FPA_NFREM+"' "
	CSQL += " AND SC6.C6_SERIE ='"+FPA->FPA_SERREM+"' "
	CSQL += " AND SC6.C6_ITEM = '"+FPA->FPA_ITEREM+"' "
	CSQL +=   " AND  SC6.D_E_L_E_T_ =  '' "
	DBUSEAREA(.T. , "TOPCONN" , TCGENQRY(,,CSQL) , "TRB" , .F. , .T.) 
	_NENVIO := TRB->TOT
	TRB->(DBCLOSEAREA()) 

	NLIN1X  := 0
	NCOL1X  := 0
	NLIN2X  := 0
	NCOL2X  := 0
	DEFINE MSDIALOG ODLG FROM 0,0 TO 400,800 TITLE OEMTOANSI("NOTAS DE RETORNO. CONTRATO: "+FP0->FP0_PROJET) OF OMAINWND PIXEL 
	ODLGX := MSNEWGETDADOS():NEW(33,3,150,400 ,NSTYLE,,,"",,,,,,.T.,ODLG,AHEADER,ACOLS)

	@ 160,002 SAY "Produto:" SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE
	@ 159,035 GET FPA->FPA_PRODUT PICTURE "@!" WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
	@ 159,090 GET POSICIONE("SB1",1,XFILIAL("SB1")+FPA->FPA_PRODUT,"B1_DESC")  PICTURE "@!" WHEN .F. SIZE 150,8 OF ODLG PIXEL COLOR CLR_BLUE 
	@ 171,002 SAY "Quantidade:" SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE
	@ 170,035 GET FPA->FPA_QUANT PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
	@ 171,090 SAY "Enviados:" SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE
	@ 170,123 GET _NENVIO PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
	@ 171,177 SAY "Retornados:" SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE
	@ 170,215 GET _NRETORNO PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
	@ 171,270 SAY "Saldo:" SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE
	_NSALDO := _NENVIO - _NRETORNO
	@ 170,303 GET _NSALDO PICTURE PESQPICT("FPA","FPA_QUANT") WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 
	@ 182,002 SAY "Notas:" SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE
	@ 181,035 GET _NNOTAS PICTURE "9999" WHEN .F. SIZE 50,8 OF ODLG PIXEL COLOR CLR_BLUE 

	ACTIVATE MSDIALOG ODLG CENTERED ON INIT ENCHOICEBAR(ODLG , {|| IF(VALPROX(ODLGX,AHEADER),(_LOK:=.T., ODLG:END()),.F.) } , {|| ODLG:END()} , , ) 

	IF _LOK
		FOR _NX := 1 TO LEN(ODLGX:ACOLS)
			IF !ODLGX:ACOLS[_NX][LEN(AHEADER)+1]
				_CFILX := XFILIAL("FQZ")
				_CDOCX := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DOC"})]
				_CSERI := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_SERIE"})]
				_CFORN := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_FORNE"})]
				_LOJAX := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_LOJA"})]
				_CITEM := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_ITEM"})]
				_DDATA := ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})]
				FQZ->(DBSETORDER(1))
				IF FQZ->(DBSEEK(_CFILX+_CDOCX+_CSERI+_CFORN+_LOJAX+_CITEM))
					FQZ->(RECLOCK("FQZ",.F.))
					FQZ->FQZ_RETIRA := _DDATA
					IF !EMPTY(FQZ->FQZ_ULTFAT)
						FQZ->FQZ_PERPRO := FQZ->FQZ_RETIRA - FQZ->FQZ_ULTFAT
					ELSE
						FQZ->FQZ_PERPRO := FQZ->FQZ_RETIRA - FQZ->FQZ_DTINI
					ENDIF

					FPA->(DBSETORDER(3))
					FPA->(DBSEEK(XFILIAL("FPA")+FQZ->FQZ_AS))

					FQZ->FQZ_VLRPRO := (FQZ->FQZ_VLRTOT * FQZ->FQZ_PERPRO) / IF(FPA->FPA_LOCDIA==0,1,FPA->FPA_LOCDIA)
					FQZ->(MSUNLOCK())
				ENDIF
			ENDIF
		NEXT
	ENDIF

	RESTAREA(_AAREA)

ELSE
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"Rotina exclusiva para contratos de locação."})
ENDIF

RETURN

// VALIDACAO DO PERIODO DA SOLICITACAO DE DEVOLUCAO PARCIAL
// FRANK 21/10/20

/*/{PROTHEUS.DOC} VALPROX
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


STATIC FUNCTION VALPROX(ODLGX,AHEADER)
LOCAL _LRET := .T.
LOCAL _NX

FOR _NX:=1 TO LEN(ODLGX:ACOLS)
	IF !ODLGX:ACOLS[_NX][LEN(AHEADER)+1]
		IF EMPTY(ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_ULTFAT"})])
			IF ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})] < ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DTINI"})]
				_LRET := .F.
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
				{"A data da solicitação de retirada da nota: "+ALLTRIM(ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DOC"})])+" é inválida. Data da retirada < do que a data inicial do contrato."})
			ENDIF
		ELSE
			IF ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})] < ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_ULTFAT"})]
				_LRET := .F.
				Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
				Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
				{"A data da solicitação de retirada da nota: "+ALLTRIM(ODLGX:ACOLS[_NX][ASCAN(AHEADER,{|X|ALLTRIM(X[2])=="FQZ_DOC"})])+" é inválida. A data da retirada é < do que a data do último faturamento."})
			ENDIF
		ENDIF
	ENDIF
NEXT

RETURN _LRET


// FUNÇÃO PARA TRATAMENTO DO BECHANGE PARA DELETAR TODAS AS RELAÇÕES
/*/{PROTHEUS.DOC} ITDELZA1
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


STATIC FUNCTION ITDELZA1
LOCAL _NX
LOCAL _COBRA := ODLGOBR:ACOLS[ODLGOBR:NAT][ASCAN(ODLGOBR:AHEADER,{|X|ALLTRIM(X[2])=="FP1_OBRA"  })]
IF !ODLGOBR:ACOLS[ODLGOBR:NAT][LEN(ODLGOBR:AHEADER)+1]
	// DELETAR A ZA6
	FOR _NX := 1 TO LEN(OPLA_COLS)
		IF OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})] == _COBRA
			OPLA_COLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .T.
		ENDIF
	NEXT

	// DELETAR A ZAA
	FOR _NX := 1 TO LEN(ORES_COLS)
		IF ORES_COLS[_NX][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == _COBRA
			ORES_COLS[_NX][LEN(ODLGRES:AHEADER)+1] := .T.
		ENDIF
	NEXT

ELSE
	// TIRAR A DELEÇÃO DA ZA6
	FOR _NX := 1 TO LEN(OPLA_COLS)
		IF OPLA_COLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_OBRA"})] == _COBRA
			OPLA_COLS[_NX][LEN(ODLGPLA:AHEADER)+1] := .F.
		ENDIF
	NEXT

	// TIRAR A DELEÇÃO DA ZAA
	FOR _NX := 1 TO LEN(ORES_COLS)
		IF ORES_COLS[_NX][ASCAN(ODLGRES:AHEADER,{|X|ALLTRIM(X[2])=="FP6_OBRA"})] == _COBRA
			ORES_COLS[_NX][LEN(ODLGRES:AHEADER)+1] := .F.
		ENDIF
	NEXT

ENDIF
RETURN .T.


// CONTROLE DO ESTOQUE ANTES DE SALVAR
// FRANK Z FUGA

/*/{PROTHEUS.DOC} ITESTX
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


STATIC FUNCTION ITESTX
LOCAL _LRET 	:= .T.
LOCAL _AAREA 	:= GETAREA()
LOCAL _CPRODUTO
LOCAL _CPATRI
LOCAL _CTIPOSE
LOCAL _NQUANT
LOCAL _CMENS	:= ""
LOCAL _NX
LOCAL _CLOCAL
LOCAL LVLDEST   := SUPERGETMV("MV_LOCX282", .F., .T.)

If valtype(ODLGPLA) <> "O" .Or. !LVLDEST
	Return .T.
EndIF

FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
	IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
		_CPRODUTO := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRODUT"})]
		_CPATRI   := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_GRUA"})]
		_CTIPOSE  := M->FP0_TIPOSE"
		_NQUANT   := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_QUANT"})]
		_CLOCAL	  := ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_LOCAL"})]
		SB1->(DBSETORDER(1))
		IF SB1->(DBSEEK(XFILIAL("SB1")+_CPRODUTO))
			//IF SB1->B1_XRENSAL == "S" .AND. _CTIPOSE == "L" .AND. EMPTY(_CPATRI) xrensal removido da 94
			IF _CTIPOSE == "L" .AND. EMPTY(_CPATRI)
				_NSALDO := CALCEST(SB1->B1_COD, _CLOCAL, DDATABASE + 1, SB1->B1_FILIAL)[1]
				IF _NQUANT > _NSALDO
					IF !EMPTY(_CMENS)
						_CMENS += "; "
					ENDIF
					_CMENS += ALLTRIM(_CPRODUTO)
				ENDIF 
			ENDIF
		ENDIF
	ENDIF
NEXT
IF !EMPTY(_CMENS)
	_LRET := .F.
	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{_CMENS,"Produtos que não possuem saldo em estoque suficiente."})
ENDIF

RESTAREA(_AAREA)
RETURN _LRET

// BANCO DE CONHECIMENTO
// FRANK Z FUGA EM 05/10/2020

/*/{PROTHEUS.DOC} ITCONHE
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


STATIC FUNCTION ITCONHE
LOCAL CCAMPOSSIM := "AC9_DESCRI"
LOCAL AHEADER := FHEADER("AC9", CCAMPOSSIM)
LOCAL ACOLS := {}
LOCAL CALIAS    
LOCAL CCHAVE    
LOCAL CCONDICAO 
LOCAL NINDICE   
LOCAL CFILTRO   
LOCAL ACOLS     

MSDOCUMENT("FP0", FP0->(RECNO()), NOPC)

CALIAS    := "AC9"
CCHAVE    := XFILIAL(CALIAS)+"FP0"+CFILANT+CFILANT+FP0->FP0_PROJET
CCONDICAO := "ALLTRIM(AC9_FILIAL+AC9_ENTIDA+AC9_FILENT+AC9_CODENT)=='"+ALLTRIM(CCHAVE)+"'"
NINDICE   := 2  								
CFILTRO   := CCONDICAO
ACOLS     := FCOLS(AHEADER,CALIAS,NINDICE,CCHAVE,CCONDICAO,CFILTRO)


IF VALTYPE(ODLGFOL) == "O"
	ODLGFOL:ACOLS := ACOLS
	ODLGFOL:REFRESH()
ENDIF

RETURN

// ROTINA PARA LIMPAR OS VALORES DOS ITENS PAIS.
// FRANK 26/10/20

/*/{PROTHEUS.DOC} ZAGLPRC
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


FUNCTION LOCA001A0()
LOCAL _LITEM := .F.
LOCAL _NX   := 0

If valtype(ODLGPLA) <> "O"
	Return .T.
EndIF

FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
	IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
		IF !EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
			IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == ""
				IF ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})] > 0
					//IF EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM"})])
						_LITEM := .T.
					//ENDIF
				ENDIF
			ENDIF
		ENDIF
	ENDIF
NEXT

IF _LITEM

	Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
	Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
	{"Existem itens pais com valor informado."})


	IF MSGYESNO("DESEJA ZERAR OS VALORES?","ATENÇÃO!")
		FOR _NX := 1 TO LEN(ODLGPLA:ACOLS)
			IF !ODLGPLA:ACOLS[_NX][LEN(ODLGPLA:AHEADER)+1]
				IF !EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})])
					IF ALLTRIM(SUBSTR(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_SEQEST"})],5,1)) == ""
						IF ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})] > 0
							//IF EMPTY(ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_NFREM"})])
								ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VRHOR"})] := 0
								ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_PRCUNI"})] := 0
								ODLGPLA:ACOLS[_NX][ASCAN(ODLGPLA:AHEADER,{|X|ALLTRIM(X[2])=="FPA_VLBRUT"})] := 0
							//ENDIF
						ENDIF
					ENDIF
				ENDIF
			ENDIF
		NEXT
	ENDIF
ENDIF

RETURN .T.


// FUNCAO PARA INIBIR A ALTERACAO DO CAMPO FQZ_RETIRA QUANDO HOUVER UM PV ASSOCIADO.
// FRANK 05/11/20

/*/{PROTHEUS.DOC} VLDFQZRET
ITUP BUSINESS - TOTVS RENTAL

<P><B>PONTOS DE ENTRADA:</B>
<P><B>PARÂMETROS:</B>

@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@PARAM 
@RETURN 
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/


FUNCTION LOCA001A2()
LOCAL _LRET := .T.
IF !EMPTY(ODLGX:ACOLS[ODLGX:NAT][ASCAN(ODLGX:AHEADER,{|X|ALLTRIM(X[2])=="FQZ_PV"})])
	IF M->FQZ_RETIRA <> ODLGX:ACOLS[ODLGX:NAT][ASCAN(ODLGX:AHEADER,{|X|ALLTRIM(X[2])=="FQZ_RETIRA"})]
		_LRET := .F.
		Help(Nil,	Nil,"RENTAL: "+alltrim(upper(Procname())),;
		Nil,"Inconsistência nos dados.",1,0,Nil,Nil,Nil,Nil,Nil,;
		{"A data da retirada não pode ser alterada, pois já existe um PV gerado."})

	ENDIF
ENDIF
RETURN _LRET
